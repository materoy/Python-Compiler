Useless nonterminals

   fstring
   type_expressions
   statement_newline
   expressions
   lte_bitwise_or
   lt_bitwise_or
   del_t_atom


Terminals which are not used

   DIGITS
   PLUS
   MINUS
   MUL
   DIVIDE
   NUM
   SPECIAL
   NL
   SPACE
   KEYWORD
   SPECIAL_START
   SPECIAL_END
   SEP
   END
   NOTIN
   T
   F
   COLON
   MOD
   PLUSEQUAL
   PRINT
   COMMENT
   RANGE
   SINGLEQUOTE
   DOUBLEQUOTE
   EXPONENTIAL
   COMMA
   LIST
   DIVIDEEQUAL
   MINUSEQUAL
   MULEQUAL
   LESSTHAN
   LESSTHANEQUAL
   GREATERTHAN
   GREATERTHANEQUAL
   NOTEQUAL


Useless rules

  424 fstring: star_expressions

  425 type_expressions: ',' '.' expression ',' '*' expression ',' '*' '*' expression
  426                 | ',' '.' expression ',' '*' expression
  427                 | ',' '.' expression ',' '*' '*' expression
  428                 | '*' expression ',' '*' '*' expression
  429                 | '*' expression
  430                 | '*' '*' expression
  431                 | ',' '.' expression

  432 statement_newline: compound_stmt NEWLINE
  433                  | simple_stmts
  434                  | NEWLINE

  435 expressions: /* empty */
  436            | expression '(' ',' expression ')' '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END
  437            | expression ','
  438            | expression

  439 lte_bitwise_or: '<' EQUAL bitwise_or

  440 lt_bitwise_or: '<' bitwise_or

  441 del_t_atom: /* empty */
  442           | NAME
  443           | '(' del_target ')'
  444           | '(' SQUAREBRACKET_START del_targets SQUAREBRACKET_END ')'
  445           | SQUAREBRACKET_START SQUAREBRACKET_START del_targets SQUAREBRACKET_END SQUAREBRACKET_END


State 1 conflicts: 8 shift/reduce, 22 reduce/reduce
State 3 conflicts: 11 reduce/reduce
State 6 conflicts: 5 shift/reduce, 20 reduce/reduce
State 7 conflicts: 5 shift/reduce, 20 reduce/reduce
State 8 conflicts: 5 shift/reduce, 32 reduce/reduce
State 13 conflicts: 3 shift/reduce, 3 reduce/reduce
State 20 conflicts: 6 shift/reduce, 22 reduce/reduce
State 22 conflicts: 5 shift/reduce, 19 reduce/reduce
State 27 conflicts: 5 shift/reduce, 19 reduce/reduce
State 28 conflicts: 2 shift/reduce, 32 reduce/reduce
State 33 conflicts: 4 shift/reduce, 19 reduce/reduce
State 34 conflicts: 4 shift/reduce, 32 reduce/reduce
State 36 conflicts: 3 shift/reduce, 4 reduce/reduce
State 37 conflicts: 4 shift/reduce, 32 reduce/reduce
State 38 conflicts: 4 shift/reduce, 32 reduce/reduce
State 70 conflicts: 1 shift/reduce
State 71 conflicts: 1 shift/reduce
State 73 conflicts: 2 shift/reduce
State 75 conflicts: 1 shift/reduce
State 76 conflicts: 1 shift/reduce
State 77 conflicts: 1 shift/reduce
State 81 conflicts: 1 shift/reduce
State 82 conflicts: 3 shift/reduce, 31 reduce/reduce
State 83 conflicts: 1 shift/reduce
State 90 conflicts: 5 shift/reduce, 19 reduce/reduce
State 102 conflicts: 6 shift/reduce, 21 reduce/reduce
State 103 conflicts: 5 shift/reduce, 20 reduce/reduce
State 106 conflicts: 5 shift/reduce, 19 reduce/reduce
State 107 conflicts: 1 reduce/reduce
State 110 conflicts: 3 shift/reduce, 1 reduce/reduce
State 123 conflicts: 4 shift/reduce, 15 reduce/reduce
State 128 conflicts: 1 shift/reduce, 2 reduce/reduce
State 131 conflicts: 3 shift/reduce, 31 reduce/reduce
State 132 conflicts: 3 shift/reduce, 3 reduce/reduce
State 135 conflicts: 7 shift/reduce, 22 reduce/reduce
State 139 conflicts: 7 shift/reduce, 21 reduce/reduce
State 140 conflicts: 1 reduce/reduce
State 142 conflicts: 3 shift/reduce, 2 reduce/reduce
State 143 conflicts: 5 shift/reduce, 20 reduce/reduce
State 164 conflicts: 5 shift/reduce, 19 reduce/reduce
State 168 conflicts: 4 shift/reduce, 14 reduce/reduce
State 169 conflicts: 4 shift/reduce, 14 reduce/reduce
State 170 conflicts: 4 shift/reduce, 14 reduce/reduce
State 172 conflicts: 4 shift/reduce, 32 reduce/reduce
State 173 conflicts: 4 shift/reduce, 14 reduce/reduce
State 183 conflicts: 4 shift/reduce, 32 reduce/reduce
State 184 conflicts: 4 shift/reduce, 32 reduce/reduce
State 187 conflicts: 4 shift/reduce, 32 reduce/reduce
State 188 conflicts: 4 shift/reduce, 32 reduce/reduce
State 189 conflicts: 4 shift/reduce, 32 reduce/reduce
State 190 conflicts: 4 shift/reduce, 32 reduce/reduce
State 191 conflicts: 5 shift/reduce, 32 reduce/reduce
State 192 conflicts: 4 shift/reduce, 32 reduce/reduce
State 194 conflicts: 6 shift/reduce, 20 reduce/reduce
State 212 conflicts: 6 shift/reduce, 20 reduce/reduce
State 220 conflicts: 7 shift/reduce, 22 reduce/reduce
State 222 conflicts: 7 shift/reduce, 22 reduce/reduce
State 231 conflicts: 3 shift/reduce, 3 reduce/reduce
State 232 conflicts: 3 shift/reduce, 1 reduce/reduce
State 237 conflicts: 6 shift/reduce, 20 reduce/reduce
State 239 conflicts: 2 shift/reduce, 1 reduce/reduce
State 243 conflicts: 5 shift/reduce, 20 reduce/reduce
State 250 conflicts: 2 shift/reduce
State 268 conflicts: 3 shift/reduce, 4 reduce/reduce
State 274 conflicts: 7 shift/reduce, 21 reduce/reduce
State 275 conflicts: 3 shift/reduce, 2 reduce/reduce
State 284 conflicts: 6 shift/reduce, 20 reduce/reduce
State 289 conflicts: 6 shift/reduce, 20 reduce/reduce
State 291 conflicts: 5 shift/reduce, 19 reduce/reduce
State 292 conflicts: 5 shift/reduce, 19 reduce/reduce
State 293 conflicts: 4 shift/reduce, 14 reduce/reduce
State 296 conflicts: 4 shift/reduce, 14 reduce/reduce
State 300 conflicts: 4 shift/reduce, 14 reduce/reduce
State 303 conflicts: 1 shift/reduce
State 304 conflicts: 1 shift/reduce
State 305 conflicts: 4 shift/reduce, 32 reduce/reduce
State 306 conflicts: 4 shift/reduce, 32 reduce/reduce
State 311 conflicts: 4 shift/reduce, 32 reduce/reduce
State 314 conflicts: 4 shift/reduce, 32 reduce/reduce
State 315 conflicts: 5 shift/reduce, 20 reduce/reduce
State 341 conflicts: 5 shift/reduce, 19 reduce/reduce
State 349 conflicts: 6 shift/reduce, 21 reduce/reduce
State 367 conflicts: 6 shift/reduce, 21 reduce/reduce
State 369 conflicts: 3 shift/reduce, 2 reduce/reduce
State 379 conflicts: 5 shift/reduce, 20 reduce/reduce
State 383 conflicts: 5 shift/reduce, 20 reduce/reduce
State 395 conflicts: 5 shift/reduce, 22 reduce/reduce
State 399 conflicts: 1 shift/reduce, 1 reduce/reduce
State 400 conflicts: 5 shift/reduce, 20 reduce/reduce
State 402 conflicts: 5 shift/reduce, 20 reduce/reduce
State 405 conflicts: 8 shift/reduce, 22 reduce/reduce
State 407 conflicts: 5 shift/reduce, 19 reduce/reduce
State 413 conflicts: 2 reduce/reduce
State 414 conflicts: 4 shift/reduce, 15 reduce/reduce
State 421 conflicts: 5 shift/reduce, 20 reduce/reduce
State 433 conflicts: 5 shift/reduce, 31 reduce/reduce
State 440 conflicts: 1 shift/reduce
State 441 conflicts: 1 shift/reduce
State 445 conflicts: 6 shift/reduce, 20 reduce/reduce
State 466 conflicts: 5 shift/reduce, 29 reduce/reduce
State 468 conflicts: 5 shift/reduce, 20 reduce/reduce
State 476 conflicts: 5 shift/reduce, 20 reduce/reduce
State 477 conflicts: 3 shift/reduce, 2 reduce/reduce
State 479 conflicts: 3 shift/reduce, 2 reduce/reduce
State 488 conflicts: 6 shift/reduce, 20 reduce/reduce
State 494 conflicts: 3 shift/reduce, 1 reduce/reduce
State 497 conflicts: 6 shift/reduce, 20 reduce/reduce
State 504 conflicts: 5 shift/reduce, 31 reduce/reduce
State 516 conflicts: 2 shift/reduce
State 527 conflicts: 6 shift/reduce, 21 reduce/reduce
State 529 conflicts: 5 shift/reduce, 20 reduce/reduce
State 530 conflicts: 1 shift/reduce, 1 reduce/reduce
State 532 conflicts: 7 shift/reduce, 22 reduce/reduce
State 533 conflicts: 7 shift/reduce, 22 reduce/reduce
State 537 conflicts: 7 shift/reduce, 20 reduce/reduce
State 542 conflicts: 6 shift/reduce, 20 reduce/reduce
State 558 conflicts: 4 shift/reduce, 14 reduce/reduce
State 562 conflicts: 1 reduce/reduce
State 565 conflicts: 5 shift/reduce, 20 reduce/reduce
State 587 conflicts: 3 shift/reduce, 2 reduce/reduce
State 600 conflicts: 2 reduce/reduce
State 616 conflicts: 5 shift/reduce, 20 reduce/reduce
State 651 conflicts: 3 shift/reduce, 3 reduce/reduce
State 659 conflicts: 5 shift/reduce, 20 reduce/reduce
State 663 conflicts: 1 reduce/reduce
State 672 conflicts: 6 shift/reduce, 19 reduce/reduce
State 680 conflicts: 6 shift/reduce, 21 reduce/reduce
State 686 conflicts: 6 shift/reduce, 21 reduce/reduce
State 687 conflicts: 7 shift/reduce, 22 reduce/reduce
State 689 conflicts: 7 shift/reduce, 22 reduce/reduce
State 752 conflicts: 4 shift/reduce, 14 reduce/reduce
State 753 conflicts: 5 shift/reduce, 22 reduce/reduce
State 756 conflicts: 3 shift/reduce, 3 reduce/reduce
State 759 conflicts: 5 shift/reduce, 20 reduce/reduce
State 764 conflicts: 1 reduce/reduce
State 767 conflicts: 5 shift/reduce, 20 reduce/reduce
State 769 conflicts: 5 shift/reduce, 19 reduce/reduce
State 770 conflicts: 5 shift/reduce, 19 reduce/reduce
State 772 conflicts: 5 shift/reduce, 19 reduce/reduce
State 803 conflicts: 3 shift/reduce, 2 reduce/reduce
State 804 conflicts: 5 shift/reduce, 20 reduce/reduce
State 850 conflicts: 5 shift/reduce, 20 reduce/reduce
State 852 conflicts: 6 shift/reduce, 21 reduce/reduce
State 857 conflicts: 1 reduce/reduce
State 871 conflicts: 7 shift/reduce, 22 reduce/reduce
State 875 conflicts: 7 shift/reduce, 22 reduce/reduce
State 886 conflicts: 2 reduce/reduce
State 938 conflicts: 5 shift/reduce, 18 reduce/reduce
State 959 conflicts: 7 shift/reduce, 22 reduce/reduce
State 962 conflicts: 7 shift/reduce, 22 reduce/reduce
State 981 conflicts: 7 shift/reduce, 22 reduce/reduce
State 982 conflicts: 1 reduce/reduce
State 990 conflicts: 5 shift/reduce, 20 reduce/reduce
State 997 conflicts: 7 shift/reduce, 22 reduce/reduce
State 998 conflicts: 7 shift/reduce, 22 reduce/reduce
State 1001 conflicts: 7 shift/reduce, 22 reduce/reduce
State 1006 conflicts: 5 shift/reduce, 18 reduce/reduce
State 1053 conflicts: 7 shift/reduce, 22 reduce/reduce
State 1054 conflicts: 5 shift/reduce, 20 reduce/reduce
State 1064 conflicts: 5 shift/reduce, 20 reduce/reduce
State 1075 conflicts: 1 shift/reduce, 2 reduce/reduce
State 1083 conflicts: 1 reduce/reduce
State 1094 conflicts: 5 shift/reduce, 19 reduce/reduce
State 1099 conflicts: 5 shift/reduce, 20 reduce/reduce
State 1101 conflicts: 5 shift/reduce, 19 reduce/reduce
State 1133 conflicts: 5 shift/reduce, 19 reduce/reduce
State 1151 conflicts: 1 reduce/reduce
State 1197 conflicts: 7 shift/reduce, 22 reduce/reduce
State 1203 conflicts: 1 reduce/reduce
State 1208 conflicts: 7 shift/reduce, 22 reduce/reduce


Grammar

    0 $accept: file $end

    1 file: SQUAREBRACKET_START statements SQUAREBRACKET_END

    2 statements: statement '+'

    3 statement: compound_stmt
    4          | simple_stmts

    5 simple_stmts: DEF
    6             | simple_stmt '!' ';' NEWLINE
    7             | ';' '.' simple_stmt '+' SQUAREBRACKET_START ';' SQUAREBRACKET_END NEWLINE

    8 simple_stmt: assignment
    9            | star_expressions
   10            | return_stmt
   11            | import_stmt
   12            | raise_stmt
   13            | PASS
   14            | del_stmt
   15            | yield_stmt
   16            | BREAK
   17            | CONTINUE
   18            | assert_stmt
   19            | global_stmt
   20            | nonlocal_stmt

   21 compound_stmt: function_def
   22              | if_stmt
   23              | class_def
   24              | with_stmt
   25              | for_stmt
   26              | try_stmt
   27              | while_stmt
   28              | match_stmt

   29 assignment: NAME ':' expression SQUAREBRACKET_START EQUAL annotated_rhs SQUAREBRACKET_END
   30           | '(' '(' single_target ')'
   31           | single_subscript_attribute_target ')' ':' expression SQUAREBRACKET_START EQUAL annotated_rhs SQUAREBRACKET_END
   32           | '(' star_targets EQUAL ')' '+' '(' yield_expr '|' star_expressions ')' '!' EQUAL SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END
   33           | single_target augassign '~' '(' yield_expr '|' star_expressions ')'

   34 augassign: /* empty */
   35          | '+' EQUAL
   36          | '-' EQUAL
   37          | '*' EQUAL
   38          | '@' EQUAL
   39          | '/' EQUAL
   40          | '%' EQUAL
   41          | '&' EQUAL
   42          | '|' EQUAL
   43          | '^' EQUAL
   44          | '<' '<' EQUAL
   45          | '>' '>' EQUAL
   46          | '*' '*' EQUAL
   47          | '/' '/' EQUAL

   48 global_stmt: GLOBAL ',' '.' NAME '+'

   49 nonlocal_stmt: NONLOCAL ',' '.' NAME '+'

   50 yield_stmt: yield_expr

   51 assert_stmt: ASSERT expression SQUAREBRACKET_START ',' expression SQUAREBRACKET_END

   52 del_stmt: DEL del_targets '&' '(' ';' '|' NEWLINE ')'

   53 import_stmt: import_name '|' import_from

   54 import_name: IMPORT dotted_as_names

   55 import_from: /* empty */
   56            | FROM '(' '.' '|' '.' '.' '.' ')' '*' dotted_name IMPORT import_from_targets
   57            | FROM '(' '.' '|' '.' '.' '.' ')' '+' IMPORT import_from_targets

   58 import_from_targets: /* empty */
   59                    | '(' import_from_as_names SQUAREBRACKET_START ',' SQUAREBRACKET_END ')'
   60                    | import_from_as_names '!' ','
   61                    | '*'

   62 import_from_as_names: NAME SQUAREBRACKET_START AS NAME SQUAREBRACKET_END

   63 dotted_as_names: ',' '.' dotted_as_name '+'

   64 dotted_as_name: dotted_name SQUAREBRACKET_START AS NAME SQUAREBRACKET_END

   65 dotted_name: dotted_name '.' NAME
   66            | NAME

   67 if_stmt: IF named_expression ':' block elif_stmt
   68        | IF named_expression ':' block SQUAREBRACKET_START else_block SQUAREBRACKET_END

   69 elif_stmt: ELIF named_expression ':' block elif_stmt
   70          | ELIF named_expression ':' block SQUAREBRACKET_START else_block SQUAREBRACKET_END

   71 else_block: ELSE ':' block

   72 while_stmt: WHILE named_expression ':' block SQUAREBRACKET_START else_block SQUAREBRACKET_END

   73 for_stmt: FOR star_targets IN '~' star_expressions ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block SQUAREBRACKET_START else_block SQUAREBRACKET_END
   74         | ASYNC FOR star_targets IN '~' star_expressions ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block SQUAREBRACKET_START else_block SQUAREBRACKET_END

   75 with_stmt: WITH '(' ',' '.' with_item '+' ',' '?' ')' ':' block
   76          | WITH ',' '.' with_item '+' ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block
   77          | ASYNC WITH '(' ',' '.' with_item '+' ',' '?' ')' ':' block
   78          | ASYNC WITH ',' '.' with_item '+' ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block

   79 with_item: expression AS star_target '&' '(' ',' '|' ')' '|' ':' ')'
   80          | expression

   81 try_stmt: TRY ':' block finally_block
   82         | TRY ':' block except_block '+' SQUAREBRACKET_START else_block SQUAREBRACKET_END SQUAREBRACKET_START finally_block SQUAREBRACKET_END

   83 except_block: /* empty */
   84             | EXPECT expression SQUAREBRACKET_START AS NAME SQUAREBRACKET_END ':' block
   85             | EXPECT ':' block

   86 finally_block: FINALLY ':' block

   87 match_stmt: MATCH subject_expr ':' NEWLINE INDENT case_block '+' DEDENT

   88 subject_expr: /* empty */
   89             | star_named_expression ',' star_named_expressions '?'
   90             | named_expression

   91 case_block: CASE patterns guard '?' ':' block

   92 guard: IF named_expression

   93 patterns: /* empty */
   94         | open_sequence_pattern
   95         | pattern

   96 pattern: /* empty */
   97        | as_pattern
   98        | or_pattern

   99 as_pattern: or_pattern AS pattern_capture_target

  100 or_pattern: /* empty */
  101           | '|' '.' closed_pattern '+'

  102 closed_pattern: /* empty */
  103               | literal_pattern
  104               | capture_pattern
  105               | wildcard_pattern
  106               | value_pattern
  107               | group_pattern
  108               | sequence_pattern
  109               | mapping_pattern
  110               | class_pattern

  111 literal_pattern: signed_number '!' '(' '+' '|' '-' ')'
  112                | complex_number
  113                | strings
  114                | NONE
  115                | TRUE
  116                | FALSE

  117 literal_expr: /* empty */
  118             | signed_number '!' '(' '+' '|' '-' ')'
  119             | complex_number
  120             | strings
  121             | NONE
  122             | TRUE
  123             | FALSE

  124 complex_number: signed_real_number '+' imaginary_number
  125               | signed_real_number '-' imaginary_number

  126 signed_number: /* empty */
  127              | INTEGER
  128              | '-' INTEGER

  129 signed_real_number: /* empty */
  130                   | real_number
  131                   | '-' real_number

  132 real_number: /* empty */
  133            | INTEGER

  134 imaginary_number: /* empty */
  135                 | INTEGER

  136 capture_pattern: pattern_capture_target

  137 pattern_capture_target: /* empty */
  138                       | '!' '_' NAME '!' '(' '.' '|' '('
  139                       | EQUAL ')'

  140 wildcard_pattern: '_'

  141 value_pattern: attr '!' '(' '.' '|' '(' '|' EQUAL ')'

  142 attr: name_or_attr '.' NAME

  143 name_or_attr: /* empty */
  144             | attr
  145             | NAME

  146 group_pattern: '(' pattern ')'

  147 sequence_pattern: SQUAREBRACKET_START maybe_sequence_pattern '?' SQUAREBRACKET_END
  148                 | '(' open_sequence_pattern '?' ')'

  149 open_sequence_pattern: maybe_star_pattern ',' maybe_sequence_pattern '?'

  150 maybe_sequence_pattern: ',' '.' maybe_star_pattern '+' ',' '?'

  151 maybe_star_pattern: star_pattern
  152                   | pattern

  153 star_pattern: '*' pattern_capture_target
  154             | '*' wildcard_pattern

  155 mapping_pattern: '{' '}'
  156                | '{' double_star_pattern ',' '?' '}'
  157                | '{' items_pattern ',' double_star_pattern ',' '?' '}'
  158                | '{' items_pattern ',' '?' '}'

  159 items_pattern: ',' '.' key_value_pattern '+'

  160 key_value_pattern: '(' literal_expr '|' attr ')' ':' pattern

  161 double_star_pattern: '*' '*' pattern_capture_target

  162 class_pattern: name_or_attr '(' ')'
  163              | name_or_attr '(' positional_patterns ',' '?' ')'
  164              | name_or_attr '(' keyword_patterns ',' '?' ')'
  165              | name_or_attr '(' positional_patterns ',' keyword_patterns ',' '?' ')'

  166 positional_patterns: ',' '.' pattern '+'

  167 keyword_patterns: ',' '.' keyword_pattern '+'

  168 keyword_pattern: NAME EQUAL pattern

  169 return_stmt: RETURN SQUAREBRACKET_START expression_list SQUAREBRACKET_END

  170 raise_stmt: RAISE expression SQUAREBRACKET_START FROM expression SQUAREBRACKET_END
  171           | RAISE

  172 function_def: decorators function_def_raw
  173             | function_def_raw

  174 function_def_raw: DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block
  175                 | ASYNC DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

  176 func_type_comment: NEWLINE TYPE_COMMENT '&' '(' NEWLINE INDENT ')'
  177                  | TYPE_COMMENT

  178 params: parameters

  179 parameters: slash_no_default param_no_default '*' param_with_default '*' SQUAREBRACKET_START star_etc SQUAREBRACKET_END
  180           | slash_with_default param_with_default '*' SQUAREBRACKET_START star_etc SQUAREBRACKET_END
  181           | param_no_default '+' param_with_default '*' SQUAREBRACKET_START star_etc SQUAREBRACKET_END
  182           | param_with_default '+' SQUAREBRACKET_START star_etc SQUAREBRACKET_END
  183           | star_etc

  184 slash_no_default: param_no_default '+' '/' ','
  185                 | param_no_default '+' '/' '&' ')'

  186 slash_with_default: param_no_default '*' param_with_default '+' '/' ','
  187                   | param_no_default '*' param_with_default '+' '/' '&' ')'

  188 star_etc: /* empty */
  189         | '*' param_no_default param_maybe_default '*' SQUAREBRACKET_START kwds SQUAREBRACKET_END
  190         | '*' ',' param_maybe_default '+' SQUAREBRACKET_START kwds SQUAREBRACKET_END
  191         | kwds

  192 kwds: '*' '*' param_no_default

  193 param_no_default: /* empty */
  194                 | param ',' TYPE_COMMENT '?'
  195                 | param TYPE_COMMENT '?' '&' ')'

  196 param_with_default: /* empty */
  197                   | param default ',' TYPE_COMMENT '?'
  198                   | param default TYPE_COMMENT '?' '&' ')'

  199 param_maybe_default: /* empty */
  200                    | param default '?' ',' TYPE_COMMENT '?'
  201                    | param default '?' TYPE_COMMENT '?' '&' ')'

  202 param: NAME annotation '?'

  203 annotation: ':' expression

  204 default: EQUAL expression

  205 decorators: '(' '@' named_expression NEWLINE ')' '+'

  206 class_def: decorators class_def_raw
  207          | class_def_raw

  208 class_def_raw: /* empty */
  209              | CLASS NAME SQUAREBRACKET_START '(' SQUAREBRACKET_START arguments SQUAREBRACKET_END ')' SQUAREBRACKET_END ':' block

  210 block: /* empty */
  211      | NEWLINE INDENT statements DEDENT
  212      | simple_stmts

  213 star_expressions: /* empty */
  214                 | star_expression '(' ',' star_expression ')' '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END
  215                 | star_expression ','
  216                 | star_expression

  217 star_expression: /* empty */
  218                | '*' bitwise_or
  219                | expression

  220 star_named_expressions: ',' '.' star_named_expression '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

  221 star_named_expression: /* empty */
  222                      | '*' bitwise_or
  223                      | named_expression

  224 assigment_expression: /* empty */
  225                     | NAME ':' EQUAL '~' expression

  226 named_expression: assigment_expression
  227                 | expression '!' ':' EQUAL

  228 annotated_rhs: yield_expr '|' star_expressions

  229 expression: /* empty */
  230           | disjunction IF disjunction ELSE expression
  231           | disjunction
  232           | lambdef

  233 lambdef: LAMBDA SQUAREBRACKET_START lambda_params SQUAREBRACKET_END ':' expression

  234 lambda_params: lambda_parameters

  235 lambda_parameters: /* empty */
  236                  | lambda_slash_no_default lambda_param_no_default '*' lambda_param_with_default '*' SQUAREBRACKET_START
  237                  | lambda_slash_with_default lambda_param_with_default '*' SQUAREBRACKET_START lambda_star_etc SQUAREBRACKET_END
  238                  | lambda_param_no_default '+' lambda_param_with_default '*' SQUAREBRACKET_START lambda_star_etc SQUAREBRACKET_END
  239                  | lambda_param_with_default '+' SQUAREBRACKET_START lambda_star_etc SQUAREBRACKET_END
  240                  | lambda_star_etc

  241 lambda_slash_no_default: lambda_param_no_default '+' '/' ','
  242                        | lambda_param_no_default '+' '/' '&' ':'

  243 lambda_slash_with_default: lambda_param_no_default '*' lambda_param_with_default '+' '/' ','
  244                          | lambda_param_no_default '*' lambda_param_with_default '+' '/' '&' ':'

  245 lambda_star_etc: /* empty */
  246                | '*' lambda_param_no_default lambda_param_maybe_default '*' SQUAREBRACKET_START lambda_kwds SQUAREBRACKET_END
  247                | '*' ',' lambda_param_maybe_default '+' SQUAREBRACKET_START lambda_kwds SQUAREBRACKET_END
  248                | lambda_kwds

  249 lambda_kwds: '*' '*' lambda_param_no_default

  250 lambda_param_no_default: /* empty */
  251                        | lambda_param ','
  252                        | lambda_param '&' ':'

  253 lambda_param_with_default: /* empty */
  254                          | lambda_param default ','
  255                          | lambda_param default '&' ':'

  256 lambda_param_maybe_default: /* empty */
  257                           | lambda_param default '?' ','
  258                           | lambda_param default '?' '&' ':'

  259 lambda_param: NAME

  260 disjunction: /* empty */
  261            | conjunction '(' OR conjunction ')' '+'
  262            | conjunction

  263 conjunction: /* empty */
  264            | inversion '(' AND inversion ')' '+'
  265            | inversion

  266 inversion: /* empty */
  267          | NOT inversion
  268          | comparison

  269 comparison: bitwise_or compare_op_bitwise_or_pair '+'
  270           | bitwise_or

  271 compare_op_bitwise_or_pair: eq_bitwise_or
  272                           | noteq_bitwise_or
  273                           | gte_bitwise_or
  274                           | gt_bitwise_or
  275                           | notin_bitwise_or
  276                           | in_bitwise_or
  277                           | isnot_bitwise_or
  278                           | is_bitwise_or

  279 eq_bitwise_or: DOUBLEEQUAL bitwise_or

  280 noteq_bitwise_or: '(' '!' EQUAL ')' bitwise_or

  281 gte_bitwise_or: '>' EQUAL bitwise_or

  282 gt_bitwise_or: '>' bitwise_or

  283 notin_bitwise_or: NOT IN bitwise_or

  284 in_bitwise_or: IN bitwise_or

  285 isnot_bitwise_or: IS NOT bitwise_or

  286 is_bitwise_or: IS bitwise_or

  287 bitwise_or: /* empty */
  288           | bitwise_or '|' bitwise_xor
  289           | bitwise_xor

  290 bitwise_xor: /* empty */
  291            | bitwise_xor '^' bitwise_and
  292            | bitwise_and

  293 bitwise_and: /* empty */
  294            | bitwise_and '&' shift_expr
  295            | shift_expr

  296 shift_expr: /* empty */
  297           | shift_expr '<' '<' sum
  298           | shift_expr '>' '>' sum
  299           | sum

  300 sum: /* empty */
  301    | sum '+' term
  302    | sum '-' term
  303    | term

  304 term: /* empty */
  305     | term '*' factor
  306     | term '/' factor
  307     | term '/' '/' factor
  308     | term '%' factor
  309     | term '@' factor
  310     | factor

  311 factor: /* empty */
  312       | '+' factor
  313       | '-' factor
  314       | '~' factor
  315       | power

  316 power: await_primary '*' '*' factor
  317      | await_primary

  318 await_primary: AWAIT primary
  319              | primary

  320 primary: /* empty */
  321        | primary '.' NAME
  322        | primary genexp
  323        | primary '(' SQUAREBRACKET_START arguments SQUAREBRACKET_END ')'
  324        | primary SQUAREBRACKET_START slices SQUAREBRACKET_END
  325        | atom

  326 slices: /* empty */
  327       | slice '!' ','
  328       | ',' '.' slice '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

  329 slice: SQUAREBRACKET_START expression SQUAREBRACKET_END ':' SQUAREBRACKET_START expression SQUAREBRACKET_END SQUAREBRACKET_START ':' SQUAREBRACKET_START expression SQUAREBRACKET_END SQUAREBRACKET_END
  330      | named_expression

  331 atom: /* empty */
  332     | NAME
  333     | TRUE
  334     | FALSE
  335     | NONE
  336     | strings
  337     | INTEGER
  338     | '(' tuple '|' group '|' genexp ')'
  339     | '(' list '|' listcomp ')'
  340     | '(' dict '|' set '|' dictcomp '|' setcomp ')'
  341     | '.' '.' '.'

  342 strings: STRING '+'

  343 list: /* empty */
  344     | SQUAREBRACKET_START SQUAREBRACKET_START star_named_expressions SQUAREBRACKET_END SQUAREBRACKET_END

  345 listcomp: /* empty */
  346         | SQUAREBRACKET_START named_expression for_if_clauses SQUAREBRACKET_END

  347 tuple: '(' SQUAREBRACKET_START star_named_expression ',' SQUAREBRACKET_START star_named_expressions SQUAREBRACKET_END SQUAREBRACKET_END ')'

  348 group: /* empty */
  349      | '(' '(' yield_expr '|' named_expression ')' ')'

  350 genexp: /* empty */
  351       | '(' '(' assigment_expression '|' expression '!' ':' EQUAL ')' for_if_clauses ')'

  352 set: '{' star_named_expressions '}'

  353 setcomp: /* empty */
  354        | '{' named_expression for_if_clauses '}'

  355 dict: '{' SQUAREBRACKET_START double_starred_kvpairs SQUAREBRACKET_END '}'

  356 dictcomp: /* empty */
  357         | '{' kvpair for_if_clauses '}'

  358 double_starred_kvpairs: ',' '.' double_starred_kvpair '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

  359 double_starred_kvpair: '*' '*' bitwise_or
  360                      | kvpair

  361 kvpair: expression ':' expression

  362 for_if_clauses: /* empty */
  363               | for_if_clause '+'

  364 for_if_clause: /* empty */
  365              | ASYNC FOR star_targets IN '~' disjunction '(' IF disjunction ')' '*'
  366              | FOR star_targets IN '~' disjunction '(' IF disjunction ')' '*'

  367 yield_expr: /* empty */
  368           | YIELD FROM expression
  369           | YIELD SQUAREBRACKET_START star_expressions SQUAREBRACKET_END

  370 arguments: /* empty */
  371          | args SQUAREBRACKET_START ',' SQUAREBRACKET_END '&' ')'

  372 args: /* empty */
  373     | ',' '.' '(' starred_expression '|' '(' assigment_expression '|' expression '!' ':' EQUAL ')' '!' EQUAL ')' '+' SQUAREBRACKET_START
  374     | kwargs

  375 kwargs: ',' '.' kwarg_or_starred '+' ',' ',' '.' kwarg_or_double_starred '+'
  376       | ',' '.' kwarg_or_starred '+'
  377       | ',' '.' kwarg_or_double_starred '+'

  378 starred_expression: /* empty */
  379                   | '*' expression

  380 kwarg_or_starred: NAME EQUAL expression
  381                 | starred_expression

  382 kwarg_or_double_starred: /* empty */
  383                        | NAME EQUAL expression
  384                        | '*' '*' expression

  385 star_targets: /* empty */
  386             | star_target '!' ','
  387             | star_target '(' ',' star_target ')' '*' SQUAREBRACKET_START ',' SQUAREBRACKET_END

  388 star_targets_list_seq: ',' '.' star_target '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

  389 star_targets_tuple_seq: /* empty */
  390                       | star_target '(' ',' star_target ')' '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END
  391                       | star_target ','

  392 star_target: /* empty */
  393            | '*' '(' '!' '*' star_target ')'
  394            | target_with_star_atom

  395 target_with_star_atom: /* empty */
  396                      | t_primary '.' NAME '!' t_lookahead
  397                      | t_primary SQUAREBRACKET_START slices SQUAREBRACKET_END '!' t_lookahead
  398                      | star_atom

  399 star_atom: NAME
  400          | '(' target_with_star_atom ')'
  401          | '(' SQUAREBRACKET_START star_targets_tuple_seq SQUAREBRACKET_END ')'
  402          | SQUAREBRACKET_START SQUAREBRACKET_START star_targets_list_seq SQUAREBRACKET_END SQUAREBRACKET_END

  403 single_target: /* empty */
  404              | single_subscript_attribute_target
  405              | NAME
  406              | '(' single_target ')'

  407 single_subscript_attribute_target: /* empty */
  408                                  | t_primary '.' NAME '!' t_lookahead
  409                                  | t_primary SQUAREBRACKET_START slices SQUAREBRACKET_END '!' t_lookahead

  410 expression_list: expression '(' ',' expression ')' '*' SQUAREBRACKET_START ',' SQUAREBRACKET_END

  411 del_targets: ',' '.' del_target '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

  412 del_target: /* empty */
  413           | t_primary '.' NAME '!' t_lookahead
  414           | t_primary SQUAREBRACKET_START slices SQUAREBRACKET_END '!' t_lookahead

  415 t_primary: /* empty */
  416          | t_primary '.' NAME '&' t_lookahead
  417          | t_primary SQUAREBRACKET_START slices SQUAREBRACKET_END '&' t_lookahead
  418          | t_primary genexp '&' t_lookahead
  419          | t_primary '(' SQUAREBRACKET_START arguments SQUAREBRACKET_END ')' '&' t_lookahead
  420          | atom '&' t_lookahead

  421 t_lookahead: '('
  422            | SQUAREBRACKET_START
  423            | '.'


Terminals, with rules where they appear

$end (0) 0
'!' (33) 6 32 60 111 118 138 141 227 280 327 351 373 386 393 396 397
    408 409 413 414
'%' (37) 40 308
'&' (38) 41 52 79 176 185 187 195 198 201 242 244 252 255 258 294 371
    416 417 418 419 420
'(' (40) 30 32 33 52 56 57 59 75 77 79 111 118 138 141 146 148 160
    162 163 164 165 174 175 176 205 209 214 261 264 280 323 338 339
    340 347 349 351 365 366 373 387 390 393 400 401 406 410 419 421
')' (41) 30 31 32 33 52 56 57 59 75 77 79 111 118 139 141 146 148 160
    162 163 164 165 174 175 176 185 187 195 198 201 205 209 214 261
    264 280 323 338 339 340 347 349 351 365 366 371 373 387 390 393
    400 401 406 410 419
'*' (42) 37 46 56 61 153 154 161 179 180 181 186 187 189 190 192 218
    222 236 237 238 243 244 246 247 249 305 316 359 365 366 379 384
    387 393 410
'+' (43) 2 7 32 35 48 49 57 63 75 76 77 78 82 87 101 111 118 124 150
    159 166 167 181 182 184 185 186 187 190 205 214 220 238 239 241
    242 243 244 247 261 264 269 301 312 328 342 358 363 373 375 376
    377 388 390 411
',' (44) 48 49 51 59 60 63 75 76 77 78 79 89 149 150 156 157 158 159
    163 164 165 166 167 184 186 190 194 197 200 214 215 220 241 243
    247 251 254 257 327 328 347 358 371 373 375 376 377 386 387 388
    390 391 410 411
'-' (45) 36 111 118 125 128 131 174 175 302 313
'.' (46) 7 48 49 56 57 63 65 75 76 77 78 101 138 141 142 150 159 166
    167 220 321 328 341 358 373 375 376 377 388 396 408 411 413 416
    423
'/' (47) 39 47 184 185 186 187 241 242 243 244 306 307
':' (58) 29 31 67 68 69 70 71 72 73 74 75 76 77 78 79 81 82 84 85 86
    87 91 160 174 175 203 209 225 227 233 242 244 252 255 258 329 351
    361 373
';' (59) 6 7 52
'<' (60) 44 297
'>' (62) 45 174 175 281 282 298
'?' (63) 75 77 89 91 147 148 149 150 156 157 158 163 164 165 194 195
    197 198 200 201 202 257 258
'@' (64) 38 205 309
'^' (94) 43 291
'_' (95) 138 140
'{' (123) 155 156 157 158 352 354 355 357
'|' (124) 32 33 42 52 53 56 57 79 101 111 118 138 141 160 228 288 338
    339 340 349 351 373
'}' (125) 155 156 157 158 352 354 355 357
'~' (126) 33 73 74 225 314 365 366
error (256)
DIGITS (258)
NAME (259) 29 48 49 62 64 65 66 84 138 142 145 168 174 175 202 209
    225 259 321 332 380 383 396 399 405 408 413 416
PLUS (260)
MINUS (261)
MUL (262)
DIVIDE (263)
NUM (264)
STRING (265) 342
INTEGER (266) 127 128 133 135 337
SPECIAL (267)
NL (268)
SPACE (269)
KEYWORD (270)
SPECIAL_START (271)
SPECIAL_END (272)
IF (273) 67 68 92 230 365 366
ELSE (274) 71 230
WHILE (275) 72
SEP (276)
END (277)
OR (278) 261
AND (279) 264
NOT (280) 267 283 285
IN (281) 73 74 283 284 365 366
NOTIN (282)
T (283)
F (284)
COLON (285)
SQUAREBRACKET_START (286) 1 7 29 31 32 51 59 62 64 68 70 72 73 74 76
    78 82 84 147 169 170 174 175 179 180 181 182 189 190 209 214 220
    233 236 237 238 239 246 247 323 324 328 329 344 346 347 355 358
    369 371 373 387 388 390 397 401 402 409 410 411 414 417 419 422
SQUAREBRACKET_END (287) 1 7 29 31 32 51 59 62 64 68 70 72 73 74 76
    78 82 84 147 169 170 174 175 179 180 181 182 189 190 209 214 220
    233 237 238 239 246 247 323 324 328 329 344 346 347 355 358 369
    371 387 388 390 397 401 402 409 410 411 414 417 419
MOD (288)
EQUAL (289) 29 31 32 35 36 37 38 39 40 41 42 43 44 45 46 47 139 141
    168 204 225 227 280 281 351 373 380 383
PLUSEQUAL (290)
PRINT (291)
COMMENT (292)
RANGE (293)
SINGLEQUOTE (294)
DOUBLEQUOTE (295)
EXPONENTIAL (296)
COMMA (297)
INDENT (298) 87 176 211
LIST (299)
DIVIDEEQUAL (300)
MINUSEQUAL (301)
MULEQUAL (302)
LESSTHAN (303)
LESSTHANEQUAL (304)
GREATERTHAN (305)
GREATERTHANEQUAL (306)
DOUBLEEQUAL (307) 279
NOTEQUAL (308)
GLOBAL (309) 48
YIELD (310) 368 369
IMPORT (311) 54 56 57
RETURN (312) 169
AS (313) 62 64 79 84 99
TYPE_COMMENT (314) 32 73 74 76 78 176 177 194 195 197 198 200 201
FOR (315) 73 74 365 366
DEL (316) 52
NONLOCAL (317) 49
ELIF (318) 69 70
NEWLINE (319) 6 7 52 87 176 205 211
TRUE (320) 115 122 333
NONE (321) 114 121 335
CLASS (322) 209
DEDENT (323) 87 211
FINALLY (324) 86
WITH (325) 75 76 77 78
EXPECT (326) 84 85
IS (327) 285 286
MATCH (328) 87
CONTINUE (329) 17
RAISE (330) 170 171
FROM (331) 56 57 170 368
PASS (332) 13
LAMBDA (333) 233
DEF (334) 5 174 175
FALSE (335) 116 123 334
CASE (336) 91
ASSERT (337) 51
AWAIT (338) 318
BREAK (339) 16
ASYNC (340) 74 77 78 175 365
TRY (341) 81 82


Nonterminals, with rules where they appear

$accept (110)
    on left: 0
file (111)
    on left: 1, on right: 0
statements (112)
    on left: 2, on right: 1 211
statement (113)
    on left: 3 4, on right: 2
simple_stmts (114)
    on left: 5 6 7, on right: 4 212
simple_stmt (115)
    on left: 8 9 10 11 12 13 14 15 16 17 18 19 20, on right: 6 7
compound_stmt (116)
    on left: 21 22 23 24 25 26 27 28, on right: 3
assignment (117)
    on left: 29 30 31 32 33, on right: 8
augassign (118)
    on left: 34 35 36 37 38 39 40 41 42 43 44 45 46 47,
    on right: 33
global_stmt (119)
    on left: 48, on right: 19
nonlocal_stmt (120)
    on left: 49, on right: 20
yield_stmt (121)
    on left: 50, on right: 15
assert_stmt (122)
    on left: 51, on right: 18
del_stmt (123)
    on left: 52, on right: 14
import_stmt (124)
    on left: 53, on right: 11
import_name (125)
    on left: 54, on right: 53
import_from (126)
    on left: 55 56 57, on right: 53
import_from_targets (127)
    on left: 58 59 60 61, on right: 56 57
import_from_as_names (128)
    on left: 62, on right: 59 60
dotted_as_names (129)
    on left: 63, on right: 54
dotted_as_name (130)
    on left: 64, on right: 63
dotted_name (131)
    on left: 65 66, on right: 56 64 65
if_stmt (132)
    on left: 67 68, on right: 22
elif_stmt (133)
    on left: 69 70, on right: 67 69
else_block (134)
    on left: 71, on right: 68 70 72 73 74 82
while_stmt (135)
    on left: 72, on right: 27
for_stmt (136)
    on left: 73 74, on right: 25
with_stmt (137)
    on left: 75 76 77 78, on right: 24
with_item (138)
    on left: 79 80, on right: 75 76 77 78
try_stmt (139)
    on left: 81 82, on right: 26
except_block (140)
    on left: 83 84 85, on right: 82
finally_block (141)
    on left: 86, on right: 81 82
match_stmt (142)
    on left: 87, on right: 28
subject_expr (143)
    on left: 88 89 90, on right: 87
case_block (144)
    on left: 91, on right: 87
guard (145)
    on left: 92, on right: 91
patterns (146)
    on left: 93 94 95, on right: 91
pattern (147)
    on left: 96 97 98, on right: 95 146 152 160 166 168
as_pattern (148)
    on left: 99, on right: 97
or_pattern (149)
    on left: 100 101, on right: 98 99
closed_pattern (150)
    on left: 102 103 104 105 106 107 108 109 110, on right: 101
literal_pattern (151)
    on left: 111 112 113 114 115 116, on right: 103
literal_expr (152)
    on left: 117 118 119 120 121 122 123, on right: 160
complex_number (153)
    on left: 124 125, on right: 112 119
signed_number (154)
    on left: 126 127 128, on right: 111 118
signed_real_number (155)
    on left: 129 130 131, on right: 124 125
real_number (156)
    on left: 132 133, on right: 130 131
imaginary_number (157)
    on left: 134 135, on right: 124 125
capture_pattern (158)
    on left: 136, on right: 104
pattern_capture_target (159)
    on left: 137 138 139, on right: 99 136 153 161
wildcard_pattern (160)
    on left: 140, on right: 105 154
value_pattern (161)
    on left: 141, on right: 106
attr (162)
    on left: 142, on right: 141 144 160
name_or_attr (163)
    on left: 143 144 145, on right: 142 162 163 164 165
group_pattern (164)
    on left: 146, on right: 107
sequence_pattern (165)
    on left: 147 148, on right: 108
open_sequence_pattern (166)
    on left: 149, on right: 94 148
maybe_sequence_pattern (167)
    on left: 150, on right: 147 149
maybe_star_pattern (168)
    on left: 151 152, on right: 149 150
star_pattern (169)
    on left: 153 154, on right: 151
mapping_pattern (170)
    on left: 155 156 157 158, on right: 109
items_pattern (171)
    on left: 159, on right: 157 158
key_value_pattern (172)
    on left: 160, on right: 159
double_star_pattern (173)
    on left: 161, on right: 156 157
class_pattern (174)
    on left: 162 163 164 165, on right: 110
positional_patterns (175)
    on left: 166, on right: 163 165
keyword_patterns (176)
    on left: 167, on right: 164 165
keyword_pattern (177)
    on left: 168, on right: 167
return_stmt (178)
    on left: 169, on right: 10
raise_stmt (179)
    on left: 170 171, on right: 12
function_def (180)
    on left: 172 173, on right: 21
function_def_raw (181)
    on left: 174 175, on right: 172 173
func_type_comment (182)
    on left: 176 177, on right: 174 175
params (183)
    on left: 178, on right: 174 175
parameters (184)
    on left: 179 180 181 182 183, on right: 178
slash_no_default (185)
    on left: 184 185, on right: 179
slash_with_default (186)
    on left: 186 187, on right: 180
star_etc (187)
    on left: 188 189 190 191, on right: 179 180 181 182 183
kwds (188)
    on left: 192, on right: 189 190 191
param_no_default (189)
    on left: 193 194 195, on right: 179 181 184 185 186 187 189 192
param_with_default (190)
    on left: 196 197 198, on right: 179 180 181 182 186 187
param_maybe_default (191)
    on left: 199 200 201, on right: 189 190
param (192)
    on left: 202, on right: 194 195 197 198 200 201
annotation (193)
    on left: 203, on right: 202
default (194)
    on left: 204, on right: 197 198 200 201 254 255 257 258
decorators (195)
    on left: 205, on right: 172 206
class_def (196)
    on left: 206 207, on right: 23
class_def_raw (197)
    on left: 208 209, on right: 206 207
block (198)
    on left: 210 211 212, on right: 67 68 69 70 71 72 73 74 75 76 77
    78 81 82 84 85 86 91 174 175 209
star_expressions (199)
    on left: 213 214 215 216, on right: 9 32 33 73 74 228 369
star_expression (200)
    on left: 217 218 219, on right: 214 215 216
star_named_expressions (201)
    on left: 220, on right: 89 344 347 352
star_named_expression (202)
    on left: 221 222 223, on right: 89 220 347
assigment_expression (203)
    on left: 224 225, on right: 226 351 373
named_expression (204)
    on left: 226 227, on right: 67 68 69 70 72 90 92 205 223 330 346
    349 354
annotated_rhs (205)
    on left: 228, on right: 29 31
expression (206)
    on left: 229 230 231 232, on right: 29 31 51 79 80 84 170 174 175
    203 204 219 225 227 230 233 329 351 361 368 373 379 380 383 384
    410
lambdef (207)
    on left: 233, on right: 232
lambda_params (208)
    on left: 234, on right: 233
lambda_parameters (209)
    on left: 235 236 237 238 239 240, on right: 234
lambda_slash_no_default (210)
    on left: 241 242, on right: 236
lambda_slash_with_default (211)
    on left: 243 244, on right: 237
lambda_star_etc (212)
    on left: 245 246 247 248, on right: 237 238 239 240
lambda_kwds (213)
    on left: 249, on right: 246 247 248
lambda_param_no_default (214)
    on left: 250 251 252, on right: 236 238 241 242 243 244 246 249
lambda_param_with_default (215)
    on left: 253 254 255, on right: 236 237 238 239 243 244
lambda_param_maybe_default (216)
    on left: 256 257 258, on right: 246 247
lambda_param (217)
    on left: 259, on right: 251 252 254 255 257 258
disjunction (218)
    on left: 260 261 262, on right: 230 231 365 366
conjunction (219)
    on left: 263 264 265, on right: 261 262
inversion (220)
    on left: 266 267 268, on right: 264 265 267
comparison (221)
    on left: 269 270, on right: 268
compare_op_bitwise_or_pair (222)
    on left: 271 272 273 274 275 276 277 278, on right: 269
eq_bitwise_or (223)
    on left: 279, on right: 271
noteq_bitwise_or (224)
    on left: 280, on right: 272
gte_bitwise_or (225)
    on left: 281, on right: 273
gt_bitwise_or (226)
    on left: 282, on right: 274
notin_bitwise_or (227)
    on left: 283, on right: 275
in_bitwise_or (228)
    on left: 284, on right: 276
isnot_bitwise_or (229)
    on left: 285, on right: 277
is_bitwise_or (230)
    on left: 286, on right: 278
bitwise_or (231)
    on left: 287 288 289, on right: 218 222 269 270 279 280 281 282
    283 284 285 286 288 359
bitwise_xor (232)
    on left: 290 291 292, on right: 288 289 291
bitwise_and (233)
    on left: 293 294 295, on right: 291 292 294
shift_expr (234)
    on left: 296 297 298 299, on right: 294 295 297 298
sum (235)
    on left: 300 301 302 303, on right: 297 298 299 301 302
term (236)
    on left: 304 305 306 307 308 309 310, on right: 301 302 303 305
    306 307 308 309
factor (237)
    on left: 311 312 313 314 315, on right: 305 306 307 308 309 310
    312 313 314 316
power (238)
    on left: 316 317, on right: 315
await_primary (239)
    on left: 318 319, on right: 316 317
primary (240)
    on left: 320 321 322 323 324 325, on right: 318 319 321 322 323
    324
slices (241)
    on left: 326 327 328, on right: 324 397 409 414 417
slice (242)
    on left: 329 330, on right: 327 328
atom (243)
    on left: 331 332 333 334 335 336 337 338 339 340 341,
    on right: 325 420
strings (244)
    on left: 342, on right: 113 120 336
list (245)
    on left: 343 344, on right: 339
listcomp (246)
    on left: 345 346, on right: 339
tuple (247)
    on left: 347, on right: 338
group (248)
    on left: 348 349, on right: 338
genexp (249)
    on left: 350 351, on right: 322 338 418
set (250)
    on left: 352, on right: 340
setcomp (251)
    on left: 353 354, on right: 340
dict (252)
    on left: 355, on right: 340
dictcomp (253)
    on left: 356 357, on right: 340
double_starred_kvpairs (254)
    on left: 358, on right: 355
double_starred_kvpair (255)
    on left: 359 360, on right: 358
kvpair (256)
    on left: 361, on right: 357 360
for_if_clauses (257)
    on left: 362 363, on right: 346 351 354 357
for_if_clause (258)
    on left: 364 365 366, on right: 363
yield_expr (259)
    on left: 367 368 369, on right: 32 33 50 228 349
arguments (260)
    on left: 370 371, on right: 209 323 419
args (261)
    on left: 372 373 374, on right: 371
kwargs (262)
    on left: 375 376 377, on right: 374
starred_expression (263)
    on left: 378 379, on right: 373 381
kwarg_or_starred (264)
    on left: 380 381, on right: 375 376
kwarg_or_double_starred (265)
    on left: 382 383 384, on right: 375 377
star_targets (266)
    on left: 385 386 387, on right: 32 73 74 365 366
star_targets_list_seq (267)
    on left: 388, on right: 402
star_targets_tuple_seq (268)
    on left: 389 390 391, on right: 401
star_target (269)
    on left: 392 393 394, on right: 79 386 387 388 390 391 393
target_with_star_atom (270)
    on left: 395 396 397 398, on right: 394 400
star_atom (271)
    on left: 399 400 401 402, on right: 398
single_target (272)
    on left: 403 404 405 406, on right: 30 33 406
single_subscript_attribute_target (273)
    on left: 407 408 409, on right: 31 404
expression_list (274)
    on left: 410, on right: 169
del_targets (275)
    on left: 411, on right: 52
del_target (276)
    on left: 412 413 414, on right: 411
t_primary (277)
    on left: 415 416 417 418 419 420, on right: 396 397 408 409 413
    414 416 417 418 419
t_lookahead (278)
    on left: 421 422 423, on right: 396 397 408 409 413 414 416 417
    418 419 420


state 0

    0 $accept: . file $end

    SQUAREBRACKET_START  shift, and go to state 1

    file  go to state 2


state 1

    1 file: SQUAREBRACKET_START . statements SQUAREBRACKET_END

    NAME      shift, and go to state 3
    STRING    shift, and go to state 4
    INTEGER   shift, and go to state 5
    IF        shift, and go to state 6
    WHILE     shift, and go to state 7
    NOT       shift, and go to state 8
    GLOBAL    shift, and go to state 9
    YIELD     shift, and go to state 10
    IMPORT    shift, and go to state 11
    RETURN    shift, and go to state 12
    FOR       shift, and go to state 13
    DEL       shift, and go to state 14
    NONLOCAL  shift, and go to state 15
    TRUE      shift, and go to state 16
    NONE      shift, and go to state 17
    CLASS     shift, and go to state 18
    WITH      shift, and go to state 19
    MATCH     shift, and go to state 20
    CONTINUE  shift, and go to state 21
    RAISE     shift, and go to state 22
    PASS      shift, and go to state 23
    LAMBDA    shift, and go to state 24
    DEF       shift, and go to state 25
    FALSE     shift, and go to state 26
    ASSERT    shift, and go to state 27
    AWAIT     shift, and go to state 28
    BREAK     shift, and go to state 29
    ASYNC     shift, and go to state 30
    TRY       shift, and go to state 31
    '.'       shift, and go to state 32
    '*'       shift, and go to state 33
    '+'       shift, and go to state 34
    ';'       shift, and go to state 35
    '('       shift, and go to state 36
    '~'       shift, and go to state 37
    '-'       shift, and go to state 38

    IF                   [reduce using rule 260 (disjunction)]
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 415 (t_primary)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 403 (single_target)]
    '*'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '+'                  [reduce using rule 208 (class_def_raw)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 403 (single_target)]
    '+'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '!'                  reduce using rule 213 (star_expressions)
    '!'                  [reduce using rule 217 (star_expression)]
    '!'                  [reduce using rule 229 (expression)]
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '!'                  [reduce using rule 367 (yield_expr)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 407 (single_subscript_attribute_target)
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '|'                  [reduce using rule 403 (single_target)]
    '|'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '~'                  [reduce using rule 403 (single_target)]
    '~'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 403 (single_target)]
    '-'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '@'                  [reduce using rule 403 (single_target)]
    '@'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '/'                  [reduce using rule 403 (single_target)]
    '/'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '%'                  [reduce using rule 403 (single_target)]
    '%'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '&'                  [reduce using rule 403 (single_target)]
    '&'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  [reduce using rule 415 (t_primary)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '^'                  [reduce using rule 403 (single_target)]
    '^'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '<'                  [reduce using rule 403 (single_target)]
    '<'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '>'                  [reduce using rule 403 (single_target)]
    '>'                  [reduce using rule 407 (single_subscript_attribute_target)]
    $default             reduce using rule 287 (bitwise_or)

    statements                         go to state 39
    statement                          go to state 40
    simple_stmts                       go to state 41
    simple_stmt                        go to state 42
    compound_stmt                      go to state 43
    assignment                         go to state 44
    global_stmt                        go to state 45
    nonlocal_stmt                      go to state 46
    yield_stmt                         go to state 47
    assert_stmt                        go to state 48
    del_stmt                           go to state 49
    import_stmt                        go to state 50
    import_name                        go to state 51
    if_stmt                            go to state 52
    while_stmt                         go to state 53
    for_stmt                           go to state 54
    with_stmt                          go to state 55
    try_stmt                           go to state 56
    match_stmt                         go to state 57
    return_stmt                        go to state 58
    raise_stmt                         go to state 59
    function_def                       go to state 60
    function_def_raw                   go to state 61
    decorators                         go to state 62
    class_def                          go to state 63
    class_def_raw                      go to state 64
    star_expressions                   go to state 65
    star_expression                    go to state 66
    expression                         go to state 67
    lambdef                            go to state 68
    disjunction                        go to state 69
    conjunction                        go to state 70
    inversion                          go to state 71
    comparison                         go to state 72
    bitwise_or                         go to state 73
    bitwise_xor                        go to state 74
    bitwise_and                        go to state 75
    shift_expr                         go to state 76
    sum                                go to state 77
    term                               go to state 78
    factor                             go to state 79
    power                              go to state 80
    await_primary                      go to state 81
    primary                            go to state 82
    atom                               go to state 83
    strings                            go to state 84
    yield_expr                         go to state 85
    single_target                      go to state 86
    single_subscript_attribute_target  go to state 87
    t_primary                          go to state 88


state 2

    0 $accept: file . $end

    $end  shift, and go to state 89


state 3

   29 assignment: NAME . ':' expression SQUAREBRACKET_START EQUAL annotated_rhs SQUAREBRACKET_END
  332 atom: NAME .
  405 single_target: NAME .

    ':'  shift, and go to state 90

    '*'       reduce using rule 332 (atom)
    '*'       [reduce using rule 405 (single_target)]
    '+'       reduce using rule 332 (atom)
    '+'       [reduce using rule 405 (single_target)]
    '|'       reduce using rule 332 (atom)
    '|'       [reduce using rule 405 (single_target)]
    '~'       reduce using rule 405 (single_target)
    '-'       reduce using rule 332 (atom)
    '-'       [reduce using rule 405 (single_target)]
    '@'       reduce using rule 332 (atom)
    '@'       [reduce using rule 405 (single_target)]
    '/'       reduce using rule 332 (atom)
    '/'       [reduce using rule 405 (single_target)]
    '%'       reduce using rule 332 (atom)
    '%'       [reduce using rule 405 (single_target)]
    '&'       reduce using rule 332 (atom)
    '&'       [reduce using rule 405 (single_target)]
    '^'       reduce using rule 332 (atom)
    '^'       [reduce using rule 405 (single_target)]
    '<'       reduce using rule 332 (atom)
    '<'       [reduce using rule 405 (single_target)]
    '>'       reduce using rule 332 (atom)
    '>'       [reduce using rule 405 (single_target)]
    $default  reduce using rule 332 (atom)


state 4

  342 strings: STRING . '+'

    '+'  shift, and go to state 91


state 5

  337 atom: INTEGER .

    $default  reduce using rule 337 (atom)


state 6

   67 if_stmt: IF . named_expression ':' block elif_stmt
   68        | IF . named_expression ':' block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    NAME     shift, and go to state 92
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 229 (expression)
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 224 (assigment_expression)
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    assigment_expression  go to state 94
    named_expression      go to state 95
    expression            go to state 96
    lambdef               go to state 68
    disjunction           go to state 69
    conjunction           go to state 70
    inversion             go to state 71
    comparison            go to state 72
    bitwise_or            go to state 73
    bitwise_xor           go to state 74
    bitwise_and           go to state 75
    shift_expr            go to state 76
    sum                   go to state 77
    term                  go to state 78
    factor                go to state 79
    power                 go to state 80
    await_primary         go to state 81
    primary               go to state 82
    atom                  go to state 97
    strings               go to state 84


state 7

   72 while_stmt: WHILE . named_expression ':' block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    NAME     shift, and go to state 92
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 229 (expression)
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 224 (assigment_expression)
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    assigment_expression  go to state 94
    named_expression      go to state 98
    expression            go to state 96
    lambdef               go to state 68
    disjunction           go to state 69
    conjunction           go to state 70
    inversion             go to state 71
    comparison            go to state 72
    bitwise_or            go to state 73
    bitwise_xor           go to state 74
    bitwise_and           go to state 75
    shift_expr            go to state 76
    sum                   go to state 77
    term                  go to state 78
    factor                go to state 79
    power                 go to state 80
    await_primary         go to state 81
    primary               go to state 82
    atom                  go to state 97
    strings               go to state 84


state 8

  267 inversion: NOT . inversion

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 266 (inversion)
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    ELSE                 reduce using rule 266 (inversion)
    ELSE                 [reduce using rule 287 (bitwise_or)]
    ELSE                 [reduce using rule 290 (bitwise_xor)]
    ELSE                 [reduce using rule 293 (bitwise_and)]
    ELSE                 [reduce using rule 296 (shift_expr)]
    ELSE                 [reduce using rule 300 (sum)]
    ELSE                 [reduce using rule 304 (term)]
    ELSE                 [reduce using rule 311 (factor)]
    ELSE                 [reduce using rule 320 (primary)]
    ELSE                 [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 266 (inversion)
    SQUAREBRACKET_START  [reduce using rule 287 (bitwise_or)]
    SQUAREBRACKET_START  [reduce using rule 290 (bitwise_xor)]
    SQUAREBRACKET_START  [reduce using rule 293 (bitwise_and)]
    SQUAREBRACKET_START  [reduce using rule 296 (shift_expr)]
    SQUAREBRACKET_START  [reduce using rule 300 (sum)]
    SQUAREBRACKET_START  [reduce using rule 304 (term)]
    SQUAREBRACKET_START  [reduce using rule 311 (factor)]
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 266 (inversion)
    SQUAREBRACKET_END    [reduce using rule 287 (bitwise_or)]
    SQUAREBRACKET_END    [reduce using rule 290 (bitwise_xor)]
    SQUAREBRACKET_END    [reduce using rule 293 (bitwise_and)]
    SQUAREBRACKET_END    [reduce using rule 296 (shift_expr)]
    SQUAREBRACKET_END    [reduce using rule 300 (sum)]
    SQUAREBRACKET_END    [reduce using rule 304 (term)]
    SQUAREBRACKET_END    [reduce using rule 311 (factor)]
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    AS                   reduce using rule 266 (inversion)
    AS                   [reduce using rule 287 (bitwise_or)]
    AS                   [reduce using rule 290 (bitwise_xor)]
    AS                   [reduce using rule 293 (bitwise_and)]
    AS                   [reduce using rule 296 (shift_expr)]
    AS                   [reduce using rule 300 (sum)]
    AS                   [reduce using rule 304 (term)]
    AS                   [reduce using rule 311 (factor)]
    AS                   [reduce using rule 320 (primary)]
    AS                   [reduce using rule 331 (atom)]
    TYPE_COMMENT         reduce using rule 266 (inversion)
    TYPE_COMMENT         [reduce using rule 287 (bitwise_or)]
    TYPE_COMMENT         [reduce using rule 290 (bitwise_xor)]
    TYPE_COMMENT         [reduce using rule 293 (bitwise_and)]
    TYPE_COMMENT         [reduce using rule 296 (shift_expr)]
    TYPE_COMMENT         [reduce using rule 300 (sum)]
    TYPE_COMMENT         [reduce using rule 304 (term)]
    TYPE_COMMENT         [reduce using rule 311 (factor)]
    TYPE_COMMENT         [reduce using rule 320 (primary)]
    TYPE_COMMENT         [reduce using rule 331 (atom)]
    FOR                  reduce using rule 266 (inversion)
    FOR                  [reduce using rule 287 (bitwise_or)]
    FOR                  [reduce using rule 290 (bitwise_xor)]
    FOR                  [reduce using rule 293 (bitwise_and)]
    FOR                  [reduce using rule 296 (shift_expr)]
    FOR                  [reduce using rule 300 (sum)]
    FOR                  [reduce using rule 304 (term)]
    FOR                  [reduce using rule 311 (factor)]
    FOR                  [reduce using rule 320 (primary)]
    FOR                  [reduce using rule 331 (atom)]
    NEWLINE              reduce using rule 266 (inversion)
    NEWLINE              [reduce using rule 287 (bitwise_or)]
    NEWLINE              [reduce using rule 290 (bitwise_xor)]
    NEWLINE              [reduce using rule 293 (bitwise_and)]
    NEWLINE              [reduce using rule 296 (shift_expr)]
    NEWLINE              [reduce using rule 300 (sum)]
    NEWLINE              [reduce using rule 304 (term)]
    NEWLINE              [reduce using rule 311 (factor)]
    NEWLINE              [reduce using rule 320 (primary)]
    NEWLINE              [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ASYNC                reduce using rule 266 (inversion)
    ASYNC                [reduce using rule 287 (bitwise_or)]
    ASYNC                [reduce using rule 290 (bitwise_xor)]
    ASYNC                [reduce using rule 293 (bitwise_and)]
    ASYNC                [reduce using rule 296 (shift_expr)]
    ASYNC                [reduce using rule 300 (sum)]
    ASYNC                [reduce using rule 304 (term)]
    ASYNC                [reduce using rule 311 (factor)]
    ASYNC                [reduce using rule 320 (primary)]
    ASYNC                [reduce using rule 331 (atom)]
    ','                  reduce using rule 266 (inversion)
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 266 (inversion)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 266 (inversion)
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 266 (inversion)
    ':'                  [reduce using rule 287 (bitwise_or)]
    ':'                  [reduce using rule 290 (bitwise_xor)]
    ':'                  [reduce using rule 293 (bitwise_and)]
    ':'                  [reduce using rule 296 (shift_expr)]
    ':'                  [reduce using rule 300 (sum)]
    ':'                  [reduce using rule 304 (term)]
    ':'                  [reduce using rule 311 (factor)]
    ':'                  [reduce using rule 320 (primary)]
    ':'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 266 (inversion)
    ')'                  [reduce using rule 287 (bitwise_or)]
    ')'                  [reduce using rule 290 (bitwise_xor)]
    ')'                  [reduce using rule 293 (bitwise_and)]
    ')'                  [reduce using rule 296 (shift_expr)]
    ')'                  [reduce using rule 300 (sum)]
    ')'                  [reduce using rule 304 (term)]
    ')'                  [reduce using rule 311 (factor)]
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 266 (inversion)
    '|'                  [reduce using rule 287 (bitwise_or)]
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 266 (inversion)
    '&'                  [reduce using rule 287 (bitwise_or)]
    '&'                  [reduce using rule 290 (bitwise_xor)]
    '&'                  [reduce using rule 293 (bitwise_and)]
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '?'                  reduce using rule 266 (inversion)
    '?'                  [reduce using rule 287 (bitwise_or)]
    '?'                  [reduce using rule 290 (bitwise_xor)]
    '?'                  [reduce using rule 293 (bitwise_and)]
    '?'                  [reduce using rule 296 (shift_expr)]
    '?'                  [reduce using rule 300 (sum)]
    '?'                  [reduce using rule 304 (term)]
    '?'                  [reduce using rule 311 (factor)]
    '?'                  [reduce using rule 320 (primary)]
    '?'                  [reduce using rule 331 (atom)]
    '}'                  reduce using rule 266 (inversion)
    '}'                  [reduce using rule 287 (bitwise_or)]
    '}'                  [reduce using rule 290 (bitwise_xor)]
    '}'                  [reduce using rule 293 (bitwise_and)]
    '}'                  [reduce using rule 296 (shift_expr)]
    '}'                  [reduce using rule 300 (sum)]
    '}'                  [reduce using rule 304 (term)]
    '}'                  [reduce using rule 311 (factor)]
    '}'                  [reduce using rule 320 (primary)]
    '}'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 266 (inversion)

    inversion      go to state 100
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 9

   48 global_stmt: GLOBAL . ',' '.' NAME '+'

    ','  shift, and go to state 101


state 10

  368 yield_expr: YIELD . FROM expression
  369           | YIELD . SQUAREBRACKET_START star_expressions SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 102
    FROM                 shift, and go to state 103


state 11

   54 import_name: IMPORT . dotted_as_names

    ','  shift, and go to state 104

    dotted_as_names  go to state 105


state 12

  169 return_stmt: RETURN . SQUAREBRACKET_START expression_list SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 106


state 13

   73 for_stmt: FOR . star_targets IN '~' star_expressions ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    NAME                 shift, and go to state 107
    STRING               shift, and go to state 4
    INTEGER              shift, and go to state 5
    SQUAREBRACKET_START  shift, and go to state 108
    TRUE                 shift, and go to state 16
    NONE                 shift, and go to state 17
    FALSE                shift, and go to state 26
    '.'                  shift, and go to state 32
    '*'                  shift, and go to state 109
    '('                  shift, and go to state 110

    IN                   reduce using rule 385 (star_targets)
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    '.'                  [reduce using rule 415 (t_primary)]
    '!'                  reduce using rule 392 (star_target)
    '!'                  [reduce using rule 395 (target_with_star_atom)]
    '('                  [reduce using rule 392 (star_target)]
    '('                  [reduce using rule 395 (target_with_star_atom)]
    '('                  [reduce using rule 415 (t_primary)]
    '&'                  reduce using rule 331 (atom)
    '&'                  [reduce using rule 415 (t_primary)]
    $default             reduce using rule 331 (atom)

    atom                   go to state 111
    strings                go to state 84
    star_targets           go to state 112
    star_target            go to state 113
    target_with_star_atom  go to state 114
    star_atom              go to state 115
    t_primary              go to state 116


state 14

   52 del_stmt: DEL . del_targets '&' '(' ';' '|' NEWLINE ')'

    ','  shift, and go to state 117

    del_targets  go to state 118


state 15

   49 nonlocal_stmt: NONLOCAL . ',' '.' NAME '+'

    ','  shift, and go to state 119


state 16

  333 atom: TRUE .

    $default  reduce using rule 333 (atom)


state 17

  335 atom: NONE .

    $default  reduce using rule 335 (atom)


state 18

  209 class_def_raw: CLASS . NAME SQUAREBRACKET_START '(' SQUAREBRACKET_START arguments SQUAREBRACKET_END ')' SQUAREBRACKET_END ':' block

    NAME  shift, and go to state 120


state 19

   75 with_stmt: WITH . '(' ',' '.' with_item '+' ',' '?' ')' ':' block
   76          | WITH . ',' '.' with_item '+' ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block

    ','  shift, and go to state 121
    '('  shift, and go to state 122


state 20

   87 match_stmt: MATCH . subject_expr ':' NEWLINE INDENT case_block '+' DEDENT

    NAME     shift, and go to state 92
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '*'      shift, and go to state 123
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 221 (star_named_expression)
    ','                  [reduce using rule 224 (assigment_expression)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 229 (expression)
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 88 (subject_expr)
    ':'                  [reduce using rule 224 (assigment_expression)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    subject_expr           go to state 124
    star_named_expression  go to state 125
    assigment_expression   go to state 94
    named_expression       go to state 126
    expression             go to state 96
    lambdef                go to state 68
    disjunction            go to state 69
    conjunction            go to state 70
    inversion              go to state 71
    comparison             go to state 72
    bitwise_or             go to state 73
    bitwise_xor            go to state 74
    bitwise_and            go to state 75
    shift_expr             go to state 76
    sum                    go to state 77
    term                   go to state 78
    factor                 go to state 79
    power                  go to state 80
    await_primary          go to state 81
    primary                go to state 82
    atom                   go to state 97
    strings                go to state 84


state 21

   17 simple_stmt: CONTINUE .

    $default  reduce using rule 17 (simple_stmt)


state 22

  170 raise_stmt: RAISE . expression SQUAREBRACKET_START FROM expression SQUAREBRACKET_END
  171           | RAISE .

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 229 (expression)
    SQUAREBRACKET_START  [reduce using rule 260 (disjunction)]
    SQUAREBRACKET_START  [reduce using rule 263 (conjunction)]
    SQUAREBRACKET_START  [reduce using rule 266 (inversion)]
    SQUAREBRACKET_START  [reduce using rule 287 (bitwise_or)]
    SQUAREBRACKET_START  [reduce using rule 290 (bitwise_xor)]
    SQUAREBRACKET_START  [reduce using rule 293 (bitwise_and)]
    SQUAREBRACKET_START  [reduce using rule 296 (shift_expr)]
    SQUAREBRACKET_START  [reduce using rule 300 (sum)]
    SQUAREBRACKET_START  [reduce using rule 304 (term)]
    SQUAREBRACKET_START  [reduce using rule 311 (factor)]
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 171 (raise_stmt)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 171 (raise_stmt)
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression     go to state 127
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 23

   13 simple_stmt: PASS .

    $default  reduce using rule 13 (simple_stmt)


state 24

  233 lambdef: LAMBDA . SQUAREBRACKET_START lambda_params SQUAREBRACKET_END ':' expression

    SQUAREBRACKET_START  shift, and go to state 128


state 25

    5 simple_stmts: DEF .
  174 function_def_raw: DEF . NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    NAME  shift, and go to state 129

    $default  reduce using rule 5 (simple_stmts)


state 26

  334 atom: FALSE .

    $default  reduce using rule 334 (atom)


state 27

   51 assert_stmt: ASSERT . expression SQUAREBRACKET_START ',' expression SQUAREBRACKET_END

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 229 (expression)
    SQUAREBRACKET_START  [reduce using rule 260 (disjunction)]
    SQUAREBRACKET_START  [reduce using rule 263 (conjunction)]
    SQUAREBRACKET_START  [reduce using rule 266 (inversion)]
    SQUAREBRACKET_START  [reduce using rule 287 (bitwise_or)]
    SQUAREBRACKET_START  [reduce using rule 290 (bitwise_xor)]
    SQUAREBRACKET_START  [reduce using rule 293 (bitwise_and)]
    SQUAREBRACKET_START  [reduce using rule 296 (shift_expr)]
    SQUAREBRACKET_START  [reduce using rule 300 (sum)]
    SQUAREBRACKET_START  [reduce using rule 304 (term)]
    SQUAREBRACKET_START  [reduce using rule 311 (factor)]
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression     go to state 130
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 28

  318 await_primary: AWAIT . primary

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    '.'      shift, and go to state 32
    '('      shift, and go to state 93

    IF                   reduce using rule 320 (primary)
    IF                   [reduce using rule 331 (atom)]
    ELSE                 reduce using rule 320 (primary)
    ELSE                 [reduce using rule 331 (atom)]
    NOT                  reduce using rule 320 (primary)
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 320 (primary)
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 320 (primary)
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 320 (primary)
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    AS                   reduce using rule 320 (primary)
    AS                   [reduce using rule 331 (atom)]
    TYPE_COMMENT         reduce using rule 320 (primary)
    TYPE_COMMENT         [reduce using rule 331 (atom)]
    FOR                  reduce using rule 320 (primary)
    FOR                  [reduce using rule 331 (atom)]
    NEWLINE              reduce using rule 320 (primary)
    NEWLINE              [reduce using rule 331 (atom)]
    IS                   reduce using rule 320 (primary)
    IS                   [reduce using rule 331 (atom)]
    ASYNC                reduce using rule 320 (primary)
    ASYNC                [reduce using rule 331 (atom)]
    ','                  reduce using rule 320 (primary)
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 320 (primary)
    '*'                  [reduce using rule 331 (atom)]
    '+'                  reduce using rule 320 (primary)
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 320 (primary)
    '!'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 320 (primary)
    ':'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 320 (primary)
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 320 (primary)
    '|'                  [reduce using rule 331 (atom)]
    '-'                  reduce using rule 320 (primary)
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 320 (primary)
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 320 (primary)
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 320 (primary)
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 320 (primary)
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 320 (primary)
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 320 (primary)
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 320 (primary)
    '>'                  [reduce using rule 331 (atom)]
    '?'                  reduce using rule 320 (primary)
    '?'                  [reduce using rule 331 (atom)]
    '}'                  reduce using rule 320 (primary)
    '}'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 320 (primary)

    primary  go to state 131
    atom     go to state 97
    strings  go to state 84


state 29

   16 simple_stmt: BREAK .

    $default  reduce using rule 16 (simple_stmt)


state 30

   74 for_stmt: ASYNC . FOR star_targets IN '~' star_expressions ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block SQUAREBRACKET_START else_block SQUAREBRACKET_END
   77 with_stmt: ASYNC . WITH '(' ',' '.' with_item '+' ',' '?' ')' ':' block
   78          | ASYNC . WITH ',' '.' with_item '+' ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block
  175 function_def_raw: ASYNC . DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    FOR   shift, and go to state 132
    WITH  shift, and go to state 133
    DEF   shift, and go to state 134


state 31

   81 try_stmt: TRY . ':' block finally_block
   82         | TRY . ':' block except_block '+' SQUAREBRACKET_START else_block SQUAREBRACKET_END SQUAREBRACKET_START finally_block SQUAREBRACKET_END

    ':'  shift, and go to state 135


state 32

  341 atom: '.' . '.' '.'

    '.'  shift, and go to state 136


state 33

  218 star_expression: '*' . bitwise_or

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 287 (bitwise_or)
    SQUAREBRACKET_END    [reduce using rule 290 (bitwise_xor)]
    SQUAREBRACKET_END    [reduce using rule 293 (bitwise_and)]
    SQUAREBRACKET_END    [reduce using rule 296 (shift_expr)]
    SQUAREBRACKET_END    [reduce using rule 300 (sum)]
    SQUAREBRACKET_END    [reduce using rule 304 (term)]
    SQUAREBRACKET_END    [reduce using rule 311 (factor)]
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    ','                  reduce using rule 287 (bitwise_or)
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 287 (bitwise_or)
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 287 (bitwise_or)
    ':'                  [reduce using rule 290 (bitwise_xor)]
    ':'                  [reduce using rule 293 (bitwise_and)]
    ':'                  [reduce using rule 296 (shift_expr)]
    ':'                  [reduce using rule 300 (sum)]
    ':'                  [reduce using rule 304 (term)]
    ':'                  [reduce using rule 311 (factor)]
    ':'                  [reduce using rule 320 (primary)]
    ':'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 287 (bitwise_or)
    ')'                  [reduce using rule 290 (bitwise_xor)]
    ')'                  [reduce using rule 293 (bitwise_and)]
    ')'                  [reduce using rule 296 (shift_expr)]
    ')'                  [reduce using rule 300 (sum)]
    ')'                  [reduce using rule 304 (term)]
    ')'                  [reduce using rule 311 (factor)]
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 296 (shift_expr)
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    bitwise_or     go to state 137
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 34

  312 factor: '+' . factor

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 311 (factor)
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    ELSE                 reduce using rule 311 (factor)
    ELSE                 [reduce using rule 320 (primary)]
    ELSE                 [reduce using rule 331 (atom)]
    NOT                  reduce using rule 311 (factor)
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 311 (factor)
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 311 (factor)
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 311 (factor)
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 311 (factor)
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    AS                   reduce using rule 311 (factor)
    AS                   [reduce using rule 320 (primary)]
    AS                   [reduce using rule 331 (atom)]
    TYPE_COMMENT         reduce using rule 311 (factor)
    TYPE_COMMENT         [reduce using rule 320 (primary)]
    TYPE_COMMENT         [reduce using rule 331 (atom)]
    FOR                  reduce using rule 311 (factor)
    FOR                  [reduce using rule 320 (primary)]
    FOR                  [reduce using rule 331 (atom)]
    NEWLINE              reduce using rule 311 (factor)
    NEWLINE              [reduce using rule 320 (primary)]
    NEWLINE              [reduce using rule 331 (atom)]
    IS                   reduce using rule 311 (factor)
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ASYNC                reduce using rule 311 (factor)
    ASYNC                [reduce using rule 320 (primary)]
    ASYNC                [reduce using rule 331 (atom)]
    ','                  reduce using rule 311 (factor)
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 311 (factor)
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 311 (factor)
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 311 (factor)
    ':'                  [reduce using rule 320 (primary)]
    ':'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 311 (factor)
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 311 (factor)
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 311 (factor)
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 311 (factor)
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 311 (factor)
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 311 (factor)
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 311 (factor)
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 311 (factor)
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 311 (factor)
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '?'                  reduce using rule 311 (factor)
    '?'                  [reduce using rule 320 (primary)]
    '?'                  [reduce using rule 331 (atom)]
    '}'                  reduce using rule 311 (factor)
    '}'                  [reduce using rule 320 (primary)]
    '}'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 311 (factor)

    factor         go to state 138
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 35

    7 simple_stmts: ';' . '.' simple_stmt '+' SQUAREBRACKET_START ';' SQUAREBRACKET_END NEWLINE

    '.'  shift, and go to state 139


state 36

   30 assignment: '(' . '(' single_target ')'
   32           | '(' . star_targets EQUAL ')' '+' '(' yield_expr '|' star_expressions ')' '!' EQUAL SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END
  205 decorators: '(' . '@' named_expression NEWLINE ')' '+'
  338 atom: '(' . tuple '|' group '|' genexp ')'
  339     | '(' . list '|' listcomp ')'
  340     | '(' . dict '|' set '|' dictcomp '|' setcomp ')'
  406 single_target: '(' . single_target ')'

    NAME                 shift, and go to state 140
    STRING               shift, and go to state 4
    INTEGER              shift, and go to state 5
    SQUAREBRACKET_START  shift, and go to state 141
    TRUE                 shift, and go to state 16
    NONE                 shift, and go to state 17
    FALSE                shift, and go to state 26
    '.'                  shift, and go to state 32
    '*'                  shift, and go to state 109
    '('                  shift, and go to state 142
    '@'                  shift, and go to state 143
    '{'                  shift, and go to state 144

    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    EQUAL                reduce using rule 385 (star_targets)
    '.'                  [reduce using rule 415 (t_primary)]
    '!'                  reduce using rule 392 (star_target)
    '!'                  [reduce using rule 395 (target_with_star_atom)]
    '('                  [reduce using rule 392 (star_target)]
    '('                  [reduce using rule 395 (target_with_star_atom)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 403 (single_target)
    ')'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '|'                  reduce using rule 343 (list)
    '&'                  reduce using rule 331 (atom)
    '&'                  [reduce using rule 415 (t_primary)]
    $default             reduce using rule 331 (atom)

    atom                               go to state 111
    strings                            go to state 84
    list                               go to state 145
    tuple                              go to state 146
    dict                               go to state 147
    star_targets                       go to state 148
    star_target                        go to state 113
    target_with_star_atom              go to state 114
    star_atom                          go to state 115
    single_target                      go to state 149
    single_subscript_attribute_target  go to state 150
    t_primary                          go to state 151


state 37

  314 factor: '~' . factor

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 311 (factor)
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    ELSE                 reduce using rule 311 (factor)
    ELSE                 [reduce using rule 320 (primary)]
    ELSE                 [reduce using rule 331 (atom)]
    NOT                  reduce using rule 311 (factor)
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 311 (factor)
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 311 (factor)
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 311 (factor)
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 311 (factor)
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    AS                   reduce using rule 311 (factor)
    AS                   [reduce using rule 320 (primary)]
    AS                   [reduce using rule 331 (atom)]
    TYPE_COMMENT         reduce using rule 311 (factor)
    TYPE_COMMENT         [reduce using rule 320 (primary)]
    TYPE_COMMENT         [reduce using rule 331 (atom)]
    FOR                  reduce using rule 311 (factor)
    FOR                  [reduce using rule 320 (primary)]
    FOR                  [reduce using rule 331 (atom)]
    NEWLINE              reduce using rule 311 (factor)
    NEWLINE              [reduce using rule 320 (primary)]
    NEWLINE              [reduce using rule 331 (atom)]
    IS                   reduce using rule 311 (factor)
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ASYNC                reduce using rule 311 (factor)
    ASYNC                [reduce using rule 320 (primary)]
    ASYNC                [reduce using rule 331 (atom)]
    ','                  reduce using rule 311 (factor)
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 311 (factor)
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 311 (factor)
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 311 (factor)
    ':'                  [reduce using rule 320 (primary)]
    ':'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 311 (factor)
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 311 (factor)
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 311 (factor)
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 311 (factor)
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 311 (factor)
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 311 (factor)
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 311 (factor)
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 311 (factor)
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 311 (factor)
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '?'                  reduce using rule 311 (factor)
    '?'                  [reduce using rule 320 (primary)]
    '?'                  [reduce using rule 331 (atom)]
    '}'                  reduce using rule 311 (factor)
    '}'                  [reduce using rule 320 (primary)]
    '}'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 311 (factor)

    factor         go to state 152
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 38

  313 factor: '-' . factor

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 311 (factor)
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    ELSE                 reduce using rule 311 (factor)
    ELSE                 [reduce using rule 320 (primary)]
    ELSE                 [reduce using rule 331 (atom)]
    NOT                  reduce using rule 311 (factor)
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 311 (factor)
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 311 (factor)
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 311 (factor)
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 311 (factor)
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    AS                   reduce using rule 311 (factor)
    AS                   [reduce using rule 320 (primary)]
    AS                   [reduce using rule 331 (atom)]
    TYPE_COMMENT         reduce using rule 311 (factor)
    TYPE_COMMENT         [reduce using rule 320 (primary)]
    TYPE_COMMENT         [reduce using rule 331 (atom)]
    FOR                  reduce using rule 311 (factor)
    FOR                  [reduce using rule 320 (primary)]
    FOR                  [reduce using rule 331 (atom)]
    NEWLINE              reduce using rule 311 (factor)
    NEWLINE              [reduce using rule 320 (primary)]
    NEWLINE              [reduce using rule 331 (atom)]
    IS                   reduce using rule 311 (factor)
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ASYNC                reduce using rule 311 (factor)
    ASYNC                [reduce using rule 320 (primary)]
    ASYNC                [reduce using rule 331 (atom)]
    ','                  reduce using rule 311 (factor)
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 311 (factor)
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 311 (factor)
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 311 (factor)
    ':'                  [reduce using rule 320 (primary)]
    ':'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 311 (factor)
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 311 (factor)
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 311 (factor)
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 311 (factor)
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 311 (factor)
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 311 (factor)
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 311 (factor)
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 311 (factor)
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 311 (factor)
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '?'                  reduce using rule 311 (factor)
    '?'                  [reduce using rule 320 (primary)]
    '?'                  [reduce using rule 331 (atom)]
    '}'                  reduce using rule 311 (factor)
    '}'                  [reduce using rule 320 (primary)]
    '}'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 311 (factor)

    factor         go to state 153
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 39

    1 file: SQUAREBRACKET_START statements . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 154


state 40

    2 statements: statement . '+'

    '+'  shift, and go to state 155


state 41

    4 statement: simple_stmts .

    $default  reduce using rule 4 (statement)


state 42

    6 simple_stmts: simple_stmt . '!' ';' NEWLINE

    '!'  shift, and go to state 156


state 43

    3 statement: compound_stmt .

    $default  reduce using rule 3 (statement)


state 44

    8 simple_stmt: assignment .

    $default  reduce using rule 8 (simple_stmt)


state 45

   19 simple_stmt: global_stmt .

    $default  reduce using rule 19 (simple_stmt)


state 46

   20 simple_stmt: nonlocal_stmt .

    $default  reduce using rule 20 (simple_stmt)


state 47

   15 simple_stmt: yield_stmt .

    $default  reduce using rule 15 (simple_stmt)


state 48

   18 simple_stmt: assert_stmt .

    $default  reduce using rule 18 (simple_stmt)


state 49

   14 simple_stmt: del_stmt .

    $default  reduce using rule 14 (simple_stmt)


state 50

   11 simple_stmt: import_stmt .

    $default  reduce using rule 11 (simple_stmt)


state 51

   53 import_stmt: import_name . '|' import_from

    '|'  shift, and go to state 157


state 52

   22 compound_stmt: if_stmt .

    $default  reduce using rule 22 (compound_stmt)


state 53

   27 compound_stmt: while_stmt .

    $default  reduce using rule 27 (compound_stmt)


state 54

   25 compound_stmt: for_stmt .

    $default  reduce using rule 25 (compound_stmt)


state 55

   24 compound_stmt: with_stmt .

    $default  reduce using rule 24 (compound_stmt)


state 56

   26 compound_stmt: try_stmt .

    $default  reduce using rule 26 (compound_stmt)


state 57

   28 compound_stmt: match_stmt .

    $default  reduce using rule 28 (compound_stmt)


state 58

   10 simple_stmt: return_stmt .

    $default  reduce using rule 10 (simple_stmt)


state 59

   12 simple_stmt: raise_stmt .

    $default  reduce using rule 12 (simple_stmt)


state 60

   21 compound_stmt: function_def .

    $default  reduce using rule 21 (compound_stmt)


state 61

  173 function_def: function_def_raw .

    $default  reduce using rule 173 (function_def)


state 62

  172 function_def: decorators . function_def_raw
  206 class_def: decorators . class_def_raw

    CLASS  shift, and go to state 18
    DEF    shift, and go to state 158
    ASYNC  shift, and go to state 159

    $default  reduce using rule 208 (class_def_raw)

    function_def_raw  go to state 160
    class_def_raw     go to state 161


state 63

   23 compound_stmt: class_def .

    $default  reduce using rule 23 (compound_stmt)


state 64

  207 class_def: class_def_raw .

    $default  reduce using rule 207 (class_def)


state 65

    9 simple_stmt: star_expressions .

    $default  reduce using rule 9 (simple_stmt)


state 66

  214 star_expressions: star_expression . '(' ',' star_expression ')' '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END
  215                 | star_expression . ','
  216                 | star_expression .

    ','  shift, and go to state 162
    '('  shift, and go to state 163

    $default  reduce using rule 216 (star_expressions)


state 67

  219 star_expression: expression .

    $default  reduce using rule 219 (star_expression)


state 68

  232 expression: lambdef .

    $default  reduce using rule 232 (expression)


state 69

  230 expression: disjunction . IF disjunction ELSE expression
  231           | disjunction .

    IF  shift, and go to state 164

    $default  reduce using rule 231 (expression)


state 70

  261 disjunction: conjunction . '(' OR conjunction ')' '+'
  262            | conjunction .

    '('  shift, and go to state 165

    '('       [reduce using rule 262 (disjunction)]
    $default  reduce using rule 262 (disjunction)


state 71

  264 conjunction: inversion . '(' AND inversion ')' '+'
  265            | inversion .

    '('  shift, and go to state 166

    '('       [reduce using rule 265 (conjunction)]
    $default  reduce using rule 265 (conjunction)


state 72

  268 inversion: comparison .

    $default  reduce using rule 268 (inversion)


state 73

  269 comparison: bitwise_or . compare_op_bitwise_or_pair '+'
  270           | bitwise_or .
  288 bitwise_or: bitwise_or . '|' bitwise_xor

    NOT          shift, and go to state 167
    IN           shift, and go to state 168
    DOUBLEEQUAL  shift, and go to state 169
    IS           shift, and go to state 170
    '('          shift, and go to state 171
    '|'          shift, and go to state 172
    '>'          shift, and go to state 173

    '('       [reduce using rule 270 (comparison)]
    '|'       [reduce using rule 270 (comparison)]
    $default  reduce using rule 270 (comparison)

    compare_op_bitwise_or_pair  go to state 174
    eq_bitwise_or               go to state 175
    noteq_bitwise_or            go to state 176
    gte_bitwise_or              go to state 177
    gt_bitwise_or               go to state 178
    notin_bitwise_or            go to state 179
    in_bitwise_or               go to state 180
    isnot_bitwise_or            go to state 181
    is_bitwise_or               go to state 182


state 74

  289 bitwise_or: bitwise_xor .
  291 bitwise_xor: bitwise_xor . '^' bitwise_and

    '^'  shift, and go to state 183

    $default  reduce using rule 289 (bitwise_or)


state 75

  292 bitwise_xor: bitwise_and .
  294 bitwise_and: bitwise_and . '&' shift_expr

    '&'  shift, and go to state 184

    '&'       [reduce using rule 292 (bitwise_xor)]
    $default  reduce using rule 292 (bitwise_xor)


state 76

  295 bitwise_and: shift_expr .
  297 shift_expr: shift_expr . '<' '<' sum
  298           | shift_expr . '>' '>' sum

    '<'  shift, and go to state 185
    '>'  shift, and go to state 186

    '>'       [reduce using rule 295 (bitwise_and)]
    $default  reduce using rule 295 (bitwise_and)


state 77

  299 shift_expr: sum .
  301 sum: sum . '+' term
  302    | sum . '-' term

    '+'  shift, and go to state 187
    '-'  shift, and go to state 188

    '+'       [reduce using rule 299 (shift_expr)]
    $default  reduce using rule 299 (shift_expr)


state 78

  303 sum: term .
  305 term: term . '*' factor
  306     | term . '/' factor
  307     | term . '/' '/' factor
  308     | term . '%' factor
  309     | term . '@' factor

    '*'  shift, and go to state 189
    '@'  shift, and go to state 190
    '/'  shift, and go to state 191
    '%'  shift, and go to state 192

    $default  reduce using rule 303 (sum)


state 79

  310 term: factor .

    $default  reduce using rule 310 (term)


state 80

  315 factor: power .

    $default  reduce using rule 315 (factor)


state 81

  316 power: await_primary . '*' '*' factor
  317      | await_primary .

    '*'  shift, and go to state 193

    '*'       [reduce using rule 317 (power)]
    $default  reduce using rule 317 (power)


state 82

  319 await_primary: primary .
  321 primary: primary . '.' NAME
  322        | primary . genexp
  323        | primary . '(' SQUAREBRACKET_START arguments SQUAREBRACKET_END ')'
  324        | primary . SQUAREBRACKET_START slices SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 194
    '.'                  shift, and go to state 195
    '('                  shift, and go to state 196

    IF                   reduce using rule 319 (await_primary)
    IF                   [reduce using rule 350 (genexp)]
    ELSE                 reduce using rule 319 (await_primary)
    ELSE                 [reduce using rule 350 (genexp)]
    NOT                  reduce using rule 319 (await_primary)
    NOT                  [reduce using rule 350 (genexp)]
    IN                   reduce using rule 319 (await_primary)
    IN                   [reduce using rule 350 (genexp)]
    SQUAREBRACKET_START  [reduce using rule 319 (await_primary)]
    SQUAREBRACKET_START  [reduce using rule 350 (genexp)]
    SQUAREBRACKET_END    reduce using rule 319 (await_primary)
    SQUAREBRACKET_END    [reduce using rule 350 (genexp)]
    DOUBLEEQUAL          reduce using rule 319 (await_primary)
    DOUBLEEQUAL          [reduce using rule 350 (genexp)]
    AS                   reduce using rule 319 (await_primary)
    AS                   [reduce using rule 350 (genexp)]
    TYPE_COMMENT         reduce using rule 319 (await_primary)
    TYPE_COMMENT         [reduce using rule 350 (genexp)]
    FOR                  reduce using rule 319 (await_primary)
    FOR                  [reduce using rule 350 (genexp)]
    NEWLINE              reduce using rule 319 (await_primary)
    NEWLINE              [reduce using rule 350 (genexp)]
    IS                   reduce using rule 319 (await_primary)
    IS                   [reduce using rule 350 (genexp)]
    ASYNC                reduce using rule 319 (await_primary)
    ASYNC                [reduce using rule 350 (genexp)]
    ','                  reduce using rule 319 (await_primary)
    ','                  [reduce using rule 350 (genexp)]
    '.'                  [reduce using rule 350 (genexp)]
    '*'                  reduce using rule 319 (await_primary)
    '*'                  [reduce using rule 350 (genexp)]
    '+'                  reduce using rule 319 (await_primary)
    '+'                  [reduce using rule 350 (genexp)]
    '!'                  reduce using rule 319 (await_primary)
    '!'                  [reduce using rule 350 (genexp)]
    ':'                  reduce using rule 319 (await_primary)
    ':'                  [reduce using rule 350 (genexp)]
    '('                  [reduce using rule 319 (await_primary)]
    '('                  [reduce using rule 350 (genexp)]
    ')'                  reduce using rule 319 (await_primary)
    ')'                  [reduce using rule 350 (genexp)]
    '|'                  reduce using rule 319 (await_primary)
    '|'                  [reduce using rule 350 (genexp)]
    '-'                  reduce using rule 319 (await_primary)
    '-'                  [reduce using rule 350 (genexp)]
    '@'                  reduce using rule 319 (await_primary)
    '@'                  [reduce using rule 350 (genexp)]
    '/'                  reduce using rule 319 (await_primary)
    '/'                  [reduce using rule 350 (genexp)]
    '%'                  reduce using rule 319 (await_primary)
    '%'                  [reduce using rule 350 (genexp)]
    '&'                  reduce using rule 319 (await_primary)
    '&'                  [reduce using rule 350 (genexp)]
    '^'                  reduce using rule 319 (await_primary)
    '^'                  [reduce using rule 350 (genexp)]
    '<'                  reduce using rule 319 (await_primary)
    '<'                  [reduce using rule 350 (genexp)]
    '>'                  reduce using rule 319 (await_primary)
    '>'                  [reduce using rule 350 (genexp)]
    '?'                  reduce using rule 319 (await_primary)
    '?'                  [reduce using rule 350 (genexp)]
    '}'                  reduce using rule 319 (await_primary)
    '}'                  [reduce using rule 350 (genexp)]
    $default             reduce using rule 319 (await_primary)

    genexp  go to state 197


state 83

  325 primary: atom .
  420 t_primary: atom . '&' t_lookahead

    '&'  shift, and go to state 198

    '&'       [reduce using rule 325 (primary)]
    $default  reduce using rule 325 (primary)


state 84

  336 atom: strings .

    $default  reduce using rule 336 (atom)


state 85

   50 yield_stmt: yield_expr .

    $default  reduce using rule 50 (yield_stmt)


state 86

   33 assignment: single_target . augassign '~' '(' yield_expr '|' star_expressions ')'

    '*'  shift, and go to state 199
    '+'  shift, and go to state 200
    '|'  shift, and go to state 201
    '-'  shift, and go to state 202
    '@'  shift, and go to state 203
    '/'  shift, and go to state 204
    '%'  shift, and go to state 205
    '&'  shift, and go to state 206
    '^'  shift, and go to state 207
    '<'  shift, and go to state 208
    '>'  shift, and go to state 209

    $default  reduce using rule 34 (augassign)

    augassign  go to state 210


state 87

   31 assignment: single_subscript_attribute_target . ')' ':' expression SQUAREBRACKET_START EQUAL annotated_rhs SQUAREBRACKET_END
  404 single_target: single_subscript_attribute_target .

    ')'  shift, and go to state 211

    $default  reduce using rule 404 (single_target)


state 88

  408 single_subscript_attribute_target: t_primary . '.' NAME '!' t_lookahead
  409                                  | t_primary . SQUAREBRACKET_START slices SQUAREBRACKET_END '!' t_lookahead
  416 t_primary: t_primary . '.' NAME '&' t_lookahead
  417          | t_primary . SQUAREBRACKET_START slices SQUAREBRACKET_END '&' t_lookahead
  418          | t_primary . genexp '&' t_lookahead
  419          | t_primary . '(' SQUAREBRACKET_START arguments SQUAREBRACKET_END ')' '&' t_lookahead

    SQUAREBRACKET_START  shift, and go to state 212
    '.'                  shift, and go to state 213
    '('                  shift, and go to state 214

    $default  reduce using rule 350 (genexp)

    genexp  go to state 215


state 89

    0 $accept: file $end .

    $default  accept


state 90

   29 assignment: NAME ':' . expression SQUAREBRACKET_START EQUAL annotated_rhs SQUAREBRACKET_END

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 229 (expression)
    SQUAREBRACKET_START  [reduce using rule 260 (disjunction)]
    SQUAREBRACKET_START  [reduce using rule 263 (conjunction)]
    SQUAREBRACKET_START  [reduce using rule 266 (inversion)]
    SQUAREBRACKET_START  [reduce using rule 287 (bitwise_or)]
    SQUAREBRACKET_START  [reduce using rule 290 (bitwise_xor)]
    SQUAREBRACKET_START  [reduce using rule 293 (bitwise_and)]
    SQUAREBRACKET_START  [reduce using rule 296 (shift_expr)]
    SQUAREBRACKET_START  [reduce using rule 300 (sum)]
    SQUAREBRACKET_START  [reduce using rule 304 (term)]
    SQUAREBRACKET_START  [reduce using rule 311 (factor)]
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression     go to state 216
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 91

  342 strings: STRING '+' .

    $default  reduce using rule 342 (strings)


state 92

  225 assigment_expression: NAME . ':' EQUAL '~' expression
  332 atom: NAME .

    ':'  shift, and go to state 217

    $default  reduce using rule 332 (atom)


state 93

  338 atom: '(' . tuple '|' group '|' genexp ')'
  339     | '(' . list '|' listcomp ')'
  340     | '(' . dict '|' set '|' dictcomp '|' setcomp ')'

    SQUAREBRACKET_START  shift, and go to state 218
    '('                  shift, and go to state 219
    '{'                  shift, and go to state 144

    $default  reduce using rule 343 (list)

    list   go to state 145
    tuple  go to state 146
    dict   go to state 147


state 94

  226 named_expression: assigment_expression .

    $default  reduce using rule 226 (named_expression)


state 95

   67 if_stmt: IF named_expression . ':' block elif_stmt
   68        | IF named_expression . ':' block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    ':'  shift, and go to state 220


state 96

  227 named_expression: expression . '!' ':' EQUAL

    '!'  shift, and go to state 221


state 97

  325 primary: atom .

    $default  reduce using rule 325 (primary)


state 98

   72 while_stmt: WHILE named_expression . ':' block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    ':'  shift, and go to state 222


state 99

  332 atom: NAME .

    $default  reduce using rule 332 (atom)


state 100

  267 inversion: NOT inversion .

    $default  reduce using rule 267 (inversion)


state 101

   48 global_stmt: GLOBAL ',' . '.' NAME '+'

    '.'  shift, and go to state 223


state 102

  369 yield_expr: YIELD SQUAREBRACKET_START . star_expressions SQUAREBRACKET_END

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '*'      shift, and go to state 33
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 213 (star_expressions)
    SQUAREBRACKET_END    [reduce using rule 217 (star_expression)]
    SQUAREBRACKET_END    [reduce using rule 229 (expression)]
    SQUAREBRACKET_END    [reduce using rule 260 (disjunction)]
    SQUAREBRACKET_END    [reduce using rule 263 (conjunction)]
    SQUAREBRACKET_END    [reduce using rule 266 (inversion)]
    SQUAREBRACKET_END    [reduce using rule 287 (bitwise_or)]
    SQUAREBRACKET_END    [reduce using rule 290 (bitwise_xor)]
    SQUAREBRACKET_END    [reduce using rule 293 (bitwise_and)]
    SQUAREBRACKET_END    [reduce using rule 296 (shift_expr)]
    SQUAREBRACKET_END    [reduce using rule 300 (sum)]
    SQUAREBRACKET_END    [reduce using rule 304 (term)]
    SQUAREBRACKET_END    [reduce using rule 311 (factor)]
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    star_expressions  go to state 224
    star_expression   go to state 66
    expression        go to state 67
    lambdef           go to state 68
    disjunction       go to state 69
    conjunction       go to state 70
    inversion         go to state 71
    comparison        go to state 72
    bitwise_or        go to state 73
    bitwise_xor       go to state 74
    bitwise_and       go to state 75
    shift_expr        go to state 76
    sum               go to state 77
    term              go to state 78
    factor            go to state 79
    power             go to state 80
    await_primary     go to state 81
    primary           go to state 82
    atom              go to state 97
    strings           go to state 84


state 103

  368 yield_expr: YIELD FROM . expression

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 229 (expression)]
    '+'                  [reduce using rule 260 (disjunction)]
    '+'                  [reduce using rule 263 (conjunction)]
    '+'                  [reduce using rule 266 (inversion)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 229 (expression)
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 229 (expression)
    '|'                  [reduce using rule 260 (disjunction)]
    '|'                  [reduce using rule 263 (conjunction)]
    '|'                  [reduce using rule 266 (inversion)]
    '|'                  [reduce using rule 287 (bitwise_or)]
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression     go to state 225
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 104

   63 dotted_as_names: ',' . '.' dotted_as_name '+'

    '.'  shift, and go to state 226


state 105

   54 import_name: IMPORT dotted_as_names .

    $default  reduce using rule 54 (import_name)


state 106

  169 return_stmt: RETURN SQUAREBRACKET_START . expression_list SQUAREBRACKET_END

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression       go to state 227
    lambdef          go to state 68
    disjunction      go to state 69
    conjunction      go to state 70
    inversion        go to state 71
    comparison       go to state 72
    bitwise_or       go to state 73
    bitwise_xor      go to state 74
    bitwise_and      go to state 75
    shift_expr       go to state 76
    sum              go to state 77
    term             go to state 78
    factor           go to state 79
    power            go to state 80
    await_primary    go to state 81
    primary          go to state 82
    atom             go to state 97
    strings          go to state 84
    expression_list  go to state 228


state 107

  332 atom: NAME .
  399 star_atom: NAME .

    '&'       reduce using rule 332 (atom)
    '&'       [reduce using rule 399 (star_atom)]
    $default  reduce using rule 399 (star_atom)


state 108

  402 star_atom: SQUAREBRACKET_START . SQUAREBRACKET_START star_targets_list_seq SQUAREBRACKET_END SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 229


state 109

  393 star_target: '*' . '(' '!' '*' star_target ')'

    '('  shift, and go to state 230


state 110

  338 atom: '(' . tuple '|' group '|' genexp ')'
  339     | '(' . list '|' listcomp ')'
  340     | '(' . dict '|' set '|' dictcomp '|' setcomp ')'
  400 star_atom: '(' . target_with_star_atom ')'
  401          | '(' . SQUAREBRACKET_START star_targets_tuple_seq SQUAREBRACKET_END ')'

    NAME                 shift, and go to state 107
    STRING               shift, and go to state 4
    INTEGER              shift, and go to state 5
    SQUAREBRACKET_START  shift, and go to state 231
    TRUE                 shift, and go to state 16
    NONE                 shift, and go to state 17
    FALSE                shift, and go to state 26
    '.'                  shift, and go to state 32
    '('                  shift, and go to state 232
    '{'                  shift, and go to state 144

    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    '.'                  [reduce using rule 415 (t_primary)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 395 (target_with_star_atom)
    '|'                  reduce using rule 343 (list)
    '&'                  reduce using rule 331 (atom)
    '&'                  [reduce using rule 415 (t_primary)]
    $default             reduce using rule 331 (atom)

    atom                   go to state 111
    strings                go to state 84
    list                   go to state 145
    tuple                  go to state 146
    dict                   go to state 147
    target_with_star_atom  go to state 233
    star_atom              go to state 115
    t_primary              go to state 116


state 111

  420 t_primary: atom . '&' t_lookahead

    '&'  shift, and go to state 198


state 112

   73 for_stmt: FOR star_targets . IN '~' star_expressions ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    IN  shift, and go to state 234


state 113

  386 star_targets: star_target . '!' ','
  387             | star_target . '(' ',' star_target ')' '*' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    '!'  shift, and go to state 235
    '('  shift, and go to state 236


state 114

  394 star_target: target_with_star_atom .

    $default  reduce using rule 394 (star_target)


state 115

  398 target_with_star_atom: star_atom .

    $default  reduce using rule 398 (target_with_star_atom)


state 116

  396 target_with_star_atom: t_primary . '.' NAME '!' t_lookahead
  397                      | t_primary . SQUAREBRACKET_START slices SQUAREBRACKET_END '!' t_lookahead
  416 t_primary: t_primary . '.' NAME '&' t_lookahead
  417          | t_primary . SQUAREBRACKET_START slices SQUAREBRACKET_END '&' t_lookahead
  418          | t_primary . genexp '&' t_lookahead
  419          | t_primary . '(' SQUAREBRACKET_START arguments SQUAREBRACKET_END ')' '&' t_lookahead

    SQUAREBRACKET_START  shift, and go to state 237
    '.'                  shift, and go to state 238
    '('                  shift, and go to state 214

    $default  reduce using rule 350 (genexp)

    genexp  go to state 215


state 117

  411 del_targets: ',' . '.' del_target '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    '.'  shift, and go to state 239


state 118

   52 del_stmt: DEL del_targets . '&' '(' ';' '|' NEWLINE ')'

    '&'  shift, and go to state 240


state 119

   49 nonlocal_stmt: NONLOCAL ',' . '.' NAME '+'

    '.'  shift, and go to state 241


state 120

  209 class_def_raw: CLASS NAME . SQUAREBRACKET_START '(' SQUAREBRACKET_START arguments SQUAREBRACKET_END ')' SQUAREBRACKET_END ':' block

    SQUAREBRACKET_START  shift, and go to state 242


state 121

   76 with_stmt: WITH ',' . '.' with_item '+' ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block

    '.'  shift, and go to state 243


state 122

   75 with_stmt: WITH '(' . ',' '.' with_item '+' ',' '?' ')' ':' block

    ','  shift, and go to state 244


state 123

  222 star_named_expression: '*' . bitwise_or

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    ','                  reduce using rule 287 (bitwise_or)
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 296 (shift_expr)
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 304 (term)

    bitwise_or     go to state 245
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 124

   87 match_stmt: MATCH subject_expr . ':' NEWLINE INDENT case_block '+' DEDENT

    ':'  shift, and go to state 246


state 125

   89 subject_expr: star_named_expression . ',' star_named_expressions '?'

    ','  shift, and go to state 247


state 126

   90 subject_expr: named_expression .
  223 star_named_expression: named_expression .

    ','       reduce using rule 223 (star_named_expression)
    $default  reduce using rule 90 (subject_expr)


state 127

  170 raise_stmt: RAISE expression . SQUAREBRACKET_START FROM expression SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 248


state 128

  233 lambdef: LAMBDA SQUAREBRACKET_START . lambda_params SQUAREBRACKET_END ':' expression

    NAME  shift, and go to state 249
    '*'   shift, and go to state 250

    SQUAREBRACKET_END  reduce using rule 235 (lambda_parameters)
    SQUAREBRACKET_END  [reduce using rule 245 (lambda_star_etc)]
    '*'                [reduce using rule 250 (lambda_param_no_default)]
    '+'                reduce using rule 250 (lambda_param_no_default)
    '+'                [reduce using rule 253 (lambda_param_with_default)]
    $default           reduce using rule 235 (lambda_parameters)

    lambda_params              go to state 251
    lambda_parameters          go to state 252
    lambda_slash_no_default    go to state 253
    lambda_slash_with_default  go to state 254
    lambda_star_etc            go to state 255
    lambda_kwds                go to state 256
    lambda_param_no_default    go to state 257
    lambda_param_with_default  go to state 258
    lambda_param               go to state 259


state 129

  174 function_def_raw: DEF NAME . '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    '('  shift, and go to state 260


state 130

   51 assert_stmt: ASSERT expression . SQUAREBRACKET_START ',' expression SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 261


state 131

  318 await_primary: AWAIT primary .
  321 primary: primary . '.' NAME
  322        | primary . genexp
  323        | primary . '(' SQUAREBRACKET_START arguments SQUAREBRACKET_END ')'
  324        | primary . SQUAREBRACKET_START slices SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 194
    '.'                  shift, and go to state 195
    '('                  shift, and go to state 196

    IF                   reduce using rule 318 (await_primary)
    IF                   [reduce using rule 350 (genexp)]
    ELSE                 reduce using rule 318 (await_primary)
    ELSE                 [reduce using rule 350 (genexp)]
    NOT                  reduce using rule 318 (await_primary)
    NOT                  [reduce using rule 350 (genexp)]
    IN                   reduce using rule 318 (await_primary)
    IN                   [reduce using rule 350 (genexp)]
    SQUAREBRACKET_START  [reduce using rule 318 (await_primary)]
    SQUAREBRACKET_START  [reduce using rule 350 (genexp)]
    SQUAREBRACKET_END    reduce using rule 318 (await_primary)
    SQUAREBRACKET_END    [reduce using rule 350 (genexp)]
    DOUBLEEQUAL          reduce using rule 318 (await_primary)
    DOUBLEEQUAL          [reduce using rule 350 (genexp)]
    AS                   reduce using rule 318 (await_primary)
    AS                   [reduce using rule 350 (genexp)]
    TYPE_COMMENT         reduce using rule 318 (await_primary)
    TYPE_COMMENT         [reduce using rule 350 (genexp)]
    FOR                  reduce using rule 318 (await_primary)
    FOR                  [reduce using rule 350 (genexp)]
    NEWLINE              reduce using rule 318 (await_primary)
    NEWLINE              [reduce using rule 350 (genexp)]
    IS                   reduce using rule 318 (await_primary)
    IS                   [reduce using rule 350 (genexp)]
    ASYNC                reduce using rule 318 (await_primary)
    ASYNC                [reduce using rule 350 (genexp)]
    ','                  reduce using rule 318 (await_primary)
    ','                  [reduce using rule 350 (genexp)]
    '.'                  [reduce using rule 350 (genexp)]
    '*'                  reduce using rule 318 (await_primary)
    '*'                  [reduce using rule 350 (genexp)]
    '+'                  reduce using rule 318 (await_primary)
    '+'                  [reduce using rule 350 (genexp)]
    '!'                  reduce using rule 318 (await_primary)
    '!'                  [reduce using rule 350 (genexp)]
    ':'                  reduce using rule 318 (await_primary)
    ':'                  [reduce using rule 350 (genexp)]
    '('                  [reduce using rule 318 (await_primary)]
    '('                  [reduce using rule 350 (genexp)]
    ')'                  reduce using rule 318 (await_primary)
    ')'                  [reduce using rule 350 (genexp)]
    '|'                  reduce using rule 318 (await_primary)
    '|'                  [reduce using rule 350 (genexp)]
    '-'                  reduce using rule 318 (await_primary)
    '-'                  [reduce using rule 350 (genexp)]
    '@'                  reduce using rule 318 (await_primary)
    '@'                  [reduce using rule 350 (genexp)]
    '/'                  reduce using rule 318 (await_primary)
    '/'                  [reduce using rule 350 (genexp)]
    '%'                  reduce using rule 318 (await_primary)
    '%'                  [reduce using rule 350 (genexp)]
    '&'                  reduce using rule 318 (await_primary)
    '&'                  [reduce using rule 350 (genexp)]
    '^'                  reduce using rule 318 (await_primary)
    '^'                  [reduce using rule 350 (genexp)]
    '<'                  reduce using rule 318 (await_primary)
    '<'                  [reduce using rule 350 (genexp)]
    '>'                  reduce using rule 318 (await_primary)
    '>'                  [reduce using rule 350 (genexp)]
    '?'                  reduce using rule 318 (await_primary)
    '?'                  [reduce using rule 350 (genexp)]
    '}'                  reduce using rule 318 (await_primary)
    '}'                  [reduce using rule 350 (genexp)]
    $default             reduce using rule 318 (await_primary)

    genexp  go to state 197


state 132

   74 for_stmt: ASYNC FOR . star_targets IN '~' star_expressions ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    NAME                 shift, and go to state 107
    STRING               shift, and go to state 4
    INTEGER              shift, and go to state 5
    SQUAREBRACKET_START  shift, and go to state 108
    TRUE                 shift, and go to state 16
    NONE                 shift, and go to state 17
    FALSE                shift, and go to state 26
    '.'                  shift, and go to state 32
    '*'                  shift, and go to state 109
    '('                  shift, and go to state 110

    IN                   reduce using rule 385 (star_targets)
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    '.'                  [reduce using rule 415 (t_primary)]
    '!'                  reduce using rule 392 (star_target)
    '!'                  [reduce using rule 395 (target_with_star_atom)]
    '('                  [reduce using rule 392 (star_target)]
    '('                  [reduce using rule 395 (target_with_star_atom)]
    '('                  [reduce using rule 415 (t_primary)]
    '&'                  reduce using rule 331 (atom)
    '&'                  [reduce using rule 415 (t_primary)]
    $default             reduce using rule 331 (atom)

    atom                   go to state 111
    strings                go to state 84
    star_targets           go to state 262
    star_target            go to state 113
    target_with_star_atom  go to state 114
    star_atom              go to state 115
    t_primary              go to state 116


state 133

   77 with_stmt: ASYNC WITH . '(' ',' '.' with_item '+' ',' '?' ')' ':' block
   78          | ASYNC WITH . ',' '.' with_item '+' ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block

    ','  shift, and go to state 263
    '('  shift, and go to state 264


state 134

  175 function_def_raw: ASYNC DEF . NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    NAME  shift, and go to state 265


state 135

   81 try_stmt: TRY ':' . block finally_block
   82         | TRY ':' . block except_block '+' SQUAREBRACKET_START else_block SQUAREBRACKET_END SQUAREBRACKET_START finally_block SQUAREBRACKET_END

    NAME      shift, and go to state 3
    STRING    shift, and go to state 4
    INTEGER   shift, and go to state 5
    NOT       shift, and go to state 8
    GLOBAL    shift, and go to state 9
    YIELD     shift, and go to state 10
    IMPORT    shift, and go to state 11
    RETURN    shift, and go to state 12
    DEL       shift, and go to state 14
    NONLOCAL  shift, and go to state 15
    NEWLINE   shift, and go to state 266
    TRUE      shift, and go to state 16
    NONE      shift, and go to state 17
    CONTINUE  shift, and go to state 21
    RAISE     shift, and go to state 22
    PASS      shift, and go to state 23
    LAMBDA    shift, and go to state 24
    DEF       shift, and go to state 267
    FALSE     shift, and go to state 26
    ASSERT    shift, and go to state 27
    AWAIT     shift, and go to state 28
    BREAK     shift, and go to state 29
    '.'       shift, and go to state 32
    '*'       shift, and go to state 33
    '+'       shift, and go to state 34
    ';'       shift, and go to state 35
    '('       shift, and go to state 268
    '~'       shift, and go to state 37
    '-'       shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    FINALLY              reduce using rule 210 (block)
    EXPECT               reduce using rule 210 (block)
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 415 (t_primary)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 403 (single_target)]
    '*'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '+'                  [reduce using rule 210 (block)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 403 (single_target)]
    '+'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '!'                  reduce using rule 213 (star_expressions)
    '!'                  [reduce using rule 217 (star_expression)]
    '!'                  [reduce using rule 229 (expression)]
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '!'                  [reduce using rule 367 (yield_expr)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 407 (single_subscript_attribute_target)
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '|'                  [reduce using rule 403 (single_target)]
    '|'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '~'                  [reduce using rule 403 (single_target)]
    '~'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 403 (single_target)]
    '-'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '@'                  [reduce using rule 403 (single_target)]
    '@'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '/'                  [reduce using rule 403 (single_target)]
    '/'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '%'                  [reduce using rule 403 (single_target)]
    '%'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '&'                  [reduce using rule 403 (single_target)]
    '&'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  [reduce using rule 415 (t_primary)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '^'                  [reduce using rule 403 (single_target)]
    '^'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '<'                  [reduce using rule 403 (single_target)]
    '<'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '>'                  [reduce using rule 403 (single_target)]
    '>'                  [reduce using rule 407 (single_subscript_attribute_target)]
    $default             reduce using rule 287 (bitwise_or)

    simple_stmts                       go to state 269
    simple_stmt                        go to state 42
    assignment                         go to state 44
    global_stmt                        go to state 45
    nonlocal_stmt                      go to state 46
    yield_stmt                         go to state 47
    assert_stmt                        go to state 48
    del_stmt                           go to state 49
    import_stmt                        go to state 50
    import_name                        go to state 51
    return_stmt                        go to state 58
    raise_stmt                         go to state 59
    block                              go to state 270
    star_expressions                   go to state 65
    star_expression                    go to state 66
    expression                         go to state 67
    lambdef                            go to state 68
    disjunction                        go to state 69
    conjunction                        go to state 70
    inversion                          go to state 71
    comparison                         go to state 72
    bitwise_or                         go to state 73
    bitwise_xor                        go to state 74
    bitwise_and                        go to state 75
    shift_expr                         go to state 76
    sum                                go to state 77
    term                               go to state 78
    factor                             go to state 79
    power                              go to state 80
    await_primary                      go to state 81
    primary                            go to state 82
    atom                               go to state 83
    strings                            go to state 84
    yield_expr                         go to state 85
    single_target                      go to state 86
    single_subscript_attribute_target  go to state 87
    t_primary                          go to state 88


state 136

  341 atom: '.' '.' . '.'

    '.'  shift, and go to state 271


state 137

  218 star_expression: '*' bitwise_or .
  288 bitwise_or: bitwise_or . '|' bitwise_xor

    '|'  shift, and go to state 172

    $default  reduce using rule 218 (star_expression)


state 138

  312 factor: '+' factor .

    $default  reduce using rule 312 (factor)


state 139

    7 simple_stmts: ';' '.' . simple_stmt '+' SQUAREBRACKET_START ';' SQUAREBRACKET_END NEWLINE

    NAME      shift, and go to state 3
    STRING    shift, and go to state 4
    INTEGER   shift, and go to state 5
    NOT       shift, and go to state 8
    GLOBAL    shift, and go to state 9
    YIELD     shift, and go to state 10
    IMPORT    shift, and go to state 11
    RETURN    shift, and go to state 12
    DEL       shift, and go to state 14
    NONLOCAL  shift, and go to state 15
    TRUE      shift, and go to state 16
    NONE      shift, and go to state 17
    CONTINUE  shift, and go to state 21
    RAISE     shift, and go to state 22
    PASS      shift, and go to state 23
    LAMBDA    shift, and go to state 24
    FALSE     shift, and go to state 26
    ASSERT    shift, and go to state 27
    AWAIT     shift, and go to state 28
    BREAK     shift, and go to state 29
    '.'       shift, and go to state 32
    '*'       shift, and go to state 33
    '+'       shift, and go to state 34
    '('       shift, and go to state 268
    '~'       shift, and go to state 37
    '-'       shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 415 (t_primary)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 403 (single_target)]
    '*'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '+'                  [reduce using rule 213 (star_expressions)]
    '+'                  [reduce using rule 217 (star_expression)]
    '+'                  [reduce using rule 229 (expression)]
    '+'                  [reduce using rule 260 (disjunction)]
    '+'                  [reduce using rule 263 (conjunction)]
    '+'                  [reduce using rule 266 (inversion)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 367 (yield_expr)]
    '+'                  [reduce using rule 403 (single_target)]
    '+'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 407 (single_subscript_attribute_target)
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '|'                  [reduce using rule 403 (single_target)]
    '|'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '~'                  [reduce using rule 403 (single_target)]
    '~'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 403 (single_target)]
    '-'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '@'                  [reduce using rule 403 (single_target)]
    '@'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '/'                  [reduce using rule 403 (single_target)]
    '/'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '%'                  [reduce using rule 403 (single_target)]
    '%'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '&'                  [reduce using rule 403 (single_target)]
    '&'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  [reduce using rule 415 (t_primary)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '^'                  [reduce using rule 403 (single_target)]
    '^'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '<'                  [reduce using rule 403 (single_target)]
    '<'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '>'                  [reduce using rule 403 (single_target)]
    '>'                  [reduce using rule 407 (single_subscript_attribute_target)]
    $default             reduce using rule 287 (bitwise_or)

    simple_stmt                        go to state 272
    assignment                         go to state 44
    global_stmt                        go to state 45
    nonlocal_stmt                      go to state 46
    yield_stmt                         go to state 47
    assert_stmt                        go to state 48
    del_stmt                           go to state 49
    import_stmt                        go to state 50
    import_name                        go to state 51
    return_stmt                        go to state 58
    raise_stmt                         go to state 59
    star_expressions                   go to state 65
    star_expression                    go to state 66
    expression                         go to state 67
    lambdef                            go to state 68
    disjunction                        go to state 69
    conjunction                        go to state 70
    inversion                          go to state 71
    comparison                         go to state 72
    bitwise_or                         go to state 73
    bitwise_xor                        go to state 74
    bitwise_and                        go to state 75
    shift_expr                         go to state 76
    sum                                go to state 77
    term                               go to state 78
    factor                             go to state 79
    power                              go to state 80
    await_primary                      go to state 81
    primary                            go to state 82
    atom                               go to state 83
    strings                            go to state 84
    yield_expr                         go to state 85
    single_target                      go to state 86
    single_subscript_attribute_target  go to state 87
    t_primary                          go to state 88


state 140

  332 atom: NAME .
  399 star_atom: NAME .
  405 single_target: NAME .

    ')'       reduce using rule 399 (star_atom)
    ')'       [reduce using rule 405 (single_target)]
    '&'       reduce using rule 332 (atom)
    $default  reduce using rule 399 (star_atom)


state 141

  344 list: SQUAREBRACKET_START . SQUAREBRACKET_START star_named_expressions SQUAREBRACKET_END SQUAREBRACKET_END
  402 star_atom: SQUAREBRACKET_START . SQUAREBRACKET_START star_targets_list_seq SQUAREBRACKET_END SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 273


state 142

   30 assignment: '(' '(' . single_target ')'
  338 atom: '(' . tuple '|' group '|' genexp ')'
  339     | '(' . list '|' listcomp ')'
  340     | '(' . dict '|' set '|' dictcomp '|' setcomp ')'
  347 tuple: '(' . SQUAREBRACKET_START star_named_expression ',' SQUAREBRACKET_START star_named_expressions SQUAREBRACKET_END SQUAREBRACKET_END ')'
  400 star_atom: '(' . target_with_star_atom ')'
  401          | '(' . SQUAREBRACKET_START star_targets_tuple_seq SQUAREBRACKET_END ')'
  406 single_target: '(' . single_target ')'

    NAME                 shift, and go to state 140
    STRING               shift, and go to state 4
    INTEGER              shift, and go to state 5
    SQUAREBRACKET_START  shift, and go to state 274
    TRUE                 shift, and go to state 16
    NONE                 shift, and go to state 17
    FALSE                shift, and go to state 26
    '.'                  shift, and go to state 32
    '('                  shift, and go to state 275
    '{'                  shift, and go to state 144

    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    '.'                  [reduce using rule 415 (t_primary)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 395 (target_with_star_atom)
    ')'                  [reduce using rule 403 (single_target)]
    ')'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '|'                  reduce using rule 343 (list)
    '&'                  reduce using rule 331 (atom)
    '&'                  [reduce using rule 415 (t_primary)]
    $default             reduce using rule 331 (atom)

    atom                               go to state 111
    strings                            go to state 84
    list                               go to state 145
    tuple                              go to state 146
    dict                               go to state 147
    target_with_star_atom              go to state 233
    star_atom                          go to state 115
    single_target                      go to state 276
    single_subscript_attribute_target  go to state 150
    t_primary                          go to state 151


state 143

  205 decorators: '(' '@' . named_expression NEWLINE ')' '+'

    NAME     shift, and go to state 92
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    NEWLINE              reduce using rule 224 (assigment_expression)
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 229 (expression)
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    assigment_expression  go to state 94
    named_expression      go to state 277
    expression            go to state 96
    lambdef               go to state 68
    disjunction           go to state 69
    conjunction           go to state 70
    inversion             go to state 71
    comparison            go to state 72
    bitwise_or            go to state 73
    bitwise_xor           go to state 74
    bitwise_and           go to state 75
    shift_expr            go to state 76
    sum                   go to state 77
    term                  go to state 78
    factor                go to state 79
    power                 go to state 80
    await_primary         go to state 81
    primary               go to state 82
    atom                  go to state 97
    strings               go to state 84


state 144

  355 dict: '{' . SQUAREBRACKET_START double_starred_kvpairs SQUAREBRACKET_END '}'

    SQUAREBRACKET_START  shift, and go to state 278


state 145

  339 atom: '(' list . '|' listcomp ')'

    '|'  shift, and go to state 279


state 146

  338 atom: '(' tuple . '|' group '|' genexp ')'

    '|'  shift, and go to state 280


state 147

  340 atom: '(' dict . '|' set '|' dictcomp '|' setcomp ')'

    '|'  shift, and go to state 281


state 148

   32 assignment: '(' star_targets . EQUAL ')' '+' '(' yield_expr '|' star_expressions ')' '!' EQUAL SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END

    EQUAL  shift, and go to state 282


state 149

  406 single_target: '(' single_target . ')'

    ')'  shift, and go to state 283


state 150

  404 single_target: single_subscript_attribute_target .

    $default  reduce using rule 404 (single_target)


state 151

  396 target_with_star_atom: t_primary . '.' NAME '!' t_lookahead
  397                      | t_primary . SQUAREBRACKET_START slices SQUAREBRACKET_END '!' t_lookahead
  408 single_subscript_attribute_target: t_primary . '.' NAME '!' t_lookahead
  409                                  | t_primary . SQUAREBRACKET_START slices SQUAREBRACKET_END '!' t_lookahead
  416 t_primary: t_primary . '.' NAME '&' t_lookahead
  417          | t_primary . SQUAREBRACKET_START slices SQUAREBRACKET_END '&' t_lookahead
  418          | t_primary . genexp '&' t_lookahead
  419          | t_primary . '(' SQUAREBRACKET_START arguments SQUAREBRACKET_END ')' '&' t_lookahead

    SQUAREBRACKET_START  shift, and go to state 284
    '.'                  shift, and go to state 285
    '('                  shift, and go to state 214

    $default  reduce using rule 350 (genexp)

    genexp  go to state 215


state 152

  314 factor: '~' factor .

    $default  reduce using rule 314 (factor)


state 153

  313 factor: '-' factor .

    $default  reduce using rule 313 (factor)


state 154

    1 file: SQUAREBRACKET_START statements SQUAREBRACKET_END .

    $default  reduce using rule 1 (file)


state 155

    2 statements: statement '+' .

    $default  reduce using rule 2 (statements)


state 156

    6 simple_stmts: simple_stmt '!' . ';' NEWLINE

    ';'  shift, and go to state 286


state 157

   53 import_stmt: import_name '|' . import_from

    FROM  shift, and go to state 287

    $default  reduce using rule 55 (import_from)

    import_from  go to state 288


state 158

  174 function_def_raw: DEF . NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    NAME  shift, and go to state 129


state 159

  175 function_def_raw: ASYNC . DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    DEF  shift, and go to state 134


state 160

  172 function_def: decorators function_def_raw .

    $default  reduce using rule 172 (function_def)


state 161

  206 class_def: decorators class_def_raw .

    $default  reduce using rule 206 (class_def)


state 162

  215 star_expressions: star_expression ',' .

    $default  reduce using rule 215 (star_expressions)


state 163

  214 star_expressions: star_expression '(' . ',' star_expression ')' '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    ','  shift, and go to state 289


state 164

  230 expression: disjunction IF . disjunction ELSE expression

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    ELSE                 reduce using rule 260 (disjunction)
    ELSE                 [reduce using rule 263 (conjunction)]
    ELSE                 [reduce using rule 266 (inversion)]
    ELSE                 [reduce using rule 287 (bitwise_or)]
    ELSE                 [reduce using rule 290 (bitwise_xor)]
    ELSE                 [reduce using rule 293 (bitwise_and)]
    ELSE                 [reduce using rule 296 (shift_expr)]
    ELSE                 [reduce using rule 300 (sum)]
    ELSE                 [reduce using rule 304 (term)]
    ELSE                 [reduce using rule 311 (factor)]
    ELSE                 [reduce using rule 320 (primary)]
    ELSE                 [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    disjunction    go to state 290
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 165

  261 disjunction: conjunction '(' . OR conjunction ')' '+'

    OR  shift, and go to state 291


state 166

  264 conjunction: inversion '(' . AND inversion ')' '+'

    AND  shift, and go to state 292


state 167

  283 notin_bitwise_or: NOT . IN bitwise_or

    IN  shift, and go to state 293


state 168

  284 in_bitwise_or: IN . bitwise_or

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 296 (shift_expr)
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 304 (term)

    bitwise_or     go to state 294
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 169

  279 eq_bitwise_or: DOUBLEEQUAL . bitwise_or

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 296 (shift_expr)
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 304 (term)

    bitwise_or     go to state 295
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 170

  285 isnot_bitwise_or: IS . NOT bitwise_or
  286 is_bitwise_or: IS . bitwise_or

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 296
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 296 (shift_expr)
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 304 (term)

    bitwise_or     go to state 297
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 171

  280 noteq_bitwise_or: '(' . '!' EQUAL ')' bitwise_or

    '!'  shift, and go to state 298


state 172

  288 bitwise_or: bitwise_or '|' . bitwise_xor

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 290 (bitwise_xor)
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    ELSE                 reduce using rule 290 (bitwise_xor)
    ELSE                 [reduce using rule 293 (bitwise_and)]
    ELSE                 [reduce using rule 296 (shift_expr)]
    ELSE                 [reduce using rule 300 (sum)]
    ELSE                 [reduce using rule 304 (term)]
    ELSE                 [reduce using rule 311 (factor)]
    ELSE                 [reduce using rule 320 (primary)]
    ELSE                 [reduce using rule 331 (atom)]
    NOT                  reduce using rule 290 (bitwise_xor)
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 290 (bitwise_xor)
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 290 (bitwise_xor)
    SQUAREBRACKET_START  [reduce using rule 293 (bitwise_and)]
    SQUAREBRACKET_START  [reduce using rule 296 (shift_expr)]
    SQUAREBRACKET_START  [reduce using rule 300 (sum)]
    SQUAREBRACKET_START  [reduce using rule 304 (term)]
    SQUAREBRACKET_START  [reduce using rule 311 (factor)]
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 290 (bitwise_xor)
    SQUAREBRACKET_END    [reduce using rule 293 (bitwise_and)]
    SQUAREBRACKET_END    [reduce using rule 296 (shift_expr)]
    SQUAREBRACKET_END    [reduce using rule 300 (sum)]
    SQUAREBRACKET_END    [reduce using rule 304 (term)]
    SQUAREBRACKET_END    [reduce using rule 311 (factor)]
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 290 (bitwise_xor)
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    AS                   reduce using rule 290 (bitwise_xor)
    AS                   [reduce using rule 293 (bitwise_and)]
    AS                   [reduce using rule 296 (shift_expr)]
    AS                   [reduce using rule 300 (sum)]
    AS                   [reduce using rule 304 (term)]
    AS                   [reduce using rule 311 (factor)]
    AS                   [reduce using rule 320 (primary)]
    AS                   [reduce using rule 331 (atom)]
    TYPE_COMMENT         reduce using rule 290 (bitwise_xor)
    TYPE_COMMENT         [reduce using rule 293 (bitwise_and)]
    TYPE_COMMENT         [reduce using rule 296 (shift_expr)]
    TYPE_COMMENT         [reduce using rule 300 (sum)]
    TYPE_COMMENT         [reduce using rule 304 (term)]
    TYPE_COMMENT         [reduce using rule 311 (factor)]
    TYPE_COMMENT         [reduce using rule 320 (primary)]
    TYPE_COMMENT         [reduce using rule 331 (atom)]
    FOR                  reduce using rule 290 (bitwise_xor)
    FOR                  [reduce using rule 293 (bitwise_and)]
    FOR                  [reduce using rule 296 (shift_expr)]
    FOR                  [reduce using rule 300 (sum)]
    FOR                  [reduce using rule 304 (term)]
    FOR                  [reduce using rule 311 (factor)]
    FOR                  [reduce using rule 320 (primary)]
    FOR                  [reduce using rule 331 (atom)]
    NEWLINE              reduce using rule 290 (bitwise_xor)
    NEWLINE              [reduce using rule 293 (bitwise_and)]
    NEWLINE              [reduce using rule 296 (shift_expr)]
    NEWLINE              [reduce using rule 300 (sum)]
    NEWLINE              [reduce using rule 304 (term)]
    NEWLINE              [reduce using rule 311 (factor)]
    NEWLINE              [reduce using rule 320 (primary)]
    NEWLINE              [reduce using rule 331 (atom)]
    IS                   reduce using rule 290 (bitwise_xor)
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ASYNC                reduce using rule 290 (bitwise_xor)
    ASYNC                [reduce using rule 293 (bitwise_and)]
    ASYNC                [reduce using rule 296 (shift_expr)]
    ASYNC                [reduce using rule 300 (sum)]
    ASYNC                [reduce using rule 304 (term)]
    ASYNC                [reduce using rule 311 (factor)]
    ASYNC                [reduce using rule 320 (primary)]
    ASYNC                [reduce using rule 331 (atom)]
    ','                  reduce using rule 290 (bitwise_xor)
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 290 (bitwise_xor)
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 290 (bitwise_xor)
    ':'                  [reduce using rule 293 (bitwise_and)]
    ':'                  [reduce using rule 296 (shift_expr)]
    ':'                  [reduce using rule 300 (sum)]
    ':'                  [reduce using rule 304 (term)]
    ':'                  [reduce using rule 311 (factor)]
    ':'                  [reduce using rule 320 (primary)]
    ':'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 290 (bitwise_xor)
    ')'                  [reduce using rule 293 (bitwise_and)]
    ')'                  [reduce using rule 296 (shift_expr)]
    ')'                  [reduce using rule 300 (sum)]
    ')'                  [reduce using rule 304 (term)]
    ')'                  [reduce using rule 311 (factor)]
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 290 (bitwise_xor)
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 290 (bitwise_xor)
    '&'                  [reduce using rule 293 (bitwise_and)]
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 290 (bitwise_xor)
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '?'                  reduce using rule 290 (bitwise_xor)
    '?'                  [reduce using rule 293 (bitwise_and)]
    '?'                  [reduce using rule 296 (shift_expr)]
    '?'                  [reduce using rule 300 (sum)]
    '?'                  [reduce using rule 304 (term)]
    '?'                  [reduce using rule 311 (factor)]
    '?'                  [reduce using rule 320 (primary)]
    '?'                  [reduce using rule 331 (atom)]
    '}'                  reduce using rule 290 (bitwise_xor)
    '}'                  [reduce using rule 293 (bitwise_and)]
    '}'                  [reduce using rule 296 (shift_expr)]
    '}'                  [reduce using rule 300 (sum)]
    '}'                  [reduce using rule 304 (term)]
    '}'                  [reduce using rule 311 (factor)]
    '}'                  [reduce using rule 320 (primary)]
    '}'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 290 (bitwise_xor)

    bitwise_xor    go to state 299
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 173

  281 gte_bitwise_or: '>' . EQUAL bitwise_or
  282 gt_bitwise_or: '>' . bitwise_or

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    EQUAL    shift, and go to state 300
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 296 (shift_expr)
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 304 (term)

    bitwise_or     go to state 301
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 174

  269 comparison: bitwise_or compare_op_bitwise_or_pair . '+'

    '+'  shift, and go to state 302


state 175

  271 compare_op_bitwise_or_pair: eq_bitwise_or .

    $default  reduce using rule 271 (compare_op_bitwise_or_pair)


state 176

  272 compare_op_bitwise_or_pair: noteq_bitwise_or .

    $default  reduce using rule 272 (compare_op_bitwise_or_pair)


state 177

  273 compare_op_bitwise_or_pair: gte_bitwise_or .

    $default  reduce using rule 273 (compare_op_bitwise_or_pair)


state 178

  274 compare_op_bitwise_or_pair: gt_bitwise_or .

    $default  reduce using rule 274 (compare_op_bitwise_or_pair)


state 179

  275 compare_op_bitwise_or_pair: notin_bitwise_or .

    $default  reduce using rule 275 (compare_op_bitwise_or_pair)


state 180

  276 compare_op_bitwise_or_pair: in_bitwise_or .

    $default  reduce using rule 276 (compare_op_bitwise_or_pair)


state 181

  277 compare_op_bitwise_or_pair: isnot_bitwise_or .

    $default  reduce using rule 277 (compare_op_bitwise_or_pair)


state 182

  278 compare_op_bitwise_or_pair: is_bitwise_or .

    $default  reduce using rule 278 (compare_op_bitwise_or_pair)


state 183

  291 bitwise_xor: bitwise_xor '^' . bitwise_and

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 293 (bitwise_and)
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    ELSE                 reduce using rule 293 (bitwise_and)
    ELSE                 [reduce using rule 296 (shift_expr)]
    ELSE                 [reduce using rule 300 (sum)]
    ELSE                 [reduce using rule 304 (term)]
    ELSE                 [reduce using rule 311 (factor)]
    ELSE                 [reduce using rule 320 (primary)]
    ELSE                 [reduce using rule 331 (atom)]
    NOT                  reduce using rule 293 (bitwise_and)
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 293 (bitwise_and)
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 293 (bitwise_and)
    SQUAREBRACKET_START  [reduce using rule 296 (shift_expr)]
    SQUAREBRACKET_START  [reduce using rule 300 (sum)]
    SQUAREBRACKET_START  [reduce using rule 304 (term)]
    SQUAREBRACKET_START  [reduce using rule 311 (factor)]
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 293 (bitwise_and)
    SQUAREBRACKET_END    [reduce using rule 296 (shift_expr)]
    SQUAREBRACKET_END    [reduce using rule 300 (sum)]
    SQUAREBRACKET_END    [reduce using rule 304 (term)]
    SQUAREBRACKET_END    [reduce using rule 311 (factor)]
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 293 (bitwise_and)
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    AS                   reduce using rule 293 (bitwise_and)
    AS                   [reduce using rule 296 (shift_expr)]
    AS                   [reduce using rule 300 (sum)]
    AS                   [reduce using rule 304 (term)]
    AS                   [reduce using rule 311 (factor)]
    AS                   [reduce using rule 320 (primary)]
    AS                   [reduce using rule 331 (atom)]
    TYPE_COMMENT         reduce using rule 293 (bitwise_and)
    TYPE_COMMENT         [reduce using rule 296 (shift_expr)]
    TYPE_COMMENT         [reduce using rule 300 (sum)]
    TYPE_COMMENT         [reduce using rule 304 (term)]
    TYPE_COMMENT         [reduce using rule 311 (factor)]
    TYPE_COMMENT         [reduce using rule 320 (primary)]
    TYPE_COMMENT         [reduce using rule 331 (atom)]
    FOR                  reduce using rule 293 (bitwise_and)
    FOR                  [reduce using rule 296 (shift_expr)]
    FOR                  [reduce using rule 300 (sum)]
    FOR                  [reduce using rule 304 (term)]
    FOR                  [reduce using rule 311 (factor)]
    FOR                  [reduce using rule 320 (primary)]
    FOR                  [reduce using rule 331 (atom)]
    NEWLINE              reduce using rule 293 (bitwise_and)
    NEWLINE              [reduce using rule 296 (shift_expr)]
    NEWLINE              [reduce using rule 300 (sum)]
    NEWLINE              [reduce using rule 304 (term)]
    NEWLINE              [reduce using rule 311 (factor)]
    NEWLINE              [reduce using rule 320 (primary)]
    NEWLINE              [reduce using rule 331 (atom)]
    IS                   reduce using rule 293 (bitwise_and)
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ASYNC                reduce using rule 293 (bitwise_and)
    ASYNC                [reduce using rule 296 (shift_expr)]
    ASYNC                [reduce using rule 300 (sum)]
    ASYNC                [reduce using rule 304 (term)]
    ASYNC                [reduce using rule 311 (factor)]
    ASYNC                [reduce using rule 320 (primary)]
    ASYNC                [reduce using rule 331 (atom)]
    ','                  reduce using rule 293 (bitwise_and)
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 293 (bitwise_and)
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 293 (bitwise_and)
    ':'                  [reduce using rule 296 (shift_expr)]
    ':'                  [reduce using rule 300 (sum)]
    ':'                  [reduce using rule 304 (term)]
    ':'                  [reduce using rule 311 (factor)]
    ':'                  [reduce using rule 320 (primary)]
    ':'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 293 (bitwise_and)
    ')'                  [reduce using rule 296 (shift_expr)]
    ')'                  [reduce using rule 300 (sum)]
    ')'                  [reduce using rule 304 (term)]
    ')'                  [reduce using rule 311 (factor)]
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 293 (bitwise_and)
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 293 (bitwise_and)
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 293 (bitwise_and)
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '?'                  reduce using rule 293 (bitwise_and)
    '?'                  [reduce using rule 296 (shift_expr)]
    '?'                  [reduce using rule 300 (sum)]
    '?'                  [reduce using rule 304 (term)]
    '?'                  [reduce using rule 311 (factor)]
    '?'                  [reduce using rule 320 (primary)]
    '?'                  [reduce using rule 331 (atom)]
    '}'                  reduce using rule 293 (bitwise_and)
    '}'                  [reduce using rule 296 (shift_expr)]
    '}'                  [reduce using rule 300 (sum)]
    '}'                  [reduce using rule 304 (term)]
    '}'                  [reduce using rule 311 (factor)]
    '}'                  [reduce using rule 320 (primary)]
    '}'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 293 (bitwise_and)

    bitwise_and    go to state 303
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 184

  294 bitwise_and: bitwise_and '&' . shift_expr

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 296 (shift_expr)
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    ELSE                 reduce using rule 296 (shift_expr)
    ELSE                 [reduce using rule 300 (sum)]
    ELSE                 [reduce using rule 304 (term)]
    ELSE                 [reduce using rule 311 (factor)]
    ELSE                 [reduce using rule 320 (primary)]
    ELSE                 [reduce using rule 331 (atom)]
    NOT                  reduce using rule 296 (shift_expr)
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 296 (shift_expr)
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 296 (shift_expr)
    SQUAREBRACKET_START  [reduce using rule 300 (sum)]
    SQUAREBRACKET_START  [reduce using rule 304 (term)]
    SQUAREBRACKET_START  [reduce using rule 311 (factor)]
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 296 (shift_expr)
    SQUAREBRACKET_END    [reduce using rule 300 (sum)]
    SQUAREBRACKET_END    [reduce using rule 304 (term)]
    SQUAREBRACKET_END    [reduce using rule 311 (factor)]
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 296 (shift_expr)
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    AS                   reduce using rule 296 (shift_expr)
    AS                   [reduce using rule 300 (sum)]
    AS                   [reduce using rule 304 (term)]
    AS                   [reduce using rule 311 (factor)]
    AS                   [reduce using rule 320 (primary)]
    AS                   [reduce using rule 331 (atom)]
    TYPE_COMMENT         reduce using rule 296 (shift_expr)
    TYPE_COMMENT         [reduce using rule 300 (sum)]
    TYPE_COMMENT         [reduce using rule 304 (term)]
    TYPE_COMMENT         [reduce using rule 311 (factor)]
    TYPE_COMMENT         [reduce using rule 320 (primary)]
    TYPE_COMMENT         [reduce using rule 331 (atom)]
    FOR                  reduce using rule 296 (shift_expr)
    FOR                  [reduce using rule 300 (sum)]
    FOR                  [reduce using rule 304 (term)]
    FOR                  [reduce using rule 311 (factor)]
    FOR                  [reduce using rule 320 (primary)]
    FOR                  [reduce using rule 331 (atom)]
    NEWLINE              reduce using rule 296 (shift_expr)
    NEWLINE              [reduce using rule 300 (sum)]
    NEWLINE              [reduce using rule 304 (term)]
    NEWLINE              [reduce using rule 311 (factor)]
    NEWLINE              [reduce using rule 320 (primary)]
    NEWLINE              [reduce using rule 331 (atom)]
    IS                   reduce using rule 296 (shift_expr)
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ASYNC                reduce using rule 296 (shift_expr)
    ASYNC                [reduce using rule 300 (sum)]
    ASYNC                [reduce using rule 304 (term)]
    ASYNC                [reduce using rule 311 (factor)]
    ASYNC                [reduce using rule 320 (primary)]
    ASYNC                [reduce using rule 331 (atom)]
    ','                  reduce using rule 296 (shift_expr)
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 296 (shift_expr)
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 296 (shift_expr)
    ':'                  [reduce using rule 300 (sum)]
    ':'                  [reduce using rule 304 (term)]
    ':'                  [reduce using rule 311 (factor)]
    ':'                  [reduce using rule 320 (primary)]
    ':'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 296 (shift_expr)
    ')'                  [reduce using rule 300 (sum)]
    ')'                  [reduce using rule 304 (term)]
    ')'                  [reduce using rule 311 (factor)]
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 296 (shift_expr)
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 296 (shift_expr)
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 296 (shift_expr)
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 296 (shift_expr)
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '?'                  reduce using rule 296 (shift_expr)
    '?'                  [reduce using rule 300 (sum)]
    '?'                  [reduce using rule 304 (term)]
    '?'                  [reduce using rule 311 (factor)]
    '?'                  [reduce using rule 320 (primary)]
    '?'                  [reduce using rule 331 (atom)]
    '}'                  reduce using rule 296 (shift_expr)
    '}'                  [reduce using rule 300 (sum)]
    '}'                  [reduce using rule 304 (term)]
    '}'                  [reduce using rule 311 (factor)]
    '}'                  [reduce using rule 320 (primary)]
    '}'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 296 (shift_expr)

    shift_expr     go to state 304
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 185

  297 shift_expr: shift_expr '<' . '<' sum

    '<'  shift, and go to state 305


state 186

  298 shift_expr: shift_expr '>' . '>' sum

    '>'  shift, and go to state 306


state 187

  301 sum: sum '+' . term

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 304 (term)
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    ELSE                 reduce using rule 304 (term)
    ELSE                 [reduce using rule 311 (factor)]
    ELSE                 [reduce using rule 320 (primary)]
    ELSE                 [reduce using rule 331 (atom)]
    NOT                  reduce using rule 304 (term)
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 304 (term)
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 304 (term)
    SQUAREBRACKET_START  [reduce using rule 311 (factor)]
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 304 (term)
    SQUAREBRACKET_END    [reduce using rule 311 (factor)]
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 304 (term)
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    AS                   reduce using rule 304 (term)
    AS                   [reduce using rule 311 (factor)]
    AS                   [reduce using rule 320 (primary)]
    AS                   [reduce using rule 331 (atom)]
    TYPE_COMMENT         reduce using rule 304 (term)
    TYPE_COMMENT         [reduce using rule 311 (factor)]
    TYPE_COMMENT         [reduce using rule 320 (primary)]
    TYPE_COMMENT         [reduce using rule 331 (atom)]
    FOR                  reduce using rule 304 (term)
    FOR                  [reduce using rule 311 (factor)]
    FOR                  [reduce using rule 320 (primary)]
    FOR                  [reduce using rule 331 (atom)]
    NEWLINE              reduce using rule 304 (term)
    NEWLINE              [reduce using rule 311 (factor)]
    NEWLINE              [reduce using rule 320 (primary)]
    NEWLINE              [reduce using rule 331 (atom)]
    IS                   reduce using rule 304 (term)
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ASYNC                reduce using rule 304 (term)
    ASYNC                [reduce using rule 311 (factor)]
    ASYNC                [reduce using rule 320 (primary)]
    ASYNC                [reduce using rule 331 (atom)]
    ','                  reduce using rule 304 (term)
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 304 (term)
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 304 (term)
    ':'                  [reduce using rule 311 (factor)]
    ':'                  [reduce using rule 320 (primary)]
    ':'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 304 (term)
    ')'                  [reduce using rule 311 (factor)]
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 304 (term)
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 304 (term)
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 304 (term)
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 304 (term)
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 304 (term)
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '?'                  reduce using rule 304 (term)
    '?'                  [reduce using rule 311 (factor)]
    '?'                  [reduce using rule 320 (primary)]
    '?'                  [reduce using rule 331 (atom)]
    '}'                  reduce using rule 304 (term)
    '}'                  [reduce using rule 311 (factor)]
    '}'                  [reduce using rule 320 (primary)]
    '}'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 304 (term)

    term           go to state 307
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 188

  302 sum: sum '-' . term

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 304 (term)
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    ELSE                 reduce using rule 304 (term)
    ELSE                 [reduce using rule 311 (factor)]
    ELSE                 [reduce using rule 320 (primary)]
    ELSE                 [reduce using rule 331 (atom)]
    NOT                  reduce using rule 304 (term)
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 304 (term)
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 304 (term)
    SQUAREBRACKET_START  [reduce using rule 311 (factor)]
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 304 (term)
    SQUAREBRACKET_END    [reduce using rule 311 (factor)]
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 304 (term)
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    AS                   reduce using rule 304 (term)
    AS                   [reduce using rule 311 (factor)]
    AS                   [reduce using rule 320 (primary)]
    AS                   [reduce using rule 331 (atom)]
    TYPE_COMMENT         reduce using rule 304 (term)
    TYPE_COMMENT         [reduce using rule 311 (factor)]
    TYPE_COMMENT         [reduce using rule 320 (primary)]
    TYPE_COMMENT         [reduce using rule 331 (atom)]
    FOR                  reduce using rule 304 (term)
    FOR                  [reduce using rule 311 (factor)]
    FOR                  [reduce using rule 320 (primary)]
    FOR                  [reduce using rule 331 (atom)]
    NEWLINE              reduce using rule 304 (term)
    NEWLINE              [reduce using rule 311 (factor)]
    NEWLINE              [reduce using rule 320 (primary)]
    NEWLINE              [reduce using rule 331 (atom)]
    IS                   reduce using rule 304 (term)
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ASYNC                reduce using rule 304 (term)
    ASYNC                [reduce using rule 311 (factor)]
    ASYNC                [reduce using rule 320 (primary)]
    ASYNC                [reduce using rule 331 (atom)]
    ','                  reduce using rule 304 (term)
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 304 (term)
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 304 (term)
    ':'                  [reduce using rule 311 (factor)]
    ':'                  [reduce using rule 320 (primary)]
    ':'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 304 (term)
    ')'                  [reduce using rule 311 (factor)]
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 304 (term)
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 304 (term)
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 304 (term)
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 304 (term)
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 304 (term)
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '?'                  reduce using rule 304 (term)
    '?'                  [reduce using rule 311 (factor)]
    '?'                  [reduce using rule 320 (primary)]
    '?'                  [reduce using rule 331 (atom)]
    '}'                  reduce using rule 304 (term)
    '}'                  [reduce using rule 311 (factor)]
    '}'                  [reduce using rule 320 (primary)]
    '}'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 304 (term)

    term           go to state 308
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 189

  305 term: term '*' . factor

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 311 (factor)
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    ELSE                 reduce using rule 311 (factor)
    ELSE                 [reduce using rule 320 (primary)]
    ELSE                 [reduce using rule 331 (atom)]
    NOT                  reduce using rule 311 (factor)
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 311 (factor)
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 311 (factor)
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 311 (factor)
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 311 (factor)
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    AS                   reduce using rule 311 (factor)
    AS                   [reduce using rule 320 (primary)]
    AS                   [reduce using rule 331 (atom)]
    TYPE_COMMENT         reduce using rule 311 (factor)
    TYPE_COMMENT         [reduce using rule 320 (primary)]
    TYPE_COMMENT         [reduce using rule 331 (atom)]
    FOR                  reduce using rule 311 (factor)
    FOR                  [reduce using rule 320 (primary)]
    FOR                  [reduce using rule 331 (atom)]
    NEWLINE              reduce using rule 311 (factor)
    NEWLINE              [reduce using rule 320 (primary)]
    NEWLINE              [reduce using rule 331 (atom)]
    IS                   reduce using rule 311 (factor)
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ASYNC                reduce using rule 311 (factor)
    ASYNC                [reduce using rule 320 (primary)]
    ASYNC                [reduce using rule 331 (atom)]
    ','                  reduce using rule 311 (factor)
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 311 (factor)
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 311 (factor)
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 311 (factor)
    ':'                  [reduce using rule 320 (primary)]
    ':'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 311 (factor)
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 311 (factor)
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 311 (factor)
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 311 (factor)
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 311 (factor)
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 311 (factor)
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 311 (factor)
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 311 (factor)
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 311 (factor)
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '?'                  reduce using rule 311 (factor)
    '?'                  [reduce using rule 320 (primary)]
    '?'                  [reduce using rule 331 (atom)]
    '}'                  reduce using rule 311 (factor)
    '}'                  [reduce using rule 320 (primary)]
    '}'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 311 (factor)

    factor         go to state 309
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 190

  309 term: term '@' . factor

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 311 (factor)
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    ELSE                 reduce using rule 311 (factor)
    ELSE                 [reduce using rule 320 (primary)]
    ELSE                 [reduce using rule 331 (atom)]
    NOT                  reduce using rule 311 (factor)
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 311 (factor)
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 311 (factor)
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 311 (factor)
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 311 (factor)
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    AS                   reduce using rule 311 (factor)
    AS                   [reduce using rule 320 (primary)]
    AS                   [reduce using rule 331 (atom)]
    TYPE_COMMENT         reduce using rule 311 (factor)
    TYPE_COMMENT         [reduce using rule 320 (primary)]
    TYPE_COMMENT         [reduce using rule 331 (atom)]
    FOR                  reduce using rule 311 (factor)
    FOR                  [reduce using rule 320 (primary)]
    FOR                  [reduce using rule 331 (atom)]
    NEWLINE              reduce using rule 311 (factor)
    NEWLINE              [reduce using rule 320 (primary)]
    NEWLINE              [reduce using rule 331 (atom)]
    IS                   reduce using rule 311 (factor)
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ASYNC                reduce using rule 311 (factor)
    ASYNC                [reduce using rule 320 (primary)]
    ASYNC                [reduce using rule 331 (atom)]
    ','                  reduce using rule 311 (factor)
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 311 (factor)
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 311 (factor)
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 311 (factor)
    ':'                  [reduce using rule 320 (primary)]
    ':'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 311 (factor)
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 311 (factor)
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 311 (factor)
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 311 (factor)
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 311 (factor)
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 311 (factor)
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 311 (factor)
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 311 (factor)
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 311 (factor)
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '?'                  reduce using rule 311 (factor)
    '?'                  [reduce using rule 320 (primary)]
    '?'                  [reduce using rule 331 (atom)]
    '}'                  reduce using rule 311 (factor)
    '}'                  [reduce using rule 320 (primary)]
    '}'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 311 (factor)

    factor         go to state 310
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 191

  306 term: term '/' . factor
  307     | term '/' . '/' factor

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38
    '/'      shift, and go to state 311

    IF                   reduce using rule 311 (factor)
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    ELSE                 reduce using rule 311 (factor)
    ELSE                 [reduce using rule 320 (primary)]
    ELSE                 [reduce using rule 331 (atom)]
    NOT                  reduce using rule 311 (factor)
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 311 (factor)
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 311 (factor)
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 311 (factor)
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 311 (factor)
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    AS                   reduce using rule 311 (factor)
    AS                   [reduce using rule 320 (primary)]
    AS                   [reduce using rule 331 (atom)]
    TYPE_COMMENT         reduce using rule 311 (factor)
    TYPE_COMMENT         [reduce using rule 320 (primary)]
    TYPE_COMMENT         [reduce using rule 331 (atom)]
    FOR                  reduce using rule 311 (factor)
    FOR                  [reduce using rule 320 (primary)]
    FOR                  [reduce using rule 331 (atom)]
    NEWLINE              reduce using rule 311 (factor)
    NEWLINE              [reduce using rule 320 (primary)]
    NEWLINE              [reduce using rule 331 (atom)]
    IS                   reduce using rule 311 (factor)
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ASYNC                reduce using rule 311 (factor)
    ASYNC                [reduce using rule 320 (primary)]
    ASYNC                [reduce using rule 331 (atom)]
    ','                  reduce using rule 311 (factor)
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 311 (factor)
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 311 (factor)
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 311 (factor)
    ':'                  [reduce using rule 320 (primary)]
    ':'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 311 (factor)
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 311 (factor)
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 311 (factor)
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 311 (factor)
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 311 (factor)
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 311 (factor)
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 311 (factor)
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 311 (factor)
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '?'                  reduce using rule 311 (factor)
    '?'                  [reduce using rule 320 (primary)]
    '?'                  [reduce using rule 331 (atom)]
    '}'                  reduce using rule 311 (factor)
    '}'                  [reduce using rule 320 (primary)]
    '}'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 311 (factor)

    factor         go to state 312
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 192

  308 term: term '%' . factor

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 311 (factor)
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    ELSE                 reduce using rule 311 (factor)
    ELSE                 [reduce using rule 320 (primary)]
    ELSE                 [reduce using rule 331 (atom)]
    NOT                  reduce using rule 311 (factor)
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 311 (factor)
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 311 (factor)
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 311 (factor)
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 311 (factor)
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    AS                   reduce using rule 311 (factor)
    AS                   [reduce using rule 320 (primary)]
    AS                   [reduce using rule 331 (atom)]
    TYPE_COMMENT         reduce using rule 311 (factor)
    TYPE_COMMENT         [reduce using rule 320 (primary)]
    TYPE_COMMENT         [reduce using rule 331 (atom)]
    FOR                  reduce using rule 311 (factor)
    FOR                  [reduce using rule 320 (primary)]
    FOR                  [reduce using rule 331 (atom)]
    NEWLINE              reduce using rule 311 (factor)
    NEWLINE              [reduce using rule 320 (primary)]
    NEWLINE              [reduce using rule 331 (atom)]
    IS                   reduce using rule 311 (factor)
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ASYNC                reduce using rule 311 (factor)
    ASYNC                [reduce using rule 320 (primary)]
    ASYNC                [reduce using rule 331 (atom)]
    ','                  reduce using rule 311 (factor)
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 311 (factor)
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 311 (factor)
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 311 (factor)
    ':'                  [reduce using rule 320 (primary)]
    ':'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 311 (factor)
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 311 (factor)
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 311 (factor)
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 311 (factor)
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 311 (factor)
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 311 (factor)
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 311 (factor)
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 311 (factor)
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 311 (factor)
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '?'                  reduce using rule 311 (factor)
    '?'                  [reduce using rule 320 (primary)]
    '?'                  [reduce using rule 331 (atom)]
    '}'                  reduce using rule 311 (factor)
    '}'                  [reduce using rule 320 (primary)]
    '}'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 311 (factor)

    factor         go to state 313
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 193

  316 power: await_primary '*' . '*' factor

    '*'  shift, and go to state 314


state 194

  324 primary: primary SQUAREBRACKET_START . slices SQUAREBRACKET_END

    NAME                 shift, and go to state 92
    STRING               shift, and go to state 4
    INTEGER              shift, and go to state 5
    NOT                  shift, and go to state 8
    SQUAREBRACKET_START  shift, and go to state 315
    TRUE                 shift, and go to state 16
    NONE                 shift, and go to state 17
    LAMBDA               shift, and go to state 24
    FALSE                shift, and go to state 26
    AWAIT                shift, and go to state 28
    ','                  shift, and go to state 316
    '.'                  shift, and go to state 32
    '+'                  shift, and go to state 34
    '('                  shift, and go to state 93
    '~'                  shift, and go to state 37
    '-'                  shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 326 (slices)
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 224 (assigment_expression)
    '!'                  [reduce using rule 229 (expression)]
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    assigment_expression  go to state 94
    named_expression      go to state 317
    expression            go to state 96
    lambdef               go to state 68
    disjunction           go to state 69
    conjunction           go to state 70
    inversion             go to state 71
    comparison            go to state 72
    bitwise_or            go to state 73
    bitwise_xor           go to state 74
    bitwise_and           go to state 75
    shift_expr            go to state 76
    sum                   go to state 77
    term                  go to state 78
    factor                go to state 79
    power                 go to state 80
    await_primary         go to state 81
    primary               go to state 82
    slices                go to state 318
    slice                 go to state 319
    atom                  go to state 97
    strings               go to state 84


state 195

  321 primary: primary '.' . NAME

    NAME  shift, and go to state 320


state 196

  323 primary: primary '(' . SQUAREBRACKET_START arguments SQUAREBRACKET_END ')'
  351 genexp: '(' . '(' assigment_expression '|' expression '!' ':' EQUAL ')' for_if_clauses ')'

    SQUAREBRACKET_START  shift, and go to state 321
    '('                  shift, and go to state 322


state 197

  322 primary: primary genexp .

    $default  reduce using rule 322 (primary)


state 198

  420 t_primary: atom '&' . t_lookahead

    SQUAREBRACKET_START  shift, and go to state 323
    '.'                  shift, and go to state 324
    '('                  shift, and go to state 325

    t_lookahead  go to state 326


state 199

   37 augassign: '*' . EQUAL
   46          | '*' . '*' EQUAL

    EQUAL  shift, and go to state 327
    '*'    shift, and go to state 328


state 200

   35 augassign: '+' . EQUAL

    EQUAL  shift, and go to state 329


state 201

   42 augassign: '|' . EQUAL

    EQUAL  shift, and go to state 330


state 202

   36 augassign: '-' . EQUAL

    EQUAL  shift, and go to state 331


state 203

   38 augassign: '@' . EQUAL

    EQUAL  shift, and go to state 332


state 204

   39 augassign: '/' . EQUAL
   47          | '/' . '/' EQUAL

    EQUAL  shift, and go to state 333
    '/'    shift, and go to state 334


state 205

   40 augassign: '%' . EQUAL

    EQUAL  shift, and go to state 335


state 206

   41 augassign: '&' . EQUAL

    EQUAL  shift, and go to state 336


state 207

   43 augassign: '^' . EQUAL

    EQUAL  shift, and go to state 337


state 208

   44 augassign: '<' . '<' EQUAL

    '<'  shift, and go to state 338


state 209

   45 augassign: '>' . '>' EQUAL

    '>'  shift, and go to state 339


state 210

   33 assignment: single_target augassign . '~' '(' yield_expr '|' star_expressions ')'

    '~'  shift, and go to state 340


state 211

   31 assignment: single_subscript_attribute_target ')' . ':' expression SQUAREBRACKET_START EQUAL annotated_rhs SQUAREBRACKET_END

    ':'  shift, and go to state 341


state 212

  409 single_subscript_attribute_target: t_primary SQUAREBRACKET_START . slices SQUAREBRACKET_END '!' t_lookahead
  417 t_primary: t_primary SQUAREBRACKET_START . slices SQUAREBRACKET_END '&' t_lookahead

    NAME                 shift, and go to state 92
    STRING               shift, and go to state 4
    INTEGER              shift, and go to state 5
    NOT                  shift, and go to state 8
    SQUAREBRACKET_START  shift, and go to state 315
    TRUE                 shift, and go to state 16
    NONE                 shift, and go to state 17
    LAMBDA               shift, and go to state 24
    FALSE                shift, and go to state 26
    AWAIT                shift, and go to state 28
    ','                  shift, and go to state 316
    '.'                  shift, and go to state 32
    '+'                  shift, and go to state 34
    '('                  shift, and go to state 93
    '~'                  shift, and go to state 37
    '-'                  shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 326 (slices)
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 224 (assigment_expression)
    '!'                  [reduce using rule 229 (expression)]
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    assigment_expression  go to state 94
    named_expression      go to state 317
    expression            go to state 96
    lambdef               go to state 68
    disjunction           go to state 69
    conjunction           go to state 70
    inversion             go to state 71
    comparison            go to state 72
    bitwise_or            go to state 73
    bitwise_xor           go to state 74
    bitwise_and           go to state 75
    shift_expr            go to state 76
    sum                   go to state 77
    term                  go to state 78
    factor                go to state 79
    power                 go to state 80
    await_primary         go to state 81
    primary               go to state 82
    slices                go to state 342
    slice                 go to state 319
    atom                  go to state 97
    strings               go to state 84


state 213

  408 single_subscript_attribute_target: t_primary '.' . NAME '!' t_lookahead
  416 t_primary: t_primary '.' . NAME '&' t_lookahead

    NAME  shift, and go to state 343


state 214

  351 genexp: '(' . '(' assigment_expression '|' expression '!' ':' EQUAL ')' for_if_clauses ')'
  419 t_primary: t_primary '(' . SQUAREBRACKET_START arguments SQUAREBRACKET_END ')' '&' t_lookahead

    SQUAREBRACKET_START  shift, and go to state 344
    '('                  shift, and go to state 322


state 215

  418 t_primary: t_primary genexp . '&' t_lookahead

    '&'  shift, and go to state 345


state 216

   29 assignment: NAME ':' expression . SQUAREBRACKET_START EQUAL annotated_rhs SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 346


state 217

  225 assigment_expression: NAME ':' . EQUAL '~' expression

    EQUAL  shift, and go to state 347


state 218

  344 list: SQUAREBRACKET_START . SQUAREBRACKET_START star_named_expressions SQUAREBRACKET_END SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 348


state 219

  347 tuple: '(' . SQUAREBRACKET_START star_named_expression ',' SQUAREBRACKET_START star_named_expressions SQUAREBRACKET_END SQUAREBRACKET_END ')'

    SQUAREBRACKET_START  shift, and go to state 349


state 220

   67 if_stmt: IF named_expression ':' . block elif_stmt
   68        | IF named_expression ':' . block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    NAME      shift, and go to state 3
    STRING    shift, and go to state 4
    INTEGER   shift, and go to state 5
    NOT       shift, and go to state 8
    GLOBAL    shift, and go to state 9
    YIELD     shift, and go to state 10
    IMPORT    shift, and go to state 11
    RETURN    shift, and go to state 12
    DEL       shift, and go to state 14
    NONLOCAL  shift, and go to state 15
    NEWLINE   shift, and go to state 266
    TRUE      shift, and go to state 16
    NONE      shift, and go to state 17
    CONTINUE  shift, and go to state 21
    RAISE     shift, and go to state 22
    PASS      shift, and go to state 23
    LAMBDA    shift, and go to state 24
    DEF       shift, and go to state 267
    FALSE     shift, and go to state 26
    ASSERT    shift, and go to state 27
    AWAIT     shift, and go to state 28
    BREAK     shift, and go to state 29
    '.'       shift, and go to state 32
    '*'       shift, and go to state 33
    '+'       shift, and go to state 34
    ';'       shift, and go to state 35
    '('       shift, and go to state 268
    '~'       shift, and go to state 37
    '-'       shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 210 (block)
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    ELIF                 reduce using rule 210 (block)
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 415 (t_primary)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 403 (single_target)]
    '*'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 403 (single_target)]
    '+'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '!'                  reduce using rule 213 (star_expressions)
    '!'                  [reduce using rule 217 (star_expression)]
    '!'                  [reduce using rule 229 (expression)]
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '!'                  [reduce using rule 367 (yield_expr)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 407 (single_subscript_attribute_target)
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '|'                  [reduce using rule 403 (single_target)]
    '|'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '~'                  [reduce using rule 403 (single_target)]
    '~'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 403 (single_target)]
    '-'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '@'                  [reduce using rule 403 (single_target)]
    '@'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '/'                  [reduce using rule 403 (single_target)]
    '/'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '%'                  [reduce using rule 403 (single_target)]
    '%'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '&'                  [reduce using rule 403 (single_target)]
    '&'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  [reduce using rule 415 (t_primary)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '^'                  [reduce using rule 403 (single_target)]
    '^'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '<'                  [reduce using rule 403 (single_target)]
    '<'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '>'                  [reduce using rule 403 (single_target)]
    '>'                  [reduce using rule 407 (single_subscript_attribute_target)]
    $default             reduce using rule 287 (bitwise_or)

    simple_stmts                       go to state 269
    simple_stmt                        go to state 42
    assignment                         go to state 44
    global_stmt                        go to state 45
    nonlocal_stmt                      go to state 46
    yield_stmt                         go to state 47
    assert_stmt                        go to state 48
    del_stmt                           go to state 49
    import_stmt                        go to state 50
    import_name                        go to state 51
    return_stmt                        go to state 58
    raise_stmt                         go to state 59
    block                              go to state 350
    star_expressions                   go to state 65
    star_expression                    go to state 66
    expression                         go to state 67
    lambdef                            go to state 68
    disjunction                        go to state 69
    conjunction                        go to state 70
    inversion                          go to state 71
    comparison                         go to state 72
    bitwise_or                         go to state 73
    bitwise_xor                        go to state 74
    bitwise_and                        go to state 75
    shift_expr                         go to state 76
    sum                                go to state 77
    term                               go to state 78
    factor                             go to state 79
    power                              go to state 80
    await_primary                      go to state 81
    primary                            go to state 82
    atom                               go to state 83
    strings                            go to state 84
    yield_expr                         go to state 85
    single_target                      go to state 86
    single_subscript_attribute_target  go to state 87
    t_primary                          go to state 88


state 221

  227 named_expression: expression '!' . ':' EQUAL

    ':'  shift, and go to state 351


state 222

   72 while_stmt: WHILE named_expression ':' . block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    NAME      shift, and go to state 3
    STRING    shift, and go to state 4
    INTEGER   shift, and go to state 5
    NOT       shift, and go to state 8
    GLOBAL    shift, and go to state 9
    YIELD     shift, and go to state 10
    IMPORT    shift, and go to state 11
    RETURN    shift, and go to state 12
    DEL       shift, and go to state 14
    NONLOCAL  shift, and go to state 15
    NEWLINE   shift, and go to state 266
    TRUE      shift, and go to state 16
    NONE      shift, and go to state 17
    CONTINUE  shift, and go to state 21
    RAISE     shift, and go to state 22
    PASS      shift, and go to state 23
    LAMBDA    shift, and go to state 24
    DEF       shift, and go to state 267
    FALSE     shift, and go to state 26
    ASSERT    shift, and go to state 27
    AWAIT     shift, and go to state 28
    BREAK     shift, and go to state 29
    '.'       shift, and go to state 32
    '*'       shift, and go to state 33
    '+'       shift, and go to state 34
    ';'       shift, and go to state 35
    '('       shift, and go to state 268
    '~'       shift, and go to state 37
    '-'       shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 210 (block)
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 415 (t_primary)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 403 (single_target)]
    '*'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 403 (single_target)]
    '+'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '!'                  reduce using rule 213 (star_expressions)
    '!'                  [reduce using rule 217 (star_expression)]
    '!'                  [reduce using rule 229 (expression)]
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '!'                  [reduce using rule 367 (yield_expr)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 407 (single_subscript_attribute_target)
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '|'                  [reduce using rule 403 (single_target)]
    '|'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '~'                  [reduce using rule 403 (single_target)]
    '~'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 403 (single_target)]
    '-'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '@'                  [reduce using rule 403 (single_target)]
    '@'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '/'                  [reduce using rule 403 (single_target)]
    '/'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '%'                  [reduce using rule 403 (single_target)]
    '%'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '&'                  [reduce using rule 403 (single_target)]
    '&'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  [reduce using rule 415 (t_primary)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '^'                  [reduce using rule 403 (single_target)]
    '^'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '<'                  [reduce using rule 403 (single_target)]
    '<'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '>'                  [reduce using rule 403 (single_target)]
    '>'                  [reduce using rule 407 (single_subscript_attribute_target)]
    $default             reduce using rule 287 (bitwise_or)

    simple_stmts                       go to state 269
    simple_stmt                        go to state 42
    assignment                         go to state 44
    global_stmt                        go to state 45
    nonlocal_stmt                      go to state 46
    yield_stmt                         go to state 47
    assert_stmt                        go to state 48
    del_stmt                           go to state 49
    import_stmt                        go to state 50
    import_name                        go to state 51
    return_stmt                        go to state 58
    raise_stmt                         go to state 59
    block                              go to state 352
    star_expressions                   go to state 65
    star_expression                    go to state 66
    expression                         go to state 67
    lambdef                            go to state 68
    disjunction                        go to state 69
    conjunction                        go to state 70
    inversion                          go to state 71
    comparison                         go to state 72
    bitwise_or                         go to state 73
    bitwise_xor                        go to state 74
    bitwise_and                        go to state 75
    shift_expr                         go to state 76
    sum                                go to state 77
    term                               go to state 78
    factor                             go to state 79
    power                              go to state 80
    await_primary                      go to state 81
    primary                            go to state 82
    atom                               go to state 83
    strings                            go to state 84
    yield_expr                         go to state 85
    single_target                      go to state 86
    single_subscript_attribute_target  go to state 87
    t_primary                          go to state 88


state 223

   48 global_stmt: GLOBAL ',' '.' . NAME '+'

    NAME  shift, and go to state 353


state 224

  369 yield_expr: YIELD SQUAREBRACKET_START star_expressions . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 354


state 225

  368 yield_expr: YIELD FROM expression .

    $default  reduce using rule 368 (yield_expr)


state 226

   63 dotted_as_names: ',' '.' . dotted_as_name '+'

    NAME  shift, and go to state 355

    dotted_as_name  go to state 356
    dotted_name     go to state 357


state 227

  410 expression_list: expression . '(' ',' expression ')' '*' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    '('  shift, and go to state 358


state 228

  169 return_stmt: RETURN SQUAREBRACKET_START expression_list . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 359


state 229

  402 star_atom: SQUAREBRACKET_START SQUAREBRACKET_START . star_targets_list_seq SQUAREBRACKET_END SQUAREBRACKET_END

    ','  shift, and go to state 360

    star_targets_list_seq  go to state 361


state 230

  393 star_target: '*' '(' . '!' '*' star_target ')'

    '!'  shift, and go to state 362


state 231

  344 list: SQUAREBRACKET_START . SQUAREBRACKET_START star_named_expressions SQUAREBRACKET_END SQUAREBRACKET_END
  401 star_atom: '(' SQUAREBRACKET_START . star_targets_tuple_seq SQUAREBRACKET_END ')'
  402          | SQUAREBRACKET_START . SQUAREBRACKET_START star_targets_list_seq SQUAREBRACKET_END SQUAREBRACKET_END

    NAME                 shift, and go to state 107
    STRING               shift, and go to state 4
    INTEGER              shift, and go to state 5
    SQUAREBRACKET_START  shift, and go to state 363
    TRUE                 shift, and go to state 16
    NONE                 shift, and go to state 17
    FALSE                shift, and go to state 26
    '.'                  shift, and go to state 32
    '*'                  shift, and go to state 109
    '('                  shift, and go to state 110

    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    SQUAREBRACKET_END    reduce using rule 389 (star_targets_tuple_seq)
    ','                  reduce using rule 392 (star_target)
    ','                  [reduce using rule 395 (target_with_star_atom)]
    '.'                  [reduce using rule 415 (t_primary)]
    '('                  [reduce using rule 392 (star_target)]
    '('                  [reduce using rule 395 (target_with_star_atom)]
    '('                  [reduce using rule 415 (t_primary)]
    '&'                  reduce using rule 331 (atom)
    '&'                  [reduce using rule 415 (t_primary)]
    $default             reduce using rule 331 (atom)

    atom                    go to state 111
    strings                 go to state 84
    star_targets_tuple_seq  go to state 364
    star_target             go to state 365
    target_with_star_atom   go to state 114
    star_atom               go to state 115
    t_primary               go to state 116


state 232

  338 atom: '(' . tuple '|' group '|' genexp ')'
  339     | '(' . list '|' listcomp ')'
  340     | '(' . dict '|' set '|' dictcomp '|' setcomp ')'
  347 tuple: '(' . SQUAREBRACKET_START star_named_expression ',' SQUAREBRACKET_START star_named_expressions SQUAREBRACKET_END SQUAREBRACKET_END ')'
  400 star_atom: '(' . target_with_star_atom ')'
  401          | '(' . SQUAREBRACKET_START star_targets_tuple_seq SQUAREBRACKET_END ')'

    NAME                 shift, and go to state 107
    STRING               shift, and go to state 4
    INTEGER              shift, and go to state 5
    SQUAREBRACKET_START  shift, and go to state 274
    TRUE                 shift, and go to state 16
    NONE                 shift, and go to state 17
    FALSE                shift, and go to state 26
    '.'                  shift, and go to state 32
    '('                  shift, and go to state 232
    '{'                  shift, and go to state 144

    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    '.'                  [reduce using rule 415 (t_primary)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 395 (target_with_star_atom)
    '|'                  reduce using rule 343 (list)
    '&'                  reduce using rule 331 (atom)
    '&'                  [reduce using rule 415 (t_primary)]
    $default             reduce using rule 331 (atom)

    atom                   go to state 111
    strings                go to state 84
    list                   go to state 145
    tuple                  go to state 146
    dict                   go to state 147
    target_with_star_atom  go to state 233
    star_atom              go to state 115
    t_primary              go to state 116


state 233

  400 star_atom: '(' target_with_star_atom . ')'

    ')'  shift, and go to state 366


state 234

   73 for_stmt: FOR star_targets IN . '~' star_expressions ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    '~'  shift, and go to state 367


state 235

  386 star_targets: star_target '!' . ','

    ','  shift, and go to state 368


state 236

  387 star_targets: star_target '(' . ',' star_target ')' '*' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    ','  shift, and go to state 369


state 237

  397 target_with_star_atom: t_primary SQUAREBRACKET_START . slices SQUAREBRACKET_END '!' t_lookahead
  417 t_primary: t_primary SQUAREBRACKET_START . slices SQUAREBRACKET_END '&' t_lookahead

    NAME                 shift, and go to state 92
    STRING               shift, and go to state 4
    INTEGER              shift, and go to state 5
    NOT                  shift, and go to state 8
    SQUAREBRACKET_START  shift, and go to state 315
    TRUE                 shift, and go to state 16
    NONE                 shift, and go to state 17
    LAMBDA               shift, and go to state 24
    FALSE                shift, and go to state 26
    AWAIT                shift, and go to state 28
    ','                  shift, and go to state 316
    '.'                  shift, and go to state 32
    '+'                  shift, and go to state 34
    '('                  shift, and go to state 93
    '~'                  shift, and go to state 37
    '-'                  shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 326 (slices)
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 224 (assigment_expression)
    '!'                  [reduce using rule 229 (expression)]
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    assigment_expression  go to state 94
    named_expression      go to state 317
    expression            go to state 96
    lambdef               go to state 68
    disjunction           go to state 69
    conjunction           go to state 70
    inversion             go to state 71
    comparison            go to state 72
    bitwise_or            go to state 73
    bitwise_xor           go to state 74
    bitwise_and           go to state 75
    shift_expr            go to state 76
    sum                   go to state 77
    term                  go to state 78
    factor                go to state 79
    power                 go to state 80
    await_primary         go to state 81
    primary               go to state 82
    slices                go to state 370
    slice                 go to state 319
    atom                  go to state 97
    strings               go to state 84


state 238

  396 target_with_star_atom: t_primary '.' . NAME '!' t_lookahead
  416 t_primary: t_primary '.' . NAME '&' t_lookahead

    NAME  shift, and go to state 371


state 239

  411 del_targets: ',' '.' . del_target '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    '.'      shift, and go to state 32
    '('      shift, and go to state 93

    SQUAREBRACKET_START  reduce using rule 415 (t_primary)
    '.'                  [reduce using rule 415 (t_primary)]
    '+'                  reduce using rule 412 (del_target)
    '('                  [reduce using rule 415 (t_primary)]
    '&'                  reduce using rule 331 (atom)
    '&'                  [reduce using rule 415 (t_primary)]
    $default             reduce using rule 331 (atom)

    atom        go to state 111
    strings     go to state 84
    del_target  go to state 372
    t_primary   go to state 373


state 240

   52 del_stmt: DEL del_targets '&' . '(' ';' '|' NEWLINE ')'

    '('  shift, and go to state 374


state 241

   49 nonlocal_stmt: NONLOCAL ',' '.' . NAME '+'

    NAME  shift, and go to state 375


state 242

  209 class_def_raw: CLASS NAME SQUAREBRACKET_START . '(' SQUAREBRACKET_START arguments SQUAREBRACKET_END ')' SQUAREBRACKET_END ':' block

    '('  shift, and go to state 376


state 243

   76 with_stmt: WITH ',' '.' . with_item '+' ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    AS                   reduce using rule 229 (expression)
    AS                   [reduce using rule 260 (disjunction)]
    AS                   [reduce using rule 263 (conjunction)]
    AS                   [reduce using rule 266 (inversion)]
    AS                   [reduce using rule 287 (bitwise_or)]
    AS                   [reduce using rule 290 (bitwise_xor)]
    AS                   [reduce using rule 293 (bitwise_and)]
    AS                   [reduce using rule 296 (shift_expr)]
    AS                   [reduce using rule 300 (sum)]
    AS                   [reduce using rule 304 (term)]
    AS                   [reduce using rule 311 (factor)]
    AS                   [reduce using rule 320 (primary)]
    AS                   [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 229 (expression)]
    '+'                  [reduce using rule 260 (disjunction)]
    '+'                  [reduce using rule 263 (conjunction)]
    '+'                  [reduce using rule 266 (inversion)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    with_item      go to state 377
    expression     go to state 378
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 244

   75 with_stmt: WITH '(' ',' . '.' with_item '+' ',' '?' ')' ':' block

    '.'  shift, and go to state 379


state 245

  222 star_named_expression: '*' bitwise_or .
  288 bitwise_or: bitwise_or . '|' bitwise_xor

    '|'  shift, and go to state 172

    $default  reduce using rule 222 (star_named_expression)


state 246

   87 match_stmt: MATCH subject_expr ':' . NEWLINE INDENT case_block '+' DEDENT

    NEWLINE  shift, and go to state 380


state 247

   89 subject_expr: star_named_expression ',' . star_named_expressions '?'

    ','  shift, and go to state 381

    star_named_expressions  go to state 382


state 248

  170 raise_stmt: RAISE expression SQUAREBRACKET_START . FROM expression SQUAREBRACKET_END

    FROM  shift, and go to state 383


state 249

  259 lambda_param: NAME .

    $default  reduce using rule 259 (lambda_param)


state 250

  246 lambda_star_etc: '*' . lambda_param_no_default lambda_param_maybe_default '*' SQUAREBRACKET_START lambda_kwds SQUAREBRACKET_END
  247                | '*' . ',' lambda_param_maybe_default '+' SQUAREBRACKET_START lambda_kwds SQUAREBRACKET_END
  249 lambda_kwds: '*' . '*' lambda_param_no_default

    NAME  shift, and go to state 249
    ','   shift, and go to state 384
    '*'   shift, and go to state 385

    NAME  [reduce using rule 250 (lambda_param_no_default)]
    '*'   [reduce using rule 250 (lambda_param_no_default)]

    lambda_param_no_default  go to state 386
    lambda_param             go to state 387


state 251

  233 lambdef: LAMBDA SQUAREBRACKET_START lambda_params . SQUAREBRACKET_END ':' expression

    SQUAREBRACKET_END  shift, and go to state 388


state 252

  234 lambda_params: lambda_parameters .

    $default  reduce using rule 234 (lambda_params)


state 253

  236 lambda_parameters: lambda_slash_no_default . lambda_param_no_default '*' lambda_param_with_default '*' SQUAREBRACKET_START

    NAME  shift, and go to state 249

    $default  reduce using rule 250 (lambda_param_no_default)

    lambda_param_no_default  go to state 389
    lambda_param             go to state 387


state 254

  237 lambda_parameters: lambda_slash_with_default . lambda_param_with_default '*' SQUAREBRACKET_START lambda_star_etc SQUAREBRACKET_END

    NAME  shift, and go to state 249

    $default  reduce using rule 253 (lambda_param_with_default)

    lambda_param_with_default  go to state 390
    lambda_param               go to state 391


state 255

  240 lambda_parameters: lambda_star_etc .

    $default  reduce using rule 240 (lambda_parameters)


state 256

  248 lambda_star_etc: lambda_kwds .

    $default  reduce using rule 248 (lambda_star_etc)


state 257

  238 lambda_parameters: lambda_param_no_default . '+' lambda_param_with_default '*' SQUAREBRACKET_START lambda_star_etc SQUAREBRACKET_END
  241 lambda_slash_no_default: lambda_param_no_default . '+' '/' ','
  242                        | lambda_param_no_default . '+' '/' '&' ':'
  243 lambda_slash_with_default: lambda_param_no_default . '*' lambda_param_with_default '+' '/' ','
  244                          | lambda_param_no_default . '*' lambda_param_with_default '+' '/' '&' ':'

    '*'  shift, and go to state 392
    '+'  shift, and go to state 393


state 258

  239 lambda_parameters: lambda_param_with_default . '+' SQUAREBRACKET_START lambda_star_etc SQUAREBRACKET_END

    '+'  shift, and go to state 394


state 259

  251 lambda_param_no_default: lambda_param . ','
  252                        | lambda_param . '&' ':'
  254 lambda_param_with_default: lambda_param . default ','
  255                          | lambda_param . default '&' ':'

    EQUAL  shift, and go to state 395
    ','    shift, and go to state 396
    '&'    shift, and go to state 397

    default  go to state 398


state 260

  174 function_def_raw: DEF NAME '(' . SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    SQUAREBRACKET_START  shift, and go to state 399


state 261

   51 assert_stmt: ASSERT expression SQUAREBRACKET_START . ',' expression SQUAREBRACKET_END

    ','  shift, and go to state 400


state 262

   74 for_stmt: ASYNC FOR star_targets . IN '~' star_expressions ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    IN  shift, and go to state 401


state 263

   78 with_stmt: ASYNC WITH ',' . '.' with_item '+' ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block

    '.'  shift, and go to state 402


state 264

   77 with_stmt: ASYNC WITH '(' . ',' '.' with_item '+' ',' '?' ')' ':' block

    ','  shift, and go to state 403


state 265

  175 function_def_raw: ASYNC DEF NAME . '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    '('  shift, and go to state 404


state 266

  211 block: NEWLINE . INDENT statements DEDENT

    INDENT  shift, and go to state 405


state 267

    5 simple_stmts: DEF .

    $default  reduce using rule 5 (simple_stmts)


state 268

   30 assignment: '(' . '(' single_target ')'
   32           | '(' . star_targets EQUAL ')' '+' '(' yield_expr '|' star_expressions ')' '!' EQUAL SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END
  338 atom: '(' . tuple '|' group '|' genexp ')'
  339     | '(' . list '|' listcomp ')'
  340     | '(' . dict '|' set '|' dictcomp '|' setcomp ')'
  406 single_target: '(' . single_target ')'

    NAME                 shift, and go to state 140
    STRING               shift, and go to state 4
    INTEGER              shift, and go to state 5
    SQUAREBRACKET_START  shift, and go to state 141
    TRUE                 shift, and go to state 16
    NONE                 shift, and go to state 17
    FALSE                shift, and go to state 26
    '.'                  shift, and go to state 32
    '*'                  shift, and go to state 109
    '('                  shift, and go to state 142
    '{'                  shift, and go to state 144

    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    EQUAL                reduce using rule 385 (star_targets)
    '.'                  [reduce using rule 415 (t_primary)]
    '!'                  reduce using rule 392 (star_target)
    '!'                  [reduce using rule 395 (target_with_star_atom)]
    '('                  [reduce using rule 392 (star_target)]
    '('                  [reduce using rule 395 (target_with_star_atom)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 403 (single_target)
    ')'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '|'                  reduce using rule 343 (list)
    '&'                  reduce using rule 331 (atom)
    '&'                  [reduce using rule 415 (t_primary)]
    $default             reduce using rule 331 (atom)

    atom                               go to state 111
    strings                            go to state 84
    list                               go to state 145
    tuple                              go to state 146
    dict                               go to state 147
    star_targets                       go to state 148
    star_target                        go to state 113
    target_with_star_atom              go to state 114
    star_atom                          go to state 115
    single_target                      go to state 149
    single_subscript_attribute_target  go to state 150
    t_primary                          go to state 151


state 269

  212 block: simple_stmts .

    $default  reduce using rule 212 (block)


state 270

   81 try_stmt: TRY ':' block . finally_block
   82         | TRY ':' block . except_block '+' SQUAREBRACKET_START else_block SQUAREBRACKET_END SQUAREBRACKET_START finally_block SQUAREBRACKET_END

    FINALLY  shift, and go to state 406
    EXPECT   shift, and go to state 407

    $default  reduce using rule 83 (except_block)

    except_block   go to state 408
    finally_block  go to state 409


state 271

  341 atom: '.' '.' '.' .

    $default  reduce using rule 341 (atom)


state 272

    7 simple_stmts: ';' '.' simple_stmt . '+' SQUAREBRACKET_START ';' SQUAREBRACKET_END NEWLINE

    '+'  shift, and go to state 410


state 273

  344 list: SQUAREBRACKET_START SQUAREBRACKET_START . star_named_expressions SQUAREBRACKET_END SQUAREBRACKET_END
  402 star_atom: SQUAREBRACKET_START SQUAREBRACKET_START . star_targets_list_seq SQUAREBRACKET_END SQUAREBRACKET_END

    ','  shift, and go to state 411

    star_named_expressions  go to state 412
    star_targets_list_seq   go to state 361


state 274

  344 list: SQUAREBRACKET_START . SQUAREBRACKET_START star_named_expressions SQUAREBRACKET_END SQUAREBRACKET_END
  347 tuple: '(' SQUAREBRACKET_START . star_named_expression ',' SQUAREBRACKET_START star_named_expressions SQUAREBRACKET_END SQUAREBRACKET_END ')'
  401 star_atom: '(' SQUAREBRACKET_START . star_targets_tuple_seq SQUAREBRACKET_END ')'
  402          | SQUAREBRACKET_START . SQUAREBRACKET_START star_targets_list_seq SQUAREBRACKET_END SQUAREBRACKET_END

    NAME                 shift, and go to state 413
    STRING               shift, and go to state 4
    INTEGER              shift, and go to state 5
    NOT                  shift, and go to state 8
    SQUAREBRACKET_START  shift, and go to state 363
    TRUE                 shift, and go to state 16
    NONE                 shift, and go to state 17
    LAMBDA               shift, and go to state 24
    FALSE                shift, and go to state 26
    AWAIT                shift, and go to state 28
    '.'                  shift, and go to state 32
    '*'                  shift, and go to state 414
    '+'                  shift, and go to state 34
    '('                  shift, and go to state 110
    '~'                  shift, and go to state 37
    '-'                  shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    SQUAREBRACKET_END    reduce using rule 389 (star_targets_tuple_seq)
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 221 (star_named_expression)
    ','                  [reduce using rule 224 (assigment_expression)]
    ','                  [reduce using rule 392 (star_target)]
    ','                  [reduce using rule 395 (target_with_star_atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 415 (t_primary)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 229 (expression)
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 392 (star_target)]
    '('                  [reduce using rule 395 (target_with_star_atom)]
    '('                  [reduce using rule 415 (t_primary)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '&'                  [reduce using rule 415 (t_primary)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    star_named_expression   go to state 415
    assigment_expression    go to state 94
    named_expression        go to state 416
    expression              go to state 96
    lambdef                 go to state 68
    disjunction             go to state 69
    conjunction             go to state 70
    inversion               go to state 71
    comparison              go to state 72
    bitwise_or              go to state 73
    bitwise_xor             go to state 74
    bitwise_and             go to state 75
    shift_expr              go to state 76
    sum                     go to state 77
    term                    go to state 78
    factor                  go to state 79
    power                   go to state 80
    await_primary           go to state 81
    primary                 go to state 82
    atom                    go to state 83
    strings                 go to state 84
    star_targets_tuple_seq  go to state 364
    star_target             go to state 365
    target_with_star_atom   go to state 114
    star_atom               go to state 115
    t_primary               go to state 116


state 275

  338 atom: '(' . tuple '|' group '|' genexp ')'
  339     | '(' . list '|' listcomp ')'
  340     | '(' . dict '|' set '|' dictcomp '|' setcomp ')'
  347 tuple: '(' . SQUAREBRACKET_START star_named_expression ',' SQUAREBRACKET_START star_named_expressions SQUAREBRACKET_END SQUAREBRACKET_END ')'
  400 star_atom: '(' . target_with_star_atom ')'
  401          | '(' . SQUAREBRACKET_START star_targets_tuple_seq SQUAREBRACKET_END ')'
  406 single_target: '(' . single_target ')'

    NAME                 shift, and go to state 140
    STRING               shift, and go to state 4
    INTEGER              shift, and go to state 5
    SQUAREBRACKET_START  shift, and go to state 274
    TRUE                 shift, and go to state 16
    NONE                 shift, and go to state 17
    FALSE                shift, and go to state 26
    '.'                  shift, and go to state 32
    '('                  shift, and go to state 275
    '{'                  shift, and go to state 144

    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    '.'                  [reduce using rule 415 (t_primary)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 395 (target_with_star_atom)
    ')'                  [reduce using rule 403 (single_target)]
    ')'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '|'                  reduce using rule 343 (list)
    '&'                  reduce using rule 331 (atom)
    '&'                  [reduce using rule 415 (t_primary)]
    $default             reduce using rule 331 (atom)

    atom                               go to state 111
    strings                            go to state 84
    list                               go to state 145
    tuple                              go to state 146
    dict                               go to state 147
    target_with_star_atom              go to state 233
    star_atom                          go to state 115
    single_target                      go to state 149
    single_subscript_attribute_target  go to state 150
    t_primary                          go to state 151


state 276

   30 assignment: '(' '(' single_target . ')'
  406 single_target: '(' single_target . ')'

    ')'  shift, and go to state 417


state 277

  205 decorators: '(' '@' named_expression . NEWLINE ')' '+'

    NEWLINE  shift, and go to state 418


state 278

  355 dict: '{' SQUAREBRACKET_START . double_starred_kvpairs SQUAREBRACKET_END '}'

    ','  shift, and go to state 419

    double_starred_kvpairs  go to state 420


state 279

  339 atom: '(' list '|' . listcomp ')'

    SQUAREBRACKET_START  shift, and go to state 421

    $default  reduce using rule 345 (listcomp)

    listcomp  go to state 422


state 280

  338 atom: '(' tuple '|' . group '|' genexp ')'

    '('  shift, and go to state 423

    $default  reduce using rule 348 (group)

    group  go to state 424


state 281

  340 atom: '(' dict '|' . set '|' dictcomp '|' setcomp ')'

    '{'  shift, and go to state 425

    set  go to state 426


state 282

   32 assignment: '(' star_targets EQUAL . ')' '+' '(' yield_expr '|' star_expressions ')' '!' EQUAL SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END

    ')'  shift, and go to state 427


state 283

  406 single_target: '(' single_target ')' .

    $default  reduce using rule 406 (single_target)


state 284

  397 target_with_star_atom: t_primary SQUAREBRACKET_START . slices SQUAREBRACKET_END '!' t_lookahead
  409 single_subscript_attribute_target: t_primary SQUAREBRACKET_START . slices SQUAREBRACKET_END '!' t_lookahead
  417 t_primary: t_primary SQUAREBRACKET_START . slices SQUAREBRACKET_END '&' t_lookahead

    NAME                 shift, and go to state 92
    STRING               shift, and go to state 4
    INTEGER              shift, and go to state 5
    NOT                  shift, and go to state 8
    SQUAREBRACKET_START  shift, and go to state 315
    TRUE                 shift, and go to state 16
    NONE                 shift, and go to state 17
    LAMBDA               shift, and go to state 24
    FALSE                shift, and go to state 26
    AWAIT                shift, and go to state 28
    ','                  shift, and go to state 316
    '.'                  shift, and go to state 32
    '+'                  shift, and go to state 34
    '('                  shift, and go to state 93
    '~'                  shift, and go to state 37
    '-'                  shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 326 (slices)
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 224 (assigment_expression)
    '!'                  [reduce using rule 229 (expression)]
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    assigment_expression  go to state 94
    named_expression      go to state 317
    expression            go to state 96
    lambdef               go to state 68
    disjunction           go to state 69
    conjunction           go to state 70
    inversion             go to state 71
    comparison            go to state 72
    bitwise_or            go to state 73
    bitwise_xor           go to state 74
    bitwise_and           go to state 75
    shift_expr            go to state 76
    sum                   go to state 77
    term                  go to state 78
    factor                go to state 79
    power                 go to state 80
    await_primary         go to state 81
    primary               go to state 82
    slices                go to state 428
    slice                 go to state 319
    atom                  go to state 97
    strings               go to state 84


state 285

  396 target_with_star_atom: t_primary '.' . NAME '!' t_lookahead
  408 single_subscript_attribute_target: t_primary '.' . NAME '!' t_lookahead
  416 t_primary: t_primary '.' . NAME '&' t_lookahead

    NAME  shift, and go to state 429


state 286

    6 simple_stmts: simple_stmt '!' ';' . NEWLINE

    NEWLINE  shift, and go to state 430


state 287

   56 import_from: FROM . '(' '.' '|' '.' '.' '.' ')' '*' dotted_name IMPORT import_from_targets
   57            | FROM . '(' '.' '|' '.' '.' '.' ')' '+' IMPORT import_from_targets

    '('  shift, and go to state 431


state 288

   53 import_stmt: import_name '|' import_from .

    $default  reduce using rule 53 (import_stmt)


state 289

  214 star_expressions: star_expression '(' ',' . star_expression ')' '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '*'      shift, and go to state 33
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 217 (star_expression)
    ')'                  [reduce using rule 229 (expression)]
    ')'                  [reduce using rule 260 (disjunction)]
    ')'                  [reduce using rule 263 (conjunction)]
    ')'                  [reduce using rule 266 (inversion)]
    ')'                  [reduce using rule 287 (bitwise_or)]
    ')'                  [reduce using rule 290 (bitwise_xor)]
    ')'                  [reduce using rule 293 (bitwise_and)]
    ')'                  [reduce using rule 296 (shift_expr)]
    ')'                  [reduce using rule 300 (sum)]
    ')'                  [reduce using rule 304 (term)]
    ')'                  [reduce using rule 311 (factor)]
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    star_expression  go to state 432
    expression       go to state 67
    lambdef          go to state 68
    disjunction      go to state 69
    conjunction      go to state 70
    inversion        go to state 71
    comparison       go to state 72
    bitwise_or       go to state 73
    bitwise_xor      go to state 74
    bitwise_and      go to state 75
    shift_expr       go to state 76
    sum              go to state 77
    term             go to state 78
    factor           go to state 79
    power            go to state 80
    await_primary    go to state 81
    primary          go to state 82
    atom             go to state 97
    strings          go to state 84


state 290

  230 expression: disjunction IF disjunction . ELSE expression

    ELSE  shift, and go to state 433


state 291

  261 disjunction: conjunction '(' OR . conjunction ')' '+'

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 263 (conjunction)
    ')'                  [reduce using rule 266 (inversion)]
    ')'                  [reduce using rule 287 (bitwise_or)]
    ')'                  [reduce using rule 290 (bitwise_xor)]
    ')'                  [reduce using rule 293 (bitwise_and)]
    ')'                  [reduce using rule 296 (shift_expr)]
    ')'                  [reduce using rule 300 (sum)]
    ')'                  [reduce using rule 304 (term)]
    ')'                  [reduce using rule 311 (factor)]
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    conjunction    go to state 434
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 292

  264 conjunction: inversion '(' AND . inversion ')' '+'

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 266 (inversion)
    ')'                  [reduce using rule 287 (bitwise_or)]
    ')'                  [reduce using rule 290 (bitwise_xor)]
    ')'                  [reduce using rule 293 (bitwise_and)]
    ')'                  [reduce using rule 296 (shift_expr)]
    ')'                  [reduce using rule 300 (sum)]
    ')'                  [reduce using rule 304 (term)]
    ')'                  [reduce using rule 311 (factor)]
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    inversion      go to state 435
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 293

  283 notin_bitwise_or: NOT IN . bitwise_or

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 296 (shift_expr)
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 304 (term)

    bitwise_or     go to state 436
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 294

  284 in_bitwise_or: IN bitwise_or .
  288 bitwise_or: bitwise_or . '|' bitwise_xor

    '|'  shift, and go to state 172

    $default  reduce using rule 284 (in_bitwise_or)


state 295

  279 eq_bitwise_or: DOUBLEEQUAL bitwise_or .
  288 bitwise_or: bitwise_or . '|' bitwise_xor

    '|'  shift, and go to state 172

    $default  reduce using rule 279 (eq_bitwise_or)


state 296

  285 isnot_bitwise_or: IS NOT . bitwise_or

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 296 (shift_expr)
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 304 (term)

    bitwise_or     go to state 437
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 297

  286 is_bitwise_or: IS bitwise_or .
  288 bitwise_or: bitwise_or . '|' bitwise_xor

    '|'  shift, and go to state 172

    $default  reduce using rule 286 (is_bitwise_or)


state 298

  280 noteq_bitwise_or: '(' '!' . EQUAL ')' bitwise_or

    EQUAL  shift, and go to state 438


state 299

  288 bitwise_or: bitwise_or '|' bitwise_xor .
  291 bitwise_xor: bitwise_xor . '^' bitwise_and

    '^'  shift, and go to state 183

    $default  reduce using rule 288 (bitwise_or)


state 300

  281 gte_bitwise_or: '>' EQUAL . bitwise_or

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 296 (shift_expr)
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 304 (term)

    bitwise_or     go to state 439
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 301

  282 gt_bitwise_or: '>' bitwise_or .
  288 bitwise_or: bitwise_or . '|' bitwise_xor

    '|'  shift, and go to state 172

    $default  reduce using rule 282 (gt_bitwise_or)


state 302

  269 comparison: bitwise_or compare_op_bitwise_or_pair '+' .

    $default  reduce using rule 269 (comparison)


state 303

  291 bitwise_xor: bitwise_xor '^' bitwise_and .
  294 bitwise_and: bitwise_and . '&' shift_expr

    '&'  shift, and go to state 184

    '&'       [reduce using rule 291 (bitwise_xor)]
    $default  reduce using rule 291 (bitwise_xor)


state 304

  294 bitwise_and: bitwise_and '&' shift_expr .
  297 shift_expr: shift_expr . '<' '<' sum
  298           | shift_expr . '>' '>' sum

    '<'  shift, and go to state 185
    '>'  shift, and go to state 186

    '>'       [reduce using rule 294 (bitwise_and)]
    $default  reduce using rule 294 (bitwise_and)


state 305

  297 shift_expr: shift_expr '<' '<' . sum

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 300 (sum)
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    ELSE                 reduce using rule 300 (sum)
    ELSE                 [reduce using rule 304 (term)]
    ELSE                 [reduce using rule 311 (factor)]
    ELSE                 [reduce using rule 320 (primary)]
    ELSE                 [reduce using rule 331 (atom)]
    NOT                  reduce using rule 300 (sum)
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 300 (sum)
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 300 (sum)
    SQUAREBRACKET_START  [reduce using rule 304 (term)]
    SQUAREBRACKET_START  [reduce using rule 311 (factor)]
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 300 (sum)
    SQUAREBRACKET_END    [reduce using rule 304 (term)]
    SQUAREBRACKET_END    [reduce using rule 311 (factor)]
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 300 (sum)
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    AS                   reduce using rule 300 (sum)
    AS                   [reduce using rule 304 (term)]
    AS                   [reduce using rule 311 (factor)]
    AS                   [reduce using rule 320 (primary)]
    AS                   [reduce using rule 331 (atom)]
    TYPE_COMMENT         reduce using rule 300 (sum)
    TYPE_COMMENT         [reduce using rule 304 (term)]
    TYPE_COMMENT         [reduce using rule 311 (factor)]
    TYPE_COMMENT         [reduce using rule 320 (primary)]
    TYPE_COMMENT         [reduce using rule 331 (atom)]
    FOR                  reduce using rule 300 (sum)
    FOR                  [reduce using rule 304 (term)]
    FOR                  [reduce using rule 311 (factor)]
    FOR                  [reduce using rule 320 (primary)]
    FOR                  [reduce using rule 331 (atom)]
    NEWLINE              reduce using rule 300 (sum)
    NEWLINE              [reduce using rule 304 (term)]
    NEWLINE              [reduce using rule 311 (factor)]
    NEWLINE              [reduce using rule 320 (primary)]
    NEWLINE              [reduce using rule 331 (atom)]
    IS                   reduce using rule 300 (sum)
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ASYNC                reduce using rule 300 (sum)
    ASYNC                [reduce using rule 304 (term)]
    ASYNC                [reduce using rule 311 (factor)]
    ASYNC                [reduce using rule 320 (primary)]
    ASYNC                [reduce using rule 331 (atom)]
    ','                  reduce using rule 300 (sum)
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 300 (sum)
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 300 (sum)
    ':'                  [reduce using rule 304 (term)]
    ':'                  [reduce using rule 311 (factor)]
    ':'                  [reduce using rule 320 (primary)]
    ':'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 300 (sum)
    ')'                  [reduce using rule 304 (term)]
    ')'                  [reduce using rule 311 (factor)]
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 300 (sum)
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 300 (sum)
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 300 (sum)
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 300 (sum)
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 300 (sum)
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '?'                  reduce using rule 300 (sum)
    '?'                  [reduce using rule 304 (term)]
    '?'                  [reduce using rule 311 (factor)]
    '?'                  [reduce using rule 320 (primary)]
    '?'                  [reduce using rule 331 (atom)]
    '}'                  reduce using rule 300 (sum)
    '}'                  [reduce using rule 304 (term)]
    '}'                  [reduce using rule 311 (factor)]
    '}'                  [reduce using rule 320 (primary)]
    '}'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 300 (sum)

    sum            go to state 440
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 306

  298 shift_expr: shift_expr '>' '>' . sum

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 300 (sum)
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    ELSE                 reduce using rule 300 (sum)
    ELSE                 [reduce using rule 304 (term)]
    ELSE                 [reduce using rule 311 (factor)]
    ELSE                 [reduce using rule 320 (primary)]
    ELSE                 [reduce using rule 331 (atom)]
    NOT                  reduce using rule 300 (sum)
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 300 (sum)
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 300 (sum)
    SQUAREBRACKET_START  [reduce using rule 304 (term)]
    SQUAREBRACKET_START  [reduce using rule 311 (factor)]
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 300 (sum)
    SQUAREBRACKET_END    [reduce using rule 304 (term)]
    SQUAREBRACKET_END    [reduce using rule 311 (factor)]
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 300 (sum)
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    AS                   reduce using rule 300 (sum)
    AS                   [reduce using rule 304 (term)]
    AS                   [reduce using rule 311 (factor)]
    AS                   [reduce using rule 320 (primary)]
    AS                   [reduce using rule 331 (atom)]
    TYPE_COMMENT         reduce using rule 300 (sum)
    TYPE_COMMENT         [reduce using rule 304 (term)]
    TYPE_COMMENT         [reduce using rule 311 (factor)]
    TYPE_COMMENT         [reduce using rule 320 (primary)]
    TYPE_COMMENT         [reduce using rule 331 (atom)]
    FOR                  reduce using rule 300 (sum)
    FOR                  [reduce using rule 304 (term)]
    FOR                  [reduce using rule 311 (factor)]
    FOR                  [reduce using rule 320 (primary)]
    FOR                  [reduce using rule 331 (atom)]
    NEWLINE              reduce using rule 300 (sum)
    NEWLINE              [reduce using rule 304 (term)]
    NEWLINE              [reduce using rule 311 (factor)]
    NEWLINE              [reduce using rule 320 (primary)]
    NEWLINE              [reduce using rule 331 (atom)]
    IS                   reduce using rule 300 (sum)
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ASYNC                reduce using rule 300 (sum)
    ASYNC                [reduce using rule 304 (term)]
    ASYNC                [reduce using rule 311 (factor)]
    ASYNC                [reduce using rule 320 (primary)]
    ASYNC                [reduce using rule 331 (atom)]
    ','                  reduce using rule 300 (sum)
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 300 (sum)
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 300 (sum)
    ':'                  [reduce using rule 304 (term)]
    ':'                  [reduce using rule 311 (factor)]
    ':'                  [reduce using rule 320 (primary)]
    ':'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 300 (sum)
    ')'                  [reduce using rule 304 (term)]
    ')'                  [reduce using rule 311 (factor)]
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 300 (sum)
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 300 (sum)
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 300 (sum)
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 300 (sum)
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 300 (sum)
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '?'                  reduce using rule 300 (sum)
    '?'                  [reduce using rule 304 (term)]
    '?'                  [reduce using rule 311 (factor)]
    '?'                  [reduce using rule 320 (primary)]
    '?'                  [reduce using rule 331 (atom)]
    '}'                  reduce using rule 300 (sum)
    '}'                  [reduce using rule 304 (term)]
    '}'                  [reduce using rule 311 (factor)]
    '}'                  [reduce using rule 320 (primary)]
    '}'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 300 (sum)

    sum            go to state 441
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 307

  301 sum: sum '+' term .
  305 term: term . '*' factor
  306     | term . '/' factor
  307     | term . '/' '/' factor
  308     | term . '%' factor
  309     | term . '@' factor

    '*'  shift, and go to state 189
    '@'  shift, and go to state 190
    '/'  shift, and go to state 191
    '%'  shift, and go to state 192

    $default  reduce using rule 301 (sum)


state 308

  302 sum: sum '-' term .
  305 term: term . '*' factor
  306     | term . '/' factor
  307     | term . '/' '/' factor
  308     | term . '%' factor
  309     | term . '@' factor

    '*'  shift, and go to state 189
    '@'  shift, and go to state 190
    '/'  shift, and go to state 191
    '%'  shift, and go to state 192

    $default  reduce using rule 302 (sum)


state 309

  305 term: term '*' factor .

    $default  reduce using rule 305 (term)


state 310

  309 term: term '@' factor .

    $default  reduce using rule 309 (term)


state 311

  307 term: term '/' '/' . factor

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 311 (factor)
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    ELSE                 reduce using rule 311 (factor)
    ELSE                 [reduce using rule 320 (primary)]
    ELSE                 [reduce using rule 331 (atom)]
    NOT                  reduce using rule 311 (factor)
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 311 (factor)
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 311 (factor)
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 311 (factor)
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 311 (factor)
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    AS                   reduce using rule 311 (factor)
    AS                   [reduce using rule 320 (primary)]
    AS                   [reduce using rule 331 (atom)]
    TYPE_COMMENT         reduce using rule 311 (factor)
    TYPE_COMMENT         [reduce using rule 320 (primary)]
    TYPE_COMMENT         [reduce using rule 331 (atom)]
    FOR                  reduce using rule 311 (factor)
    FOR                  [reduce using rule 320 (primary)]
    FOR                  [reduce using rule 331 (atom)]
    NEWLINE              reduce using rule 311 (factor)
    NEWLINE              [reduce using rule 320 (primary)]
    NEWLINE              [reduce using rule 331 (atom)]
    IS                   reduce using rule 311 (factor)
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ASYNC                reduce using rule 311 (factor)
    ASYNC                [reduce using rule 320 (primary)]
    ASYNC                [reduce using rule 331 (atom)]
    ','                  reduce using rule 311 (factor)
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 311 (factor)
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 311 (factor)
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 311 (factor)
    ':'                  [reduce using rule 320 (primary)]
    ':'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 311 (factor)
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 311 (factor)
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 311 (factor)
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 311 (factor)
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 311 (factor)
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 311 (factor)
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 311 (factor)
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 311 (factor)
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 311 (factor)
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '?'                  reduce using rule 311 (factor)
    '?'                  [reduce using rule 320 (primary)]
    '?'                  [reduce using rule 331 (atom)]
    '}'                  reduce using rule 311 (factor)
    '}'                  [reduce using rule 320 (primary)]
    '}'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 311 (factor)

    factor         go to state 442
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 312

  306 term: term '/' factor .

    $default  reduce using rule 306 (term)


state 313

  308 term: term '%' factor .

    $default  reduce using rule 308 (term)


state 314

  316 power: await_primary '*' '*' . factor

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 311 (factor)
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    ELSE                 reduce using rule 311 (factor)
    ELSE                 [reduce using rule 320 (primary)]
    ELSE                 [reduce using rule 331 (atom)]
    NOT                  reduce using rule 311 (factor)
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 311 (factor)
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 311 (factor)
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 311 (factor)
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 311 (factor)
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    AS                   reduce using rule 311 (factor)
    AS                   [reduce using rule 320 (primary)]
    AS                   [reduce using rule 331 (atom)]
    TYPE_COMMENT         reduce using rule 311 (factor)
    TYPE_COMMENT         [reduce using rule 320 (primary)]
    TYPE_COMMENT         [reduce using rule 331 (atom)]
    FOR                  reduce using rule 311 (factor)
    FOR                  [reduce using rule 320 (primary)]
    FOR                  [reduce using rule 331 (atom)]
    NEWLINE              reduce using rule 311 (factor)
    NEWLINE              [reduce using rule 320 (primary)]
    NEWLINE              [reduce using rule 331 (atom)]
    IS                   reduce using rule 311 (factor)
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ASYNC                reduce using rule 311 (factor)
    ASYNC                [reduce using rule 320 (primary)]
    ASYNC                [reduce using rule 331 (atom)]
    ','                  reduce using rule 311 (factor)
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 311 (factor)
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 311 (factor)
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 311 (factor)
    ':'                  [reduce using rule 320 (primary)]
    ':'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 311 (factor)
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 311 (factor)
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 311 (factor)
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 311 (factor)
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 311 (factor)
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 311 (factor)
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 311 (factor)
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 311 (factor)
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 311 (factor)
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '?'                  reduce using rule 311 (factor)
    '?'                  [reduce using rule 320 (primary)]
    '?'                  [reduce using rule 331 (atom)]
    '}'                  reduce using rule 311 (factor)
    '}'                  [reduce using rule 320 (primary)]
    '}'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 311 (factor)

    factor         go to state 443
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 315

  329 slice: SQUAREBRACKET_START . expression SQUAREBRACKET_END ':' SQUAREBRACKET_START expression SQUAREBRACKET_END SQUAREBRACKET_START ':' SQUAREBRACKET_START expression SQUAREBRACKET_END SQUAREBRACKET_END

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 229 (expression)
    SQUAREBRACKET_END    [reduce using rule 260 (disjunction)]
    SQUAREBRACKET_END    [reduce using rule 263 (conjunction)]
    SQUAREBRACKET_END    [reduce using rule 266 (inversion)]
    SQUAREBRACKET_END    [reduce using rule 287 (bitwise_or)]
    SQUAREBRACKET_END    [reduce using rule 290 (bitwise_xor)]
    SQUAREBRACKET_END    [reduce using rule 293 (bitwise_and)]
    SQUAREBRACKET_END    [reduce using rule 296 (shift_expr)]
    SQUAREBRACKET_END    [reduce using rule 300 (sum)]
    SQUAREBRACKET_END    [reduce using rule 304 (term)]
    SQUAREBRACKET_END    [reduce using rule 311 (factor)]
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression     go to state 444
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 316

  328 slices: ',' . '.' slice '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    '.'  shift, and go to state 445


state 317

  330 slice: named_expression .

    $default  reduce using rule 330 (slice)


state 318

  324 primary: primary SQUAREBRACKET_START slices . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 446


state 319

  327 slices: slice . '!' ','

    '!'  shift, and go to state 447


state 320

  321 primary: primary '.' NAME .

    $default  reduce using rule 321 (primary)


state 321

  323 primary: primary '(' SQUAREBRACKET_START . arguments SQUAREBRACKET_END ')'

    ','  shift, and go to state 448

    SQUAREBRACKET_START  reduce using rule 372 (args)
    $default             reduce using rule 370 (arguments)

    arguments  go to state 449
    args       go to state 450
    kwargs     go to state 451


state 322

  351 genexp: '(' '(' . assigment_expression '|' expression '!' ':' EQUAL ')' for_if_clauses ')'

    NAME  shift, and go to state 452

    $default  reduce using rule 224 (assigment_expression)

    assigment_expression  go to state 453


state 323

  422 t_lookahead: SQUAREBRACKET_START .

    $default  reduce using rule 422 (t_lookahead)


state 324

  423 t_lookahead: '.' .

    $default  reduce using rule 423 (t_lookahead)


state 325

  421 t_lookahead: '(' .

    $default  reduce using rule 421 (t_lookahead)


state 326

  420 t_primary: atom '&' t_lookahead .

    $default  reduce using rule 420 (t_primary)


state 327

   37 augassign: '*' EQUAL .

    $default  reduce using rule 37 (augassign)


state 328

   46 augassign: '*' '*' . EQUAL

    EQUAL  shift, and go to state 454


state 329

   35 augassign: '+' EQUAL .

    $default  reduce using rule 35 (augassign)


state 330

   42 augassign: '|' EQUAL .

    $default  reduce using rule 42 (augassign)


state 331

   36 augassign: '-' EQUAL .

    $default  reduce using rule 36 (augassign)


state 332

   38 augassign: '@' EQUAL .

    $default  reduce using rule 38 (augassign)


state 333

   39 augassign: '/' EQUAL .

    $default  reduce using rule 39 (augassign)


state 334

   47 augassign: '/' '/' . EQUAL

    EQUAL  shift, and go to state 455


state 335

   40 augassign: '%' EQUAL .

    $default  reduce using rule 40 (augassign)


state 336

   41 augassign: '&' EQUAL .

    $default  reduce using rule 41 (augassign)


state 337

   43 augassign: '^' EQUAL .

    $default  reduce using rule 43 (augassign)


state 338

   44 augassign: '<' '<' . EQUAL

    EQUAL  shift, and go to state 456


state 339

   45 augassign: '>' '>' . EQUAL

    EQUAL  shift, and go to state 457


state 340

   33 assignment: single_target augassign '~' . '(' yield_expr '|' star_expressions ')'

    '('  shift, and go to state 458


state 341

   31 assignment: single_subscript_attribute_target ')' ':' . expression SQUAREBRACKET_START EQUAL annotated_rhs SQUAREBRACKET_END

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 229 (expression)
    SQUAREBRACKET_START  [reduce using rule 260 (disjunction)]
    SQUAREBRACKET_START  [reduce using rule 263 (conjunction)]
    SQUAREBRACKET_START  [reduce using rule 266 (inversion)]
    SQUAREBRACKET_START  [reduce using rule 287 (bitwise_or)]
    SQUAREBRACKET_START  [reduce using rule 290 (bitwise_xor)]
    SQUAREBRACKET_START  [reduce using rule 293 (bitwise_and)]
    SQUAREBRACKET_START  [reduce using rule 296 (shift_expr)]
    SQUAREBRACKET_START  [reduce using rule 300 (sum)]
    SQUAREBRACKET_START  [reduce using rule 304 (term)]
    SQUAREBRACKET_START  [reduce using rule 311 (factor)]
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression     go to state 459
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 342

  409 single_subscript_attribute_target: t_primary SQUAREBRACKET_START slices . SQUAREBRACKET_END '!' t_lookahead
  417 t_primary: t_primary SQUAREBRACKET_START slices . SQUAREBRACKET_END '&' t_lookahead

    SQUAREBRACKET_END  shift, and go to state 460


state 343

  408 single_subscript_attribute_target: t_primary '.' NAME . '!' t_lookahead
  416 t_primary: t_primary '.' NAME . '&' t_lookahead

    '!'  shift, and go to state 461
    '&'  shift, and go to state 462


state 344

  419 t_primary: t_primary '(' SQUAREBRACKET_START . arguments SQUAREBRACKET_END ')' '&' t_lookahead

    ','  shift, and go to state 448

    SQUAREBRACKET_START  reduce using rule 372 (args)
    $default             reduce using rule 370 (arguments)

    arguments  go to state 463
    args       go to state 450
    kwargs     go to state 451


state 345

  418 t_primary: t_primary genexp '&' . t_lookahead

    SQUAREBRACKET_START  shift, and go to state 323
    '.'                  shift, and go to state 324
    '('                  shift, and go to state 325

    t_lookahead  go to state 464


state 346

   29 assignment: NAME ':' expression SQUAREBRACKET_START . EQUAL annotated_rhs SQUAREBRACKET_END

    EQUAL  shift, and go to state 465


state 347

  225 assigment_expression: NAME ':' EQUAL . '~' expression

    '~'  shift, and go to state 466


state 348

  344 list: SQUAREBRACKET_START SQUAREBRACKET_START . star_named_expressions SQUAREBRACKET_END SQUAREBRACKET_END

    ','  shift, and go to state 381

    star_named_expressions  go to state 412


state 349

  347 tuple: '(' SQUAREBRACKET_START . star_named_expression ',' SQUAREBRACKET_START star_named_expressions SQUAREBRACKET_END SQUAREBRACKET_END ')'

    NAME     shift, and go to state 92
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '*'      shift, and go to state 123
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 221 (star_named_expression)
    ','                  [reduce using rule 224 (assigment_expression)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 229 (expression)
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    star_named_expression  go to state 415
    assigment_expression   go to state 94
    named_expression       go to state 416
    expression             go to state 96
    lambdef                go to state 68
    disjunction            go to state 69
    conjunction            go to state 70
    inversion              go to state 71
    comparison             go to state 72
    bitwise_or             go to state 73
    bitwise_xor            go to state 74
    bitwise_and            go to state 75
    shift_expr             go to state 76
    sum                    go to state 77
    term                   go to state 78
    factor                 go to state 79
    power                  go to state 80
    await_primary          go to state 81
    primary                go to state 82
    atom                   go to state 97
    strings                go to state 84


state 350

   67 if_stmt: IF named_expression ':' block . elif_stmt
   68        | IF named_expression ':' block . SQUAREBRACKET_START else_block SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 467
    ELIF                 shift, and go to state 468

    elif_stmt  go to state 469


state 351

  227 named_expression: expression '!' ':' . EQUAL

    EQUAL  shift, and go to state 470


state 352

   72 while_stmt: WHILE named_expression ':' block . SQUAREBRACKET_START else_block SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 471


state 353

   48 global_stmt: GLOBAL ',' '.' NAME . '+'

    '+'  shift, and go to state 472


state 354

  369 yield_expr: YIELD SQUAREBRACKET_START star_expressions SQUAREBRACKET_END .

    $default  reduce using rule 369 (yield_expr)


state 355

   66 dotted_name: NAME .

    $default  reduce using rule 66 (dotted_name)


state 356

   63 dotted_as_names: ',' '.' dotted_as_name . '+'

    '+'  shift, and go to state 473


state 357

   64 dotted_as_name: dotted_name . SQUAREBRACKET_START AS NAME SQUAREBRACKET_END
   65 dotted_name: dotted_name . '.' NAME

    SQUAREBRACKET_START  shift, and go to state 474
    '.'                  shift, and go to state 475


state 358

  410 expression_list: expression '(' . ',' expression ')' '*' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    ','  shift, and go to state 476


state 359

  169 return_stmt: RETURN SQUAREBRACKET_START expression_list SQUAREBRACKET_END .

    $default  reduce using rule 169 (return_stmt)


state 360

  388 star_targets_list_seq: ',' . '.' star_target '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    '.'  shift, and go to state 477


state 361

  402 star_atom: SQUAREBRACKET_START SQUAREBRACKET_START star_targets_list_seq . SQUAREBRACKET_END SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 478


state 362

  393 star_target: '*' '(' '!' . '*' star_target ')'

    '*'  shift, and go to state 479


state 363

  344 list: SQUAREBRACKET_START SQUAREBRACKET_START . star_named_expressions SQUAREBRACKET_END SQUAREBRACKET_END
  402 star_atom: SQUAREBRACKET_START . SQUAREBRACKET_START star_targets_list_seq SQUAREBRACKET_END SQUAREBRACKET_END
  402          | SQUAREBRACKET_START SQUAREBRACKET_START . star_targets_list_seq SQUAREBRACKET_END SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 229
    ','                  shift, and go to state 411

    star_named_expressions  go to state 412
    star_targets_list_seq   go to state 361


state 364

  401 star_atom: '(' SQUAREBRACKET_START star_targets_tuple_seq . SQUAREBRACKET_END ')'

    SQUAREBRACKET_END  shift, and go to state 480


state 365

  390 star_targets_tuple_seq: star_target . '(' ',' star_target ')' '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END
  391                       | star_target . ','

    ','  shift, and go to state 481
    '('  shift, and go to state 482


state 366

  400 star_atom: '(' target_with_star_atom ')' .

    $default  reduce using rule 400 (star_atom)


state 367

   73 for_stmt: FOR star_targets IN '~' . star_expressions ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '*'      shift, and go to state 33
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 213 (star_expressions)
    ':'                  [reduce using rule 217 (star_expression)]
    ':'                  [reduce using rule 229 (expression)]
    ':'                  [reduce using rule 260 (disjunction)]
    ':'                  [reduce using rule 263 (conjunction)]
    ':'                  [reduce using rule 266 (inversion)]
    ':'                  [reduce using rule 287 (bitwise_or)]
    ':'                  [reduce using rule 290 (bitwise_xor)]
    ':'                  [reduce using rule 293 (bitwise_and)]
    ':'                  [reduce using rule 296 (shift_expr)]
    ':'                  [reduce using rule 300 (sum)]
    ':'                  [reduce using rule 304 (term)]
    ':'                  [reduce using rule 311 (factor)]
    ':'                  [reduce using rule 320 (primary)]
    ':'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    star_expressions  go to state 483
    star_expression   go to state 66
    expression        go to state 67
    lambdef           go to state 68
    disjunction       go to state 69
    conjunction       go to state 70
    inversion         go to state 71
    comparison        go to state 72
    bitwise_or        go to state 73
    bitwise_xor       go to state 74
    bitwise_and       go to state 75
    shift_expr        go to state 76
    sum               go to state 77
    term              go to state 78
    factor            go to state 79
    power             go to state 80
    await_primary     go to state 81
    primary           go to state 82
    atom              go to state 97
    strings           go to state 84


state 368

  386 star_targets: star_target '!' ',' .

    $default  reduce using rule 386 (star_targets)


state 369

  387 star_targets: star_target '(' ',' . star_target ')' '*' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    NAME                 shift, and go to state 107
    STRING               shift, and go to state 4
    INTEGER              shift, and go to state 5
    SQUAREBRACKET_START  shift, and go to state 108
    TRUE                 shift, and go to state 16
    NONE                 shift, and go to state 17
    FALSE                shift, and go to state 26
    '.'                  shift, and go to state 32
    '*'                  shift, and go to state 109
    '('                  shift, and go to state 110

    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    '.'                  [reduce using rule 415 (t_primary)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 392 (star_target)
    ')'                  [reduce using rule 395 (target_with_star_atom)]
    '&'                  reduce using rule 331 (atom)
    '&'                  [reduce using rule 415 (t_primary)]
    $default             reduce using rule 331 (atom)

    atom                   go to state 111
    strings                go to state 84
    star_target            go to state 484
    target_with_star_atom  go to state 114
    star_atom              go to state 115
    t_primary              go to state 116


state 370

  397 target_with_star_atom: t_primary SQUAREBRACKET_START slices . SQUAREBRACKET_END '!' t_lookahead
  417 t_primary: t_primary SQUAREBRACKET_START slices . SQUAREBRACKET_END '&' t_lookahead

    SQUAREBRACKET_END  shift, and go to state 485


state 371

  396 target_with_star_atom: t_primary '.' NAME . '!' t_lookahead
  416 t_primary: t_primary '.' NAME . '&' t_lookahead

    '!'  shift, and go to state 486
    '&'  shift, and go to state 462


state 372

  411 del_targets: ',' '.' del_target . '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    '+'  shift, and go to state 487


state 373

  413 del_target: t_primary . '.' NAME '!' t_lookahead
  414           | t_primary . SQUAREBRACKET_START slices SQUAREBRACKET_END '!' t_lookahead
  416 t_primary: t_primary . '.' NAME '&' t_lookahead
  417          | t_primary . SQUAREBRACKET_START slices SQUAREBRACKET_END '&' t_lookahead
  418          | t_primary . genexp '&' t_lookahead
  419          | t_primary . '(' SQUAREBRACKET_START arguments SQUAREBRACKET_END ')' '&' t_lookahead

    SQUAREBRACKET_START  shift, and go to state 488
    '.'                  shift, and go to state 489
    '('                  shift, and go to state 214

    $default  reduce using rule 350 (genexp)

    genexp  go to state 215


state 374

   52 del_stmt: DEL del_targets '&' '(' . ';' '|' NEWLINE ')'

    ';'  shift, and go to state 490


state 375

   49 nonlocal_stmt: NONLOCAL ',' '.' NAME . '+'

    '+'  shift, and go to state 491


state 376

  209 class_def_raw: CLASS NAME SQUAREBRACKET_START '(' . SQUAREBRACKET_START arguments SQUAREBRACKET_END ')' SQUAREBRACKET_END ':' block

    SQUAREBRACKET_START  shift, and go to state 492


state 377

   76 with_stmt: WITH ',' '.' with_item . '+' ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block

    '+'  shift, and go to state 493


state 378

   79 with_item: expression . AS star_target '&' '(' ',' '|' ')' '|' ':' ')'
   80          | expression .

    AS  shift, and go to state 494

    $default  reduce using rule 80 (with_item)


state 379

   75 with_stmt: WITH '(' ',' '.' . with_item '+' ',' '?' ')' ':' block

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    AS                   reduce using rule 229 (expression)
    AS                   [reduce using rule 260 (disjunction)]
    AS                   [reduce using rule 263 (conjunction)]
    AS                   [reduce using rule 266 (inversion)]
    AS                   [reduce using rule 287 (bitwise_or)]
    AS                   [reduce using rule 290 (bitwise_xor)]
    AS                   [reduce using rule 293 (bitwise_and)]
    AS                   [reduce using rule 296 (shift_expr)]
    AS                   [reduce using rule 300 (sum)]
    AS                   [reduce using rule 304 (term)]
    AS                   [reduce using rule 311 (factor)]
    AS                   [reduce using rule 320 (primary)]
    AS                   [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 229 (expression)]
    '+'                  [reduce using rule 260 (disjunction)]
    '+'                  [reduce using rule 263 (conjunction)]
    '+'                  [reduce using rule 266 (inversion)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    with_item      go to state 495
    expression     go to state 378
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 380

   87 match_stmt: MATCH subject_expr ':' NEWLINE . INDENT case_block '+' DEDENT

    INDENT  shift, and go to state 496


state 381

  220 star_named_expressions: ',' . '.' star_named_expression '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    '.'  shift, and go to state 497


state 382

   89 subject_expr: star_named_expression ',' star_named_expressions . '?'

    '?'  shift, and go to state 498


state 383

  170 raise_stmt: RAISE expression SQUAREBRACKET_START FROM . expression SQUAREBRACKET_END

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 229 (expression)
    SQUAREBRACKET_END    [reduce using rule 260 (disjunction)]
    SQUAREBRACKET_END    [reduce using rule 263 (conjunction)]
    SQUAREBRACKET_END    [reduce using rule 266 (inversion)]
    SQUAREBRACKET_END    [reduce using rule 287 (bitwise_or)]
    SQUAREBRACKET_END    [reduce using rule 290 (bitwise_xor)]
    SQUAREBRACKET_END    [reduce using rule 293 (bitwise_and)]
    SQUAREBRACKET_END    [reduce using rule 296 (shift_expr)]
    SQUAREBRACKET_END    [reduce using rule 300 (sum)]
    SQUAREBRACKET_END    [reduce using rule 304 (term)]
    SQUAREBRACKET_END    [reduce using rule 311 (factor)]
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression     go to state 499
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 384

  247 lambda_star_etc: '*' ',' . lambda_param_maybe_default '+' SQUAREBRACKET_START lambda_kwds SQUAREBRACKET_END

    NAME  shift, and go to state 249

    $default  reduce using rule 256 (lambda_param_maybe_default)

    lambda_param_maybe_default  go to state 500
    lambda_param                go to state 501


state 385

  249 lambda_kwds: '*' '*' . lambda_param_no_default

    NAME  shift, and go to state 249

    $default  reduce using rule 250 (lambda_param_no_default)

    lambda_param_no_default  go to state 502
    lambda_param             go to state 387


state 386

  246 lambda_star_etc: '*' lambda_param_no_default . lambda_param_maybe_default '*' SQUAREBRACKET_START lambda_kwds SQUAREBRACKET_END

    NAME  shift, and go to state 249

    $default  reduce using rule 256 (lambda_param_maybe_default)

    lambda_param_maybe_default  go to state 503
    lambda_param                go to state 501


state 387

  251 lambda_param_no_default: lambda_param . ','
  252                        | lambda_param . '&' ':'

    ','  shift, and go to state 396
    '&'  shift, and go to state 397


state 388

  233 lambdef: LAMBDA SQUAREBRACKET_START lambda_params SQUAREBRACKET_END . ':' expression

    ':'  shift, and go to state 504


state 389

  236 lambda_parameters: lambda_slash_no_default lambda_param_no_default . '*' lambda_param_with_default '*' SQUAREBRACKET_START

    '*'  shift, and go to state 505


state 390

  237 lambda_parameters: lambda_slash_with_default lambda_param_with_default . '*' SQUAREBRACKET_START lambda_star_etc SQUAREBRACKET_END

    '*'  shift, and go to state 506


state 391

  254 lambda_param_with_default: lambda_param . default ','
  255                          | lambda_param . default '&' ':'

    EQUAL  shift, and go to state 395

    default  go to state 398


state 392

  243 lambda_slash_with_default: lambda_param_no_default '*' . lambda_param_with_default '+' '/' ','
  244                          | lambda_param_no_default '*' . lambda_param_with_default '+' '/' '&' ':'

    NAME  shift, and go to state 249

    $default  reduce using rule 253 (lambda_param_with_default)

    lambda_param_with_default  go to state 507
    lambda_param               go to state 391


state 393

  238 lambda_parameters: lambda_param_no_default '+' . lambda_param_with_default '*' SQUAREBRACKET_START lambda_star_etc SQUAREBRACKET_END
  241 lambda_slash_no_default: lambda_param_no_default '+' . '/' ','
  242                        | lambda_param_no_default '+' . '/' '&' ':'

    NAME  shift, and go to state 249
    '/'   shift, and go to state 508

    $default  reduce using rule 253 (lambda_param_with_default)

    lambda_param_with_default  go to state 509
    lambda_param               go to state 391


state 394

  239 lambda_parameters: lambda_param_with_default '+' . SQUAREBRACKET_START lambda_star_etc SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 510


state 395

  204 default: EQUAL . expression

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    TYPE_COMMENT         reduce using rule 229 (expression)
    TYPE_COMMENT         [reduce using rule 260 (disjunction)]
    TYPE_COMMENT         [reduce using rule 263 (conjunction)]
    TYPE_COMMENT         [reduce using rule 266 (inversion)]
    TYPE_COMMENT         [reduce using rule 287 (bitwise_or)]
    TYPE_COMMENT         [reduce using rule 290 (bitwise_xor)]
    TYPE_COMMENT         [reduce using rule 293 (bitwise_and)]
    TYPE_COMMENT         [reduce using rule 296 (shift_expr)]
    TYPE_COMMENT         [reduce using rule 300 (sum)]
    TYPE_COMMENT         [reduce using rule 304 (term)]
    TYPE_COMMENT         [reduce using rule 311 (factor)]
    TYPE_COMMENT         [reduce using rule 320 (primary)]
    TYPE_COMMENT         [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 229 (expression)
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 229 (expression)
    '&'                  [reduce using rule 260 (disjunction)]
    '&'                  [reduce using rule 263 (conjunction)]
    '&'                  [reduce using rule 266 (inversion)]
    '&'                  [reduce using rule 287 (bitwise_or)]
    '&'                  [reduce using rule 290 (bitwise_xor)]
    '&'                  [reduce using rule 293 (bitwise_and)]
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '?'                  reduce using rule 229 (expression)
    '?'                  [reduce using rule 260 (disjunction)]
    '?'                  [reduce using rule 263 (conjunction)]
    '?'                  [reduce using rule 266 (inversion)]
    '?'                  [reduce using rule 287 (bitwise_or)]
    '?'                  [reduce using rule 290 (bitwise_xor)]
    '?'                  [reduce using rule 293 (bitwise_and)]
    '?'                  [reduce using rule 296 (shift_expr)]
    '?'                  [reduce using rule 300 (sum)]
    '?'                  [reduce using rule 304 (term)]
    '?'                  [reduce using rule 311 (factor)]
    '?'                  [reduce using rule 320 (primary)]
    '?'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression     go to state 511
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 396

  251 lambda_param_no_default: lambda_param ',' .

    $default  reduce using rule 251 (lambda_param_no_default)


state 397

  252 lambda_param_no_default: lambda_param '&' . ':'

    ':'  shift, and go to state 512


state 398

  254 lambda_param_with_default: lambda_param default . ','
  255                          | lambda_param default . '&' ':'

    ','  shift, and go to state 513
    '&'  shift, and go to state 514


state 399

  174 function_def_raw: DEF NAME '(' SQUAREBRACKET_START . params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    NAME  shift, and go to state 515
    '*'   shift, and go to state 516

    '*'       [reduce using rule 193 (param_no_default)]
    '+'       reduce using rule 193 (param_no_default)
    '+'       [reduce using rule 196 (param_with_default)]
    $default  reduce using rule 188 (star_etc)

    params              go to state 517
    parameters          go to state 518
    slash_no_default    go to state 519
    slash_with_default  go to state 520
    star_etc            go to state 521
    kwds                go to state 522
    param_no_default    go to state 523
    param_with_default  go to state 524
    param               go to state 525


state 400

   51 assert_stmt: ASSERT expression SQUAREBRACKET_START ',' . expression SQUAREBRACKET_END

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 229 (expression)
    SQUAREBRACKET_END    [reduce using rule 260 (disjunction)]
    SQUAREBRACKET_END    [reduce using rule 263 (conjunction)]
    SQUAREBRACKET_END    [reduce using rule 266 (inversion)]
    SQUAREBRACKET_END    [reduce using rule 287 (bitwise_or)]
    SQUAREBRACKET_END    [reduce using rule 290 (bitwise_xor)]
    SQUAREBRACKET_END    [reduce using rule 293 (bitwise_and)]
    SQUAREBRACKET_END    [reduce using rule 296 (shift_expr)]
    SQUAREBRACKET_END    [reduce using rule 300 (sum)]
    SQUAREBRACKET_END    [reduce using rule 304 (term)]
    SQUAREBRACKET_END    [reduce using rule 311 (factor)]
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression     go to state 526
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 401

   74 for_stmt: ASYNC FOR star_targets IN . '~' star_expressions ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    '~'  shift, and go to state 527


state 402

   78 with_stmt: ASYNC WITH ',' '.' . with_item '+' ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    AS                   reduce using rule 229 (expression)
    AS                   [reduce using rule 260 (disjunction)]
    AS                   [reduce using rule 263 (conjunction)]
    AS                   [reduce using rule 266 (inversion)]
    AS                   [reduce using rule 287 (bitwise_or)]
    AS                   [reduce using rule 290 (bitwise_xor)]
    AS                   [reduce using rule 293 (bitwise_and)]
    AS                   [reduce using rule 296 (shift_expr)]
    AS                   [reduce using rule 300 (sum)]
    AS                   [reduce using rule 304 (term)]
    AS                   [reduce using rule 311 (factor)]
    AS                   [reduce using rule 320 (primary)]
    AS                   [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 229 (expression)]
    '+'                  [reduce using rule 260 (disjunction)]
    '+'                  [reduce using rule 263 (conjunction)]
    '+'                  [reduce using rule 266 (inversion)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    with_item      go to state 528
    expression     go to state 378
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 403

   77 with_stmt: ASYNC WITH '(' ',' . '.' with_item '+' ',' '?' ')' ':' block

    '.'  shift, and go to state 529


state 404

  175 function_def_raw: ASYNC DEF NAME '(' . SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    SQUAREBRACKET_START  shift, and go to state 530


state 405

  211 block: NEWLINE INDENT . statements DEDENT

    NAME      shift, and go to state 3
    STRING    shift, and go to state 4
    INTEGER   shift, and go to state 5
    IF        shift, and go to state 6
    WHILE     shift, and go to state 7
    NOT       shift, and go to state 8
    GLOBAL    shift, and go to state 9
    YIELD     shift, and go to state 10
    IMPORT    shift, and go to state 11
    RETURN    shift, and go to state 12
    FOR       shift, and go to state 13
    DEL       shift, and go to state 14
    NONLOCAL  shift, and go to state 15
    TRUE      shift, and go to state 16
    NONE      shift, and go to state 17
    CLASS     shift, and go to state 18
    WITH      shift, and go to state 19
    MATCH     shift, and go to state 20
    CONTINUE  shift, and go to state 21
    RAISE     shift, and go to state 22
    PASS      shift, and go to state 23
    LAMBDA    shift, and go to state 24
    DEF       shift, and go to state 25
    FALSE     shift, and go to state 26
    ASSERT    shift, and go to state 27
    AWAIT     shift, and go to state 28
    BREAK     shift, and go to state 29
    ASYNC     shift, and go to state 30
    TRY       shift, and go to state 31
    '.'       shift, and go to state 32
    '*'       shift, and go to state 33
    '+'       shift, and go to state 34
    ';'       shift, and go to state 35
    '('       shift, and go to state 36
    '~'       shift, and go to state 37
    '-'       shift, and go to state 38

    IF                   [reduce using rule 260 (disjunction)]
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 415 (t_primary)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 403 (single_target)]
    '*'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '+'                  [reduce using rule 208 (class_def_raw)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 403 (single_target)]
    '+'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '!'                  reduce using rule 213 (star_expressions)
    '!'                  [reduce using rule 217 (star_expression)]
    '!'                  [reduce using rule 229 (expression)]
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '!'                  [reduce using rule 367 (yield_expr)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 407 (single_subscript_attribute_target)
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '|'                  [reduce using rule 403 (single_target)]
    '|'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '~'                  [reduce using rule 403 (single_target)]
    '~'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 403 (single_target)]
    '-'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '@'                  [reduce using rule 403 (single_target)]
    '@'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '/'                  [reduce using rule 403 (single_target)]
    '/'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '%'                  [reduce using rule 403 (single_target)]
    '%'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '&'                  [reduce using rule 403 (single_target)]
    '&'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  [reduce using rule 415 (t_primary)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '^'                  [reduce using rule 403 (single_target)]
    '^'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '<'                  [reduce using rule 403 (single_target)]
    '<'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '>'                  [reduce using rule 403 (single_target)]
    '>'                  [reduce using rule 407 (single_subscript_attribute_target)]
    $default             reduce using rule 287 (bitwise_or)

    statements                         go to state 531
    statement                          go to state 40
    simple_stmts                       go to state 41
    simple_stmt                        go to state 42
    compound_stmt                      go to state 43
    assignment                         go to state 44
    global_stmt                        go to state 45
    nonlocal_stmt                      go to state 46
    yield_stmt                         go to state 47
    assert_stmt                        go to state 48
    del_stmt                           go to state 49
    import_stmt                        go to state 50
    import_name                        go to state 51
    if_stmt                            go to state 52
    while_stmt                         go to state 53
    for_stmt                           go to state 54
    with_stmt                          go to state 55
    try_stmt                           go to state 56
    match_stmt                         go to state 57
    return_stmt                        go to state 58
    raise_stmt                         go to state 59
    function_def                       go to state 60
    function_def_raw                   go to state 61
    decorators                         go to state 62
    class_def                          go to state 63
    class_def_raw                      go to state 64
    star_expressions                   go to state 65
    star_expression                    go to state 66
    expression                         go to state 67
    lambdef                            go to state 68
    disjunction                        go to state 69
    conjunction                        go to state 70
    inversion                          go to state 71
    comparison                         go to state 72
    bitwise_or                         go to state 73
    bitwise_xor                        go to state 74
    bitwise_and                        go to state 75
    shift_expr                         go to state 76
    sum                                go to state 77
    term                               go to state 78
    factor                             go to state 79
    power                              go to state 80
    await_primary                      go to state 81
    primary                            go to state 82
    atom                               go to state 83
    strings                            go to state 84
    yield_expr                         go to state 85
    single_target                      go to state 86
    single_subscript_attribute_target  go to state 87
    t_primary                          go to state 88


state 406

   86 finally_block: FINALLY . ':' block

    ':'  shift, and go to state 532


state 407

   84 except_block: EXPECT . expression SQUAREBRACKET_START AS NAME SQUAREBRACKET_END ':' block
   85             | EXPECT . ':' block

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    ':'      shift, and go to state 533
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 229 (expression)
    SQUAREBRACKET_START  [reduce using rule 260 (disjunction)]
    SQUAREBRACKET_START  [reduce using rule 263 (conjunction)]
    SQUAREBRACKET_START  [reduce using rule 266 (inversion)]
    SQUAREBRACKET_START  [reduce using rule 287 (bitwise_or)]
    SQUAREBRACKET_START  [reduce using rule 290 (bitwise_xor)]
    SQUAREBRACKET_START  [reduce using rule 293 (bitwise_and)]
    SQUAREBRACKET_START  [reduce using rule 296 (shift_expr)]
    SQUAREBRACKET_START  [reduce using rule 300 (sum)]
    SQUAREBRACKET_START  [reduce using rule 304 (term)]
    SQUAREBRACKET_START  [reduce using rule 311 (factor)]
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression     go to state 534
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 408

   82 try_stmt: TRY ':' block except_block . '+' SQUAREBRACKET_START else_block SQUAREBRACKET_END SQUAREBRACKET_START finally_block SQUAREBRACKET_END

    '+'  shift, and go to state 535


state 409

   81 try_stmt: TRY ':' block finally_block .

    $default  reduce using rule 81 (try_stmt)


state 410

    7 simple_stmts: ';' '.' simple_stmt '+' . SQUAREBRACKET_START ';' SQUAREBRACKET_END NEWLINE

    SQUAREBRACKET_START  shift, and go to state 536


state 411

  220 star_named_expressions: ',' . '.' star_named_expression '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END
  388 star_targets_list_seq: ',' . '.' star_target '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    '.'  shift, and go to state 537


state 412

  344 list: SQUAREBRACKET_START SQUAREBRACKET_START star_named_expressions . SQUAREBRACKET_END SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 538


state 413

  225 assigment_expression: NAME . ':' EQUAL '~' expression
  332 atom: NAME .
  399 star_atom: NAME .

    ':'  shift, and go to state 217

    ','       reduce using rule 399 (star_atom)
    '+'       reduce using rule 332 (atom)
    '+'       [reduce using rule 399 (star_atom)]
    '('       reduce using rule 332 (atom)
    '('       [reduce using rule 399 (star_atom)]
    $default  reduce using rule 332 (atom)


state 414

  222 star_named_expression: '*' . bitwise_or
  393 star_target: '*' . '(' '!' '*' star_target ')'

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 539
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    ','                  reduce using rule 287 (bitwise_or)
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 296 (shift_expr)
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 304 (term)

    bitwise_or     go to state 245
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 415

  347 tuple: '(' SQUAREBRACKET_START star_named_expression . ',' SQUAREBRACKET_START star_named_expressions SQUAREBRACKET_END SQUAREBRACKET_END ')'

    ','  shift, and go to state 540


state 416

  223 star_named_expression: named_expression .

    $default  reduce using rule 223 (star_named_expression)


state 417

   30 assignment: '(' '(' single_target ')' .
  406 single_target: '(' single_target ')' .

    ')'       reduce using rule 406 (single_target)
    $default  reduce using rule 30 (assignment)


state 418

  205 decorators: '(' '@' named_expression NEWLINE . ')' '+'

    ')'  shift, and go to state 541


state 419

  358 double_starred_kvpairs: ',' . '.' double_starred_kvpair '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    '.'  shift, and go to state 542


state 420

  355 dict: '{' SQUAREBRACKET_START double_starred_kvpairs . SQUAREBRACKET_END '}'

    SQUAREBRACKET_END  shift, and go to state 543


state 421

  346 listcomp: SQUAREBRACKET_START . named_expression for_if_clauses SQUAREBRACKET_END

    NAME     shift, and go to state 92
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 224 (assigment_expression)
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    FOR                  reduce using rule 224 (assigment_expression)
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ASYNC                reduce using rule 224 (assigment_expression)
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 224 (assigment_expression)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 229 (expression)
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    assigment_expression  go to state 94
    named_expression      go to state 544
    expression            go to state 96
    lambdef               go to state 68
    disjunction           go to state 69
    conjunction           go to state 70
    inversion             go to state 71
    comparison            go to state 72
    bitwise_or            go to state 73
    bitwise_xor           go to state 74
    bitwise_and           go to state 75
    shift_expr            go to state 76
    sum                   go to state 77
    term                  go to state 78
    factor                go to state 79
    power                 go to state 80
    await_primary         go to state 81
    primary               go to state 82
    atom                  go to state 97
    strings               go to state 84


state 422

  339 atom: '(' list '|' listcomp . ')'

    ')'  shift, and go to state 545


state 423

  349 group: '(' . '(' yield_expr '|' named_expression ')' ')'

    '('  shift, and go to state 546


state 424

  338 atom: '(' tuple '|' group . '|' genexp ')'

    '|'  shift, and go to state 547


state 425

  352 set: '{' . star_named_expressions '}'

    ','  shift, and go to state 381

    star_named_expressions  go to state 548


state 426

  340 atom: '(' dict '|' set . '|' dictcomp '|' setcomp ')'

    '|'  shift, and go to state 549


state 427

   32 assignment: '(' star_targets EQUAL ')' . '+' '(' yield_expr '|' star_expressions ')' '!' EQUAL SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END

    '+'  shift, and go to state 550


state 428

  397 target_with_star_atom: t_primary SQUAREBRACKET_START slices . SQUAREBRACKET_END '!' t_lookahead
  409 single_subscript_attribute_target: t_primary SQUAREBRACKET_START slices . SQUAREBRACKET_END '!' t_lookahead
  417 t_primary: t_primary SQUAREBRACKET_START slices . SQUAREBRACKET_END '&' t_lookahead

    SQUAREBRACKET_END  shift, and go to state 551


state 429

  396 target_with_star_atom: t_primary '.' NAME . '!' t_lookahead
  408 single_subscript_attribute_target: t_primary '.' NAME . '!' t_lookahead
  416 t_primary: t_primary '.' NAME . '&' t_lookahead

    '!'  shift, and go to state 552
    '&'  shift, and go to state 462


state 430

    6 simple_stmts: simple_stmt '!' ';' NEWLINE .

    $default  reduce using rule 6 (simple_stmts)


state 431

   56 import_from: FROM '(' . '.' '|' '.' '.' '.' ')' '*' dotted_name IMPORT import_from_targets
   57            | FROM '(' . '.' '|' '.' '.' '.' ')' '+' IMPORT import_from_targets

    '.'  shift, and go to state 553


state 432

  214 star_expressions: star_expression '(' ',' star_expression . ')' '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    ')'  shift, and go to state 554


state 433

  230 expression: disjunction IF disjunction ELSE . expression

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 229 (expression)
    SQUAREBRACKET_START  [reduce using rule 260 (disjunction)]
    SQUAREBRACKET_START  [reduce using rule 263 (conjunction)]
    SQUAREBRACKET_START  [reduce using rule 266 (inversion)]
    SQUAREBRACKET_START  [reduce using rule 287 (bitwise_or)]
    SQUAREBRACKET_START  [reduce using rule 290 (bitwise_xor)]
    SQUAREBRACKET_START  [reduce using rule 293 (bitwise_and)]
    SQUAREBRACKET_START  [reduce using rule 296 (shift_expr)]
    SQUAREBRACKET_START  [reduce using rule 300 (sum)]
    SQUAREBRACKET_START  [reduce using rule 304 (term)]
    SQUAREBRACKET_START  [reduce using rule 311 (factor)]
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 229 (expression)
    SQUAREBRACKET_END    [reduce using rule 260 (disjunction)]
    SQUAREBRACKET_END    [reduce using rule 263 (conjunction)]
    SQUAREBRACKET_END    [reduce using rule 266 (inversion)]
    SQUAREBRACKET_END    [reduce using rule 287 (bitwise_or)]
    SQUAREBRACKET_END    [reduce using rule 290 (bitwise_xor)]
    SQUAREBRACKET_END    [reduce using rule 293 (bitwise_and)]
    SQUAREBRACKET_END    [reduce using rule 296 (shift_expr)]
    SQUAREBRACKET_END    [reduce using rule 300 (sum)]
    SQUAREBRACKET_END    [reduce using rule 304 (term)]
    SQUAREBRACKET_END    [reduce using rule 311 (factor)]
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    AS                   reduce using rule 229 (expression)
    AS                   [reduce using rule 260 (disjunction)]
    AS                   [reduce using rule 263 (conjunction)]
    AS                   [reduce using rule 266 (inversion)]
    AS                   [reduce using rule 287 (bitwise_or)]
    AS                   [reduce using rule 290 (bitwise_xor)]
    AS                   [reduce using rule 293 (bitwise_and)]
    AS                   [reduce using rule 296 (shift_expr)]
    AS                   [reduce using rule 300 (sum)]
    AS                   [reduce using rule 304 (term)]
    AS                   [reduce using rule 311 (factor)]
    AS                   [reduce using rule 320 (primary)]
    AS                   [reduce using rule 331 (atom)]
    TYPE_COMMENT         reduce using rule 229 (expression)
    TYPE_COMMENT         [reduce using rule 260 (disjunction)]
    TYPE_COMMENT         [reduce using rule 263 (conjunction)]
    TYPE_COMMENT         [reduce using rule 266 (inversion)]
    TYPE_COMMENT         [reduce using rule 287 (bitwise_or)]
    TYPE_COMMENT         [reduce using rule 290 (bitwise_xor)]
    TYPE_COMMENT         [reduce using rule 293 (bitwise_and)]
    TYPE_COMMENT         [reduce using rule 296 (shift_expr)]
    TYPE_COMMENT         [reduce using rule 300 (sum)]
    TYPE_COMMENT         [reduce using rule 304 (term)]
    TYPE_COMMENT         [reduce using rule 311 (factor)]
    TYPE_COMMENT         [reduce using rule 320 (primary)]
    TYPE_COMMENT         [reduce using rule 331 (atom)]
    FOR                  reduce using rule 229 (expression)
    FOR                  [reduce using rule 260 (disjunction)]
    FOR                  [reduce using rule 263 (conjunction)]
    FOR                  [reduce using rule 266 (inversion)]
    FOR                  [reduce using rule 287 (bitwise_or)]
    FOR                  [reduce using rule 290 (bitwise_xor)]
    FOR                  [reduce using rule 293 (bitwise_and)]
    FOR                  [reduce using rule 296 (shift_expr)]
    FOR                  [reduce using rule 300 (sum)]
    FOR                  [reduce using rule 304 (term)]
    FOR                  [reduce using rule 311 (factor)]
    FOR                  [reduce using rule 320 (primary)]
    FOR                  [reduce using rule 331 (atom)]
    NEWLINE              reduce using rule 229 (expression)
    NEWLINE              [reduce using rule 260 (disjunction)]
    NEWLINE              [reduce using rule 263 (conjunction)]
    NEWLINE              [reduce using rule 266 (inversion)]
    NEWLINE              [reduce using rule 287 (bitwise_or)]
    NEWLINE              [reduce using rule 290 (bitwise_xor)]
    NEWLINE              [reduce using rule 293 (bitwise_and)]
    NEWLINE              [reduce using rule 296 (shift_expr)]
    NEWLINE              [reduce using rule 300 (sum)]
    NEWLINE              [reduce using rule 304 (term)]
    NEWLINE              [reduce using rule 311 (factor)]
    NEWLINE              [reduce using rule 320 (primary)]
    NEWLINE              [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ASYNC                reduce using rule 229 (expression)
    ASYNC                [reduce using rule 260 (disjunction)]
    ASYNC                [reduce using rule 263 (conjunction)]
    ASYNC                [reduce using rule 266 (inversion)]
    ASYNC                [reduce using rule 287 (bitwise_or)]
    ASYNC                [reduce using rule 290 (bitwise_xor)]
    ASYNC                [reduce using rule 293 (bitwise_and)]
    ASYNC                [reduce using rule 296 (shift_expr)]
    ASYNC                [reduce using rule 300 (sum)]
    ASYNC                [reduce using rule 304 (term)]
    ASYNC                [reduce using rule 311 (factor)]
    ASYNC                [reduce using rule 320 (primary)]
    ASYNC                [reduce using rule 331 (atom)]
    ','                  reduce using rule 229 (expression)
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 229 (expression)]
    '+'                  [reduce using rule 260 (disjunction)]
    '+'                  [reduce using rule 263 (conjunction)]
    '+'                  [reduce using rule 266 (inversion)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 229 (expression)
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 229 (expression)
    ':'                  [reduce using rule 260 (disjunction)]
    ':'                  [reduce using rule 263 (conjunction)]
    ':'                  [reduce using rule 266 (inversion)]
    ':'                  [reduce using rule 287 (bitwise_or)]
    ':'                  [reduce using rule 290 (bitwise_xor)]
    ':'                  [reduce using rule 293 (bitwise_and)]
    ':'                  [reduce using rule 296 (shift_expr)]
    ':'                  [reduce using rule 300 (sum)]
    ':'                  [reduce using rule 304 (term)]
    ':'                  [reduce using rule 311 (factor)]
    ':'                  [reduce using rule 320 (primary)]
    ':'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 229 (expression)
    ')'                  [reduce using rule 260 (disjunction)]
    ')'                  [reduce using rule 263 (conjunction)]
    ')'                  [reduce using rule 266 (inversion)]
    ')'                  [reduce using rule 287 (bitwise_or)]
    ')'                  [reduce using rule 290 (bitwise_xor)]
    ')'                  [reduce using rule 293 (bitwise_and)]
    ')'                  [reduce using rule 296 (shift_expr)]
    ')'                  [reduce using rule 300 (sum)]
    ')'                  [reduce using rule 304 (term)]
    ')'                  [reduce using rule 311 (factor)]
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 229 (expression)
    '|'                  [reduce using rule 260 (disjunction)]
    '|'                  [reduce using rule 263 (conjunction)]
    '|'                  [reduce using rule 266 (inversion)]
    '|'                  [reduce using rule 287 (bitwise_or)]
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 229 (expression)
    '&'                  [reduce using rule 260 (disjunction)]
    '&'                  [reduce using rule 263 (conjunction)]
    '&'                  [reduce using rule 266 (inversion)]
    '&'                  [reduce using rule 287 (bitwise_or)]
    '&'                  [reduce using rule 290 (bitwise_xor)]
    '&'                  [reduce using rule 293 (bitwise_and)]
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '?'                  reduce using rule 229 (expression)
    '?'                  [reduce using rule 260 (disjunction)]
    '?'                  [reduce using rule 263 (conjunction)]
    '?'                  [reduce using rule 266 (inversion)]
    '?'                  [reduce using rule 287 (bitwise_or)]
    '?'                  [reduce using rule 290 (bitwise_xor)]
    '?'                  [reduce using rule 293 (bitwise_and)]
    '?'                  [reduce using rule 296 (shift_expr)]
    '?'                  [reduce using rule 300 (sum)]
    '?'                  [reduce using rule 304 (term)]
    '?'                  [reduce using rule 311 (factor)]
    '?'                  [reduce using rule 320 (primary)]
    '?'                  [reduce using rule 331 (atom)]
    '}'                  reduce using rule 229 (expression)
    '}'                  [reduce using rule 260 (disjunction)]
    '}'                  [reduce using rule 263 (conjunction)]
    '}'                  [reduce using rule 266 (inversion)]
    '}'                  [reduce using rule 287 (bitwise_or)]
    '}'                  [reduce using rule 290 (bitwise_xor)]
    '}'                  [reduce using rule 293 (bitwise_and)]
    '}'                  [reduce using rule 296 (shift_expr)]
    '}'                  [reduce using rule 300 (sum)]
    '}'                  [reduce using rule 304 (term)]
    '}'                  [reduce using rule 311 (factor)]
    '}'                  [reduce using rule 320 (primary)]
    '}'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 229 (expression)

    expression     go to state 555
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 434

  261 disjunction: conjunction '(' OR conjunction . ')' '+'

    ')'  shift, and go to state 556


state 435

  264 conjunction: inversion '(' AND inversion . ')' '+'

    ')'  shift, and go to state 557


state 436

  283 notin_bitwise_or: NOT IN bitwise_or .
  288 bitwise_or: bitwise_or . '|' bitwise_xor

    '|'  shift, and go to state 172

    $default  reduce using rule 283 (notin_bitwise_or)


state 437

  285 isnot_bitwise_or: IS NOT bitwise_or .
  288 bitwise_or: bitwise_or . '|' bitwise_xor

    '|'  shift, and go to state 172

    $default  reduce using rule 285 (isnot_bitwise_or)


state 438

  280 noteq_bitwise_or: '(' '!' EQUAL . ')' bitwise_or

    ')'  shift, and go to state 558


state 439

  281 gte_bitwise_or: '>' EQUAL bitwise_or .
  288 bitwise_or: bitwise_or . '|' bitwise_xor

    '|'  shift, and go to state 172

    $default  reduce using rule 281 (gte_bitwise_or)


state 440

  297 shift_expr: shift_expr '<' '<' sum .
  301 sum: sum . '+' term
  302    | sum . '-' term

    '+'  shift, and go to state 187
    '-'  shift, and go to state 188

    '+'       [reduce using rule 297 (shift_expr)]
    $default  reduce using rule 297 (shift_expr)


state 441

  298 shift_expr: shift_expr '>' '>' sum .
  301 sum: sum . '+' term
  302    | sum . '-' term

    '+'  shift, and go to state 187
    '-'  shift, and go to state 188

    '+'       [reduce using rule 298 (shift_expr)]
    $default  reduce using rule 298 (shift_expr)


state 442

  307 term: term '/' '/' factor .

    $default  reduce using rule 307 (term)


state 443

  316 power: await_primary '*' '*' factor .

    $default  reduce using rule 316 (power)


state 444

  329 slice: SQUAREBRACKET_START expression . SQUAREBRACKET_END ':' SQUAREBRACKET_START expression SQUAREBRACKET_END SQUAREBRACKET_START ':' SQUAREBRACKET_START expression SQUAREBRACKET_END SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 559


state 445

  328 slices: ',' '.' . slice '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    NAME                 shift, and go to state 92
    STRING               shift, and go to state 4
    INTEGER              shift, and go to state 5
    NOT                  shift, and go to state 8
    SQUAREBRACKET_START  shift, and go to state 315
    TRUE                 shift, and go to state 16
    NONE                 shift, and go to state 17
    LAMBDA               shift, and go to state 24
    FALSE                shift, and go to state 26
    AWAIT                shift, and go to state 28
    '.'                  shift, and go to state 32
    '+'                  shift, and go to state 34
    '('                  shift, and go to state 93
    '~'                  shift, and go to state 37
    '-'                  shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 224 (assigment_expression)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 229 (expression)
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    assigment_expression  go to state 94
    named_expression      go to state 317
    expression            go to state 96
    lambdef               go to state 68
    disjunction           go to state 69
    conjunction           go to state 70
    inversion             go to state 71
    comparison            go to state 72
    bitwise_or            go to state 73
    bitwise_xor           go to state 74
    bitwise_and           go to state 75
    shift_expr            go to state 76
    sum                   go to state 77
    term                  go to state 78
    factor                go to state 79
    power                 go to state 80
    await_primary         go to state 81
    primary               go to state 82
    slice                 go to state 560
    atom                  go to state 97
    strings               go to state 84


state 446

  324 primary: primary SQUAREBRACKET_START slices SQUAREBRACKET_END .

    $default  reduce using rule 324 (primary)


state 447

  327 slices: slice '!' . ','

    ','  shift, and go to state 561


state 448

  373 args: ',' . '.' '(' starred_expression '|' '(' assigment_expression '|' expression '!' ':' EQUAL ')' '!' EQUAL ')' '+' SQUAREBRACKET_START
  375 kwargs: ',' . '.' kwarg_or_starred '+' ',' ',' '.' kwarg_or_double_starred '+'
  376       | ',' . '.' kwarg_or_starred '+'
  377       | ',' . '.' kwarg_or_double_starred '+'

    '.'  shift, and go to state 562


state 449

  323 primary: primary '(' SQUAREBRACKET_START arguments . SQUAREBRACKET_END ')'

    SQUAREBRACKET_END  shift, and go to state 563


state 450

  371 arguments: args . SQUAREBRACKET_START ',' SQUAREBRACKET_END '&' ')'

    SQUAREBRACKET_START  shift, and go to state 564


state 451

  374 args: kwargs .

    $default  reduce using rule 374 (args)


state 452

  225 assigment_expression: NAME . ':' EQUAL '~' expression

    ':'  shift, and go to state 217


state 453

  351 genexp: '(' '(' assigment_expression . '|' expression '!' ':' EQUAL ')' for_if_clauses ')'

    '|'  shift, and go to state 565


state 454

   46 augassign: '*' '*' EQUAL .

    $default  reduce using rule 46 (augassign)


state 455

   47 augassign: '/' '/' EQUAL .

    $default  reduce using rule 47 (augassign)


state 456

   44 augassign: '<' '<' EQUAL .

    $default  reduce using rule 44 (augassign)


state 457

   45 augassign: '>' '>' EQUAL .

    $default  reduce using rule 45 (augassign)


state 458

   33 assignment: single_target augassign '~' '(' . yield_expr '|' star_expressions ')'

    YIELD  shift, and go to state 10

    $default  reduce using rule 367 (yield_expr)

    yield_expr  go to state 566


state 459

   31 assignment: single_subscript_attribute_target ')' ':' expression . SQUAREBRACKET_START EQUAL annotated_rhs SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 567


state 460

  409 single_subscript_attribute_target: t_primary SQUAREBRACKET_START slices SQUAREBRACKET_END . '!' t_lookahead
  417 t_primary: t_primary SQUAREBRACKET_START slices SQUAREBRACKET_END . '&' t_lookahead

    '!'  shift, and go to state 568
    '&'  shift, and go to state 569


state 461

  408 single_subscript_attribute_target: t_primary '.' NAME '!' . t_lookahead

    SQUAREBRACKET_START  shift, and go to state 323
    '.'                  shift, and go to state 324
    '('                  shift, and go to state 325

    t_lookahead  go to state 570


state 462

  416 t_primary: t_primary '.' NAME '&' . t_lookahead

    SQUAREBRACKET_START  shift, and go to state 323
    '.'                  shift, and go to state 324
    '('                  shift, and go to state 325

    t_lookahead  go to state 571


state 463

  419 t_primary: t_primary '(' SQUAREBRACKET_START arguments . SQUAREBRACKET_END ')' '&' t_lookahead

    SQUAREBRACKET_END  shift, and go to state 572


state 464

  418 t_primary: t_primary genexp '&' t_lookahead .

    $default  reduce using rule 418 (t_primary)


state 465

   29 assignment: NAME ':' expression SQUAREBRACKET_START EQUAL . annotated_rhs SQUAREBRACKET_END

    YIELD  shift, and go to state 10

    $default  reduce using rule 367 (yield_expr)

    annotated_rhs  go to state 573
    yield_expr     go to state 574


state 466

  225 assigment_expression: NAME ':' EQUAL '~' . expression

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 229 (expression)
    SQUAREBRACKET_END    [reduce using rule 260 (disjunction)]
    SQUAREBRACKET_END    [reduce using rule 263 (conjunction)]
    SQUAREBRACKET_END    [reduce using rule 266 (inversion)]
    SQUAREBRACKET_END    [reduce using rule 287 (bitwise_or)]
    SQUAREBRACKET_END    [reduce using rule 290 (bitwise_xor)]
    SQUAREBRACKET_END    [reduce using rule 293 (bitwise_and)]
    SQUAREBRACKET_END    [reduce using rule 296 (shift_expr)]
    SQUAREBRACKET_END    [reduce using rule 300 (sum)]
    SQUAREBRACKET_END    [reduce using rule 304 (term)]
    SQUAREBRACKET_END    [reduce using rule 311 (factor)]
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    FOR                  reduce using rule 229 (expression)
    FOR                  [reduce using rule 260 (disjunction)]
    FOR                  [reduce using rule 263 (conjunction)]
    FOR                  [reduce using rule 266 (inversion)]
    FOR                  [reduce using rule 287 (bitwise_or)]
    FOR                  [reduce using rule 290 (bitwise_xor)]
    FOR                  [reduce using rule 293 (bitwise_and)]
    FOR                  [reduce using rule 296 (shift_expr)]
    FOR                  [reduce using rule 300 (sum)]
    FOR                  [reduce using rule 304 (term)]
    FOR                  [reduce using rule 311 (factor)]
    FOR                  [reduce using rule 320 (primary)]
    FOR                  [reduce using rule 331 (atom)]
    NEWLINE              reduce using rule 229 (expression)
    NEWLINE              [reduce using rule 260 (disjunction)]
    NEWLINE              [reduce using rule 263 (conjunction)]
    NEWLINE              [reduce using rule 266 (inversion)]
    NEWLINE              [reduce using rule 287 (bitwise_or)]
    NEWLINE              [reduce using rule 290 (bitwise_xor)]
    NEWLINE              [reduce using rule 293 (bitwise_and)]
    NEWLINE              [reduce using rule 296 (shift_expr)]
    NEWLINE              [reduce using rule 300 (sum)]
    NEWLINE              [reduce using rule 304 (term)]
    NEWLINE              [reduce using rule 311 (factor)]
    NEWLINE              [reduce using rule 320 (primary)]
    NEWLINE              [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ASYNC                reduce using rule 229 (expression)
    ASYNC                [reduce using rule 260 (disjunction)]
    ASYNC                [reduce using rule 263 (conjunction)]
    ASYNC                [reduce using rule 266 (inversion)]
    ASYNC                [reduce using rule 287 (bitwise_or)]
    ASYNC                [reduce using rule 290 (bitwise_xor)]
    ASYNC                [reduce using rule 293 (bitwise_and)]
    ASYNC                [reduce using rule 296 (shift_expr)]
    ASYNC                [reduce using rule 300 (sum)]
    ASYNC                [reduce using rule 304 (term)]
    ASYNC                [reduce using rule 311 (factor)]
    ASYNC                [reduce using rule 320 (primary)]
    ASYNC                [reduce using rule 331 (atom)]
    ','                  reduce using rule 229 (expression)
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 229 (expression)]
    '+'                  [reduce using rule 260 (disjunction)]
    '+'                  [reduce using rule 263 (conjunction)]
    '+'                  [reduce using rule 266 (inversion)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 229 (expression)
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 229 (expression)
    ':'                  [reduce using rule 260 (disjunction)]
    ':'                  [reduce using rule 263 (conjunction)]
    ':'                  [reduce using rule 266 (inversion)]
    ':'                  [reduce using rule 287 (bitwise_or)]
    ':'                  [reduce using rule 290 (bitwise_xor)]
    ':'                  [reduce using rule 293 (bitwise_and)]
    ':'                  [reduce using rule 296 (shift_expr)]
    ':'                  [reduce using rule 300 (sum)]
    ':'                  [reduce using rule 304 (term)]
    ':'                  [reduce using rule 311 (factor)]
    ':'                  [reduce using rule 320 (primary)]
    ':'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 229 (expression)
    ')'                  [reduce using rule 260 (disjunction)]
    ')'                  [reduce using rule 263 (conjunction)]
    ')'                  [reduce using rule 266 (inversion)]
    ')'                  [reduce using rule 287 (bitwise_or)]
    ')'                  [reduce using rule 290 (bitwise_xor)]
    ')'                  [reduce using rule 293 (bitwise_and)]
    ')'                  [reduce using rule 296 (shift_expr)]
    ')'                  [reduce using rule 300 (sum)]
    ')'                  [reduce using rule 304 (term)]
    ')'                  [reduce using rule 311 (factor)]
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 229 (expression)
    '|'                  [reduce using rule 260 (disjunction)]
    '|'                  [reduce using rule 263 (conjunction)]
    '|'                  [reduce using rule 266 (inversion)]
    '|'                  [reduce using rule 287 (bitwise_or)]
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '?'                  reduce using rule 229 (expression)
    '?'                  [reduce using rule 260 (disjunction)]
    '?'                  [reduce using rule 263 (conjunction)]
    '?'                  [reduce using rule 266 (inversion)]
    '?'                  [reduce using rule 287 (bitwise_or)]
    '?'                  [reduce using rule 290 (bitwise_xor)]
    '?'                  [reduce using rule 293 (bitwise_and)]
    '?'                  [reduce using rule 296 (shift_expr)]
    '?'                  [reduce using rule 300 (sum)]
    '?'                  [reduce using rule 304 (term)]
    '?'                  [reduce using rule 311 (factor)]
    '?'                  [reduce using rule 320 (primary)]
    '?'                  [reduce using rule 331 (atom)]
    '}'                  reduce using rule 229 (expression)
    '}'                  [reduce using rule 260 (disjunction)]
    '}'                  [reduce using rule 263 (conjunction)]
    '}'                  [reduce using rule 266 (inversion)]
    '}'                  [reduce using rule 287 (bitwise_or)]
    '}'                  [reduce using rule 290 (bitwise_xor)]
    '}'                  [reduce using rule 293 (bitwise_and)]
    '}'                  [reduce using rule 296 (shift_expr)]
    '}'                  [reduce using rule 300 (sum)]
    '}'                  [reduce using rule 304 (term)]
    '}'                  [reduce using rule 311 (factor)]
    '}'                  [reduce using rule 320 (primary)]
    '}'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 229 (expression)

    expression     go to state 575
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 467

   68 if_stmt: IF named_expression ':' block SQUAREBRACKET_START . else_block SQUAREBRACKET_END

    ELSE  shift, and go to state 576

    else_block  go to state 577


state 468

   69 elif_stmt: ELIF . named_expression ':' block elif_stmt
   70          | ELIF . named_expression ':' block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    NAME     shift, and go to state 92
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 229 (expression)
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 224 (assigment_expression)
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    assigment_expression  go to state 94
    named_expression      go to state 578
    expression            go to state 96
    lambdef               go to state 68
    disjunction           go to state 69
    conjunction           go to state 70
    inversion             go to state 71
    comparison            go to state 72
    bitwise_or            go to state 73
    bitwise_xor           go to state 74
    bitwise_and           go to state 75
    shift_expr            go to state 76
    sum                   go to state 77
    term                  go to state 78
    factor                go to state 79
    power                 go to state 80
    await_primary         go to state 81
    primary               go to state 82
    atom                  go to state 97
    strings               go to state 84


state 469

   67 if_stmt: IF named_expression ':' block elif_stmt .

    $default  reduce using rule 67 (if_stmt)


state 470

  227 named_expression: expression '!' ':' EQUAL .

    $default  reduce using rule 227 (named_expression)


state 471

   72 while_stmt: WHILE named_expression ':' block SQUAREBRACKET_START . else_block SQUAREBRACKET_END

    ELSE  shift, and go to state 576

    else_block  go to state 579


state 472

   48 global_stmt: GLOBAL ',' '.' NAME '+' .

    $default  reduce using rule 48 (global_stmt)


state 473

   63 dotted_as_names: ',' '.' dotted_as_name '+' .

    $default  reduce using rule 63 (dotted_as_names)


state 474

   64 dotted_as_name: dotted_name SQUAREBRACKET_START . AS NAME SQUAREBRACKET_END

    AS  shift, and go to state 580


state 475

   65 dotted_name: dotted_name '.' . NAME

    NAME  shift, and go to state 581


state 476

  410 expression_list: expression '(' ',' . expression ')' '*' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 229 (expression)
    ')'                  [reduce using rule 260 (disjunction)]
    ')'                  [reduce using rule 263 (conjunction)]
    ')'                  [reduce using rule 266 (inversion)]
    ')'                  [reduce using rule 287 (bitwise_or)]
    ')'                  [reduce using rule 290 (bitwise_xor)]
    ')'                  [reduce using rule 293 (bitwise_and)]
    ')'                  [reduce using rule 296 (shift_expr)]
    ')'                  [reduce using rule 300 (sum)]
    ')'                  [reduce using rule 304 (term)]
    ')'                  [reduce using rule 311 (factor)]
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression     go to state 582
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 477

  388 star_targets_list_seq: ',' '.' . star_target '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    NAME                 shift, and go to state 107
    STRING               shift, and go to state 4
    INTEGER              shift, and go to state 5
    SQUAREBRACKET_START  shift, and go to state 108
    TRUE                 shift, and go to state 16
    NONE                 shift, and go to state 17
    FALSE                shift, and go to state 26
    '.'                  shift, and go to state 32
    '*'                  shift, and go to state 109
    '('                  shift, and go to state 110

    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    '.'                  [reduce using rule 415 (t_primary)]
    '+'                  reduce using rule 392 (star_target)
    '+'                  [reduce using rule 395 (target_with_star_atom)]
    '('                  [reduce using rule 415 (t_primary)]
    '&'                  reduce using rule 331 (atom)
    '&'                  [reduce using rule 415 (t_primary)]
    $default             reduce using rule 331 (atom)

    atom                   go to state 111
    strings                go to state 84
    star_target            go to state 583
    target_with_star_atom  go to state 114
    star_atom              go to state 115
    t_primary              go to state 116


state 478

  402 star_atom: SQUAREBRACKET_START SQUAREBRACKET_START star_targets_list_seq SQUAREBRACKET_END . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 584


state 479

  393 star_target: '*' '(' '!' '*' . star_target ')'

    NAME                 shift, and go to state 107
    STRING               shift, and go to state 4
    INTEGER              shift, and go to state 5
    SQUAREBRACKET_START  shift, and go to state 108
    TRUE                 shift, and go to state 16
    NONE                 shift, and go to state 17
    FALSE                shift, and go to state 26
    '.'                  shift, and go to state 32
    '*'                  shift, and go to state 109
    '('                  shift, and go to state 110

    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    '.'                  [reduce using rule 415 (t_primary)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 392 (star_target)
    ')'                  [reduce using rule 395 (target_with_star_atom)]
    '&'                  reduce using rule 331 (atom)
    '&'                  [reduce using rule 415 (t_primary)]
    $default             reduce using rule 331 (atom)

    atom                   go to state 111
    strings                go to state 84
    star_target            go to state 585
    target_with_star_atom  go to state 114
    star_atom              go to state 115
    t_primary              go to state 116


state 480

  401 star_atom: '(' SQUAREBRACKET_START star_targets_tuple_seq SQUAREBRACKET_END . ')'

    ')'  shift, and go to state 586


state 481

  391 star_targets_tuple_seq: star_target ',' .

    $default  reduce using rule 391 (star_targets_tuple_seq)


state 482

  390 star_targets_tuple_seq: star_target '(' . ',' star_target ')' '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    ','  shift, and go to state 587


state 483

   73 for_stmt: FOR star_targets IN '~' star_expressions . ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    ':'  shift, and go to state 588


state 484

  387 star_targets: star_target '(' ',' star_target . ')' '*' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    ')'  shift, and go to state 589


state 485

  397 target_with_star_atom: t_primary SQUAREBRACKET_START slices SQUAREBRACKET_END . '!' t_lookahead
  417 t_primary: t_primary SQUAREBRACKET_START slices SQUAREBRACKET_END . '&' t_lookahead

    '!'  shift, and go to state 590
    '&'  shift, and go to state 569


state 486

  396 target_with_star_atom: t_primary '.' NAME '!' . t_lookahead

    SQUAREBRACKET_START  shift, and go to state 323
    '.'                  shift, and go to state 324
    '('                  shift, and go to state 325

    t_lookahead  go to state 591


state 487

  411 del_targets: ',' '.' del_target '+' . SQUAREBRACKET_START ',' SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 592


state 488

  414 del_target: t_primary SQUAREBRACKET_START . slices SQUAREBRACKET_END '!' t_lookahead
  417 t_primary: t_primary SQUAREBRACKET_START . slices SQUAREBRACKET_END '&' t_lookahead

    NAME                 shift, and go to state 92
    STRING               shift, and go to state 4
    INTEGER              shift, and go to state 5
    NOT                  shift, and go to state 8
    SQUAREBRACKET_START  shift, and go to state 315
    TRUE                 shift, and go to state 16
    NONE                 shift, and go to state 17
    LAMBDA               shift, and go to state 24
    FALSE                shift, and go to state 26
    AWAIT                shift, and go to state 28
    ','                  shift, and go to state 316
    '.'                  shift, and go to state 32
    '+'                  shift, and go to state 34
    '('                  shift, and go to state 93
    '~'                  shift, and go to state 37
    '-'                  shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 326 (slices)
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 224 (assigment_expression)
    '!'                  [reduce using rule 229 (expression)]
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    assigment_expression  go to state 94
    named_expression      go to state 317
    expression            go to state 96
    lambdef               go to state 68
    disjunction           go to state 69
    conjunction           go to state 70
    inversion             go to state 71
    comparison            go to state 72
    bitwise_or            go to state 73
    bitwise_xor           go to state 74
    bitwise_and           go to state 75
    shift_expr            go to state 76
    sum                   go to state 77
    term                  go to state 78
    factor                go to state 79
    power                 go to state 80
    await_primary         go to state 81
    primary               go to state 82
    slices                go to state 593
    slice                 go to state 319
    atom                  go to state 97
    strings               go to state 84


state 489

  413 del_target: t_primary '.' . NAME '!' t_lookahead
  416 t_primary: t_primary '.' . NAME '&' t_lookahead

    NAME  shift, and go to state 594


state 490

   52 del_stmt: DEL del_targets '&' '(' ';' . '|' NEWLINE ')'

    '|'  shift, and go to state 595


state 491

   49 nonlocal_stmt: NONLOCAL ',' '.' NAME '+' .

    $default  reduce using rule 49 (nonlocal_stmt)


state 492

  209 class_def_raw: CLASS NAME SQUAREBRACKET_START '(' SQUAREBRACKET_START . arguments SQUAREBRACKET_END ')' SQUAREBRACKET_END ':' block

    ','  shift, and go to state 448

    SQUAREBRACKET_START  reduce using rule 372 (args)
    $default             reduce using rule 370 (arguments)

    arguments  go to state 596
    args       go to state 450
    kwargs     go to state 451


state 493

   76 with_stmt: WITH ',' '.' with_item '+' . ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block

    ':'  shift, and go to state 597


state 494

   79 with_item: expression AS . star_target '&' '(' ',' '|' ')' '|' ':' ')'

    NAME                 shift, and go to state 107
    STRING               shift, and go to state 4
    INTEGER              shift, and go to state 5
    SQUAREBRACKET_START  shift, and go to state 108
    TRUE                 shift, and go to state 16
    NONE                 shift, and go to state 17
    FALSE                shift, and go to state 26
    '.'                  shift, and go to state 32
    '*'                  shift, and go to state 109
    '('                  shift, and go to state 110

    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    '.'                  [reduce using rule 415 (t_primary)]
    '('                  [reduce using rule 415 (t_primary)]
    '&'                  reduce using rule 331 (atom)
    '&'                  [reduce using rule 392 (star_target)]
    '&'                  [reduce using rule 395 (target_with_star_atom)]
    '&'                  [reduce using rule 415 (t_primary)]
    $default             reduce using rule 331 (atom)

    atom                   go to state 111
    strings                go to state 84
    star_target            go to state 598
    target_with_star_atom  go to state 114
    star_atom              go to state 115
    t_primary              go to state 116


state 495

   75 with_stmt: WITH '(' ',' '.' with_item . '+' ',' '?' ')' ':' block

    '+'  shift, and go to state 599


state 496

   87 match_stmt: MATCH subject_expr ':' NEWLINE INDENT . case_block '+' DEDENT

    CASE  shift, and go to state 600

    case_block  go to state 601


state 497

  220 star_named_expressions: ',' '.' . star_named_expression '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    NAME     shift, and go to state 92
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '*'      shift, and go to state 123
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 221 (star_named_expression)]
    '+'                  [reduce using rule 224 (assigment_expression)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 229 (expression)
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    star_named_expression  go to state 602
    assigment_expression   go to state 94
    named_expression       go to state 416
    expression             go to state 96
    lambdef                go to state 68
    disjunction            go to state 69
    conjunction            go to state 70
    inversion              go to state 71
    comparison             go to state 72
    bitwise_or             go to state 73
    bitwise_xor            go to state 74
    bitwise_and            go to state 75
    shift_expr             go to state 76
    sum                    go to state 77
    term                   go to state 78
    factor                 go to state 79
    power                  go to state 80
    await_primary          go to state 81
    primary                go to state 82
    atom                   go to state 97
    strings                go to state 84


state 498

   89 subject_expr: star_named_expression ',' star_named_expressions '?' .

    $default  reduce using rule 89 (subject_expr)


state 499

  170 raise_stmt: RAISE expression SQUAREBRACKET_START FROM expression . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 603


state 500

  247 lambda_star_etc: '*' ',' lambda_param_maybe_default . '+' SQUAREBRACKET_START lambda_kwds SQUAREBRACKET_END

    '+'  shift, and go to state 604


state 501

  257 lambda_param_maybe_default: lambda_param . default '?' ','
  258                           | lambda_param . default '?' '&' ':'

    EQUAL  shift, and go to state 395

    default  go to state 605


state 502

  249 lambda_kwds: '*' '*' lambda_param_no_default .

    $default  reduce using rule 249 (lambda_kwds)


state 503

  246 lambda_star_etc: '*' lambda_param_no_default lambda_param_maybe_default . '*' SQUAREBRACKET_START lambda_kwds SQUAREBRACKET_END

    '*'  shift, and go to state 606


state 504

  233 lambdef: LAMBDA SQUAREBRACKET_START lambda_params SQUAREBRACKET_END ':' . expression

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 229 (expression)
    SQUAREBRACKET_START  [reduce using rule 260 (disjunction)]
    SQUAREBRACKET_START  [reduce using rule 263 (conjunction)]
    SQUAREBRACKET_START  [reduce using rule 266 (inversion)]
    SQUAREBRACKET_START  [reduce using rule 287 (bitwise_or)]
    SQUAREBRACKET_START  [reduce using rule 290 (bitwise_xor)]
    SQUAREBRACKET_START  [reduce using rule 293 (bitwise_and)]
    SQUAREBRACKET_START  [reduce using rule 296 (shift_expr)]
    SQUAREBRACKET_START  [reduce using rule 300 (sum)]
    SQUAREBRACKET_START  [reduce using rule 304 (term)]
    SQUAREBRACKET_START  [reduce using rule 311 (factor)]
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 229 (expression)
    SQUAREBRACKET_END    [reduce using rule 260 (disjunction)]
    SQUAREBRACKET_END    [reduce using rule 263 (conjunction)]
    SQUAREBRACKET_END    [reduce using rule 266 (inversion)]
    SQUAREBRACKET_END    [reduce using rule 287 (bitwise_or)]
    SQUAREBRACKET_END    [reduce using rule 290 (bitwise_xor)]
    SQUAREBRACKET_END    [reduce using rule 293 (bitwise_and)]
    SQUAREBRACKET_END    [reduce using rule 296 (shift_expr)]
    SQUAREBRACKET_END    [reduce using rule 300 (sum)]
    SQUAREBRACKET_END    [reduce using rule 304 (term)]
    SQUAREBRACKET_END    [reduce using rule 311 (factor)]
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    AS                   reduce using rule 229 (expression)
    AS                   [reduce using rule 260 (disjunction)]
    AS                   [reduce using rule 263 (conjunction)]
    AS                   [reduce using rule 266 (inversion)]
    AS                   [reduce using rule 287 (bitwise_or)]
    AS                   [reduce using rule 290 (bitwise_xor)]
    AS                   [reduce using rule 293 (bitwise_and)]
    AS                   [reduce using rule 296 (shift_expr)]
    AS                   [reduce using rule 300 (sum)]
    AS                   [reduce using rule 304 (term)]
    AS                   [reduce using rule 311 (factor)]
    AS                   [reduce using rule 320 (primary)]
    AS                   [reduce using rule 331 (atom)]
    TYPE_COMMENT         reduce using rule 229 (expression)
    TYPE_COMMENT         [reduce using rule 260 (disjunction)]
    TYPE_COMMENT         [reduce using rule 263 (conjunction)]
    TYPE_COMMENT         [reduce using rule 266 (inversion)]
    TYPE_COMMENT         [reduce using rule 287 (bitwise_or)]
    TYPE_COMMENT         [reduce using rule 290 (bitwise_xor)]
    TYPE_COMMENT         [reduce using rule 293 (bitwise_and)]
    TYPE_COMMENT         [reduce using rule 296 (shift_expr)]
    TYPE_COMMENT         [reduce using rule 300 (sum)]
    TYPE_COMMENT         [reduce using rule 304 (term)]
    TYPE_COMMENT         [reduce using rule 311 (factor)]
    TYPE_COMMENT         [reduce using rule 320 (primary)]
    TYPE_COMMENT         [reduce using rule 331 (atom)]
    FOR                  reduce using rule 229 (expression)
    FOR                  [reduce using rule 260 (disjunction)]
    FOR                  [reduce using rule 263 (conjunction)]
    FOR                  [reduce using rule 266 (inversion)]
    FOR                  [reduce using rule 287 (bitwise_or)]
    FOR                  [reduce using rule 290 (bitwise_xor)]
    FOR                  [reduce using rule 293 (bitwise_and)]
    FOR                  [reduce using rule 296 (shift_expr)]
    FOR                  [reduce using rule 300 (sum)]
    FOR                  [reduce using rule 304 (term)]
    FOR                  [reduce using rule 311 (factor)]
    FOR                  [reduce using rule 320 (primary)]
    FOR                  [reduce using rule 331 (atom)]
    NEWLINE              reduce using rule 229 (expression)
    NEWLINE              [reduce using rule 260 (disjunction)]
    NEWLINE              [reduce using rule 263 (conjunction)]
    NEWLINE              [reduce using rule 266 (inversion)]
    NEWLINE              [reduce using rule 287 (bitwise_or)]
    NEWLINE              [reduce using rule 290 (bitwise_xor)]
    NEWLINE              [reduce using rule 293 (bitwise_and)]
    NEWLINE              [reduce using rule 296 (shift_expr)]
    NEWLINE              [reduce using rule 300 (sum)]
    NEWLINE              [reduce using rule 304 (term)]
    NEWLINE              [reduce using rule 311 (factor)]
    NEWLINE              [reduce using rule 320 (primary)]
    NEWLINE              [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ASYNC                reduce using rule 229 (expression)
    ASYNC                [reduce using rule 260 (disjunction)]
    ASYNC                [reduce using rule 263 (conjunction)]
    ASYNC                [reduce using rule 266 (inversion)]
    ASYNC                [reduce using rule 287 (bitwise_or)]
    ASYNC                [reduce using rule 290 (bitwise_xor)]
    ASYNC                [reduce using rule 293 (bitwise_and)]
    ASYNC                [reduce using rule 296 (shift_expr)]
    ASYNC                [reduce using rule 300 (sum)]
    ASYNC                [reduce using rule 304 (term)]
    ASYNC                [reduce using rule 311 (factor)]
    ASYNC                [reduce using rule 320 (primary)]
    ASYNC                [reduce using rule 331 (atom)]
    ','                  reduce using rule 229 (expression)
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 229 (expression)]
    '+'                  [reduce using rule 260 (disjunction)]
    '+'                  [reduce using rule 263 (conjunction)]
    '+'                  [reduce using rule 266 (inversion)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 229 (expression)
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 229 (expression)
    ':'                  [reduce using rule 260 (disjunction)]
    ':'                  [reduce using rule 263 (conjunction)]
    ':'                  [reduce using rule 266 (inversion)]
    ':'                  [reduce using rule 287 (bitwise_or)]
    ':'                  [reduce using rule 290 (bitwise_xor)]
    ':'                  [reduce using rule 293 (bitwise_and)]
    ':'                  [reduce using rule 296 (shift_expr)]
    ':'                  [reduce using rule 300 (sum)]
    ':'                  [reduce using rule 304 (term)]
    ':'                  [reduce using rule 311 (factor)]
    ':'                  [reduce using rule 320 (primary)]
    ':'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 229 (expression)
    ')'                  [reduce using rule 260 (disjunction)]
    ')'                  [reduce using rule 263 (conjunction)]
    ')'                  [reduce using rule 266 (inversion)]
    ')'                  [reduce using rule 287 (bitwise_or)]
    ')'                  [reduce using rule 290 (bitwise_xor)]
    ')'                  [reduce using rule 293 (bitwise_and)]
    ')'                  [reduce using rule 296 (shift_expr)]
    ')'                  [reduce using rule 300 (sum)]
    ')'                  [reduce using rule 304 (term)]
    ')'                  [reduce using rule 311 (factor)]
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 229 (expression)
    '|'                  [reduce using rule 260 (disjunction)]
    '|'                  [reduce using rule 263 (conjunction)]
    '|'                  [reduce using rule 266 (inversion)]
    '|'                  [reduce using rule 287 (bitwise_or)]
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 229 (expression)
    '&'                  [reduce using rule 260 (disjunction)]
    '&'                  [reduce using rule 263 (conjunction)]
    '&'                  [reduce using rule 266 (inversion)]
    '&'                  [reduce using rule 287 (bitwise_or)]
    '&'                  [reduce using rule 290 (bitwise_xor)]
    '&'                  [reduce using rule 293 (bitwise_and)]
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '?'                  reduce using rule 229 (expression)
    '?'                  [reduce using rule 260 (disjunction)]
    '?'                  [reduce using rule 263 (conjunction)]
    '?'                  [reduce using rule 266 (inversion)]
    '?'                  [reduce using rule 287 (bitwise_or)]
    '?'                  [reduce using rule 290 (bitwise_xor)]
    '?'                  [reduce using rule 293 (bitwise_and)]
    '?'                  [reduce using rule 296 (shift_expr)]
    '?'                  [reduce using rule 300 (sum)]
    '?'                  [reduce using rule 304 (term)]
    '?'                  [reduce using rule 311 (factor)]
    '?'                  [reduce using rule 320 (primary)]
    '?'                  [reduce using rule 331 (atom)]
    '}'                  reduce using rule 229 (expression)
    '}'                  [reduce using rule 260 (disjunction)]
    '}'                  [reduce using rule 263 (conjunction)]
    '}'                  [reduce using rule 266 (inversion)]
    '}'                  [reduce using rule 287 (bitwise_or)]
    '}'                  [reduce using rule 290 (bitwise_xor)]
    '}'                  [reduce using rule 293 (bitwise_and)]
    '}'                  [reduce using rule 296 (shift_expr)]
    '}'                  [reduce using rule 300 (sum)]
    '}'                  [reduce using rule 304 (term)]
    '}'                  [reduce using rule 311 (factor)]
    '}'                  [reduce using rule 320 (primary)]
    '}'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 229 (expression)

    expression     go to state 607
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 505

  236 lambda_parameters: lambda_slash_no_default lambda_param_no_default '*' . lambda_param_with_default '*' SQUAREBRACKET_START

    NAME  shift, and go to state 249

    $default  reduce using rule 253 (lambda_param_with_default)

    lambda_param_with_default  go to state 608
    lambda_param               go to state 391


state 506

  237 lambda_parameters: lambda_slash_with_default lambda_param_with_default '*' . SQUAREBRACKET_START lambda_star_etc SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 609


state 507

  243 lambda_slash_with_default: lambda_param_no_default '*' lambda_param_with_default . '+' '/' ','
  244                          | lambda_param_no_default '*' lambda_param_with_default . '+' '/' '&' ':'

    '+'  shift, and go to state 610


state 508

  241 lambda_slash_no_default: lambda_param_no_default '+' '/' . ','
  242                        | lambda_param_no_default '+' '/' . '&' ':'

    ','  shift, and go to state 611
    '&'  shift, and go to state 612


state 509

  238 lambda_parameters: lambda_param_no_default '+' lambda_param_with_default . '*' SQUAREBRACKET_START lambda_star_etc SQUAREBRACKET_END

    '*'  shift, and go to state 613


state 510

  239 lambda_parameters: lambda_param_with_default '+' SQUAREBRACKET_START . lambda_star_etc SQUAREBRACKET_END

    '*'  shift, and go to state 250

    $default  reduce using rule 245 (lambda_star_etc)

    lambda_star_etc  go to state 614
    lambda_kwds      go to state 256


state 511

  204 default: EQUAL expression .

    $default  reduce using rule 204 (default)


state 512

  252 lambda_param_no_default: lambda_param '&' ':' .

    $default  reduce using rule 252 (lambda_param_no_default)


state 513

  254 lambda_param_with_default: lambda_param default ',' .

    $default  reduce using rule 254 (lambda_param_with_default)


state 514

  255 lambda_param_with_default: lambda_param default '&' . ':'

    ':'  shift, and go to state 615


state 515

  202 param: NAME . annotation '?'

    ':'  shift, and go to state 616

    annotation  go to state 617


state 516

  189 star_etc: '*' . param_no_default param_maybe_default '*' SQUAREBRACKET_START kwds SQUAREBRACKET_END
  190         | '*' . ',' param_maybe_default '+' SQUAREBRACKET_START kwds SQUAREBRACKET_END
  192 kwds: '*' . '*' param_no_default

    NAME  shift, and go to state 515
    ','   shift, and go to state 618
    '*'   shift, and go to state 619

    NAME  [reduce using rule 193 (param_no_default)]
    '*'   [reduce using rule 193 (param_no_default)]

    param_no_default  go to state 620
    param             go to state 621


state 517

  174 function_def_raw: DEF NAME '(' SQUAREBRACKET_START params . SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    SQUAREBRACKET_END  shift, and go to state 622


state 518

  178 params: parameters .

    $default  reduce using rule 178 (params)


state 519

  179 parameters: slash_no_default . param_no_default '*' param_with_default '*' SQUAREBRACKET_START star_etc SQUAREBRACKET_END

    NAME  shift, and go to state 515

    $default  reduce using rule 193 (param_no_default)

    param_no_default  go to state 623
    param             go to state 621


state 520

  180 parameters: slash_with_default . param_with_default '*' SQUAREBRACKET_START star_etc SQUAREBRACKET_END

    NAME  shift, and go to state 515

    $default  reduce using rule 196 (param_with_default)

    param_with_default  go to state 624
    param               go to state 625


state 521

  183 parameters: star_etc .

    $default  reduce using rule 183 (parameters)


state 522

  191 star_etc: kwds .

    $default  reduce using rule 191 (star_etc)


state 523

  181 parameters: param_no_default . '+' param_with_default '*' SQUAREBRACKET_START star_etc SQUAREBRACKET_END
  184 slash_no_default: param_no_default . '+' '/' ','
  185                 | param_no_default . '+' '/' '&' ')'
  186 slash_with_default: param_no_default . '*' param_with_default '+' '/' ','
  187                   | param_no_default . '*' param_with_default '+' '/' '&' ')'

    '*'  shift, and go to state 626
    '+'  shift, and go to state 627


state 524

  182 parameters: param_with_default . '+' SQUAREBRACKET_START star_etc SQUAREBRACKET_END

    '+'  shift, and go to state 628


state 525

  194 param_no_default: param . ',' TYPE_COMMENT '?'
  195                 | param . TYPE_COMMENT '?' '&' ')'
  197 param_with_default: param . default ',' TYPE_COMMENT '?'
  198                   | param . default TYPE_COMMENT '?' '&' ')'

    EQUAL         shift, and go to state 395
    TYPE_COMMENT  shift, and go to state 629
    ','           shift, and go to state 630

    default  go to state 631


state 526

   51 assert_stmt: ASSERT expression SQUAREBRACKET_START ',' expression . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 632


state 527

   74 for_stmt: ASYNC FOR star_targets IN '~' . star_expressions ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '*'      shift, and go to state 33
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 213 (star_expressions)
    ':'                  [reduce using rule 217 (star_expression)]
    ':'                  [reduce using rule 229 (expression)]
    ':'                  [reduce using rule 260 (disjunction)]
    ':'                  [reduce using rule 263 (conjunction)]
    ':'                  [reduce using rule 266 (inversion)]
    ':'                  [reduce using rule 287 (bitwise_or)]
    ':'                  [reduce using rule 290 (bitwise_xor)]
    ':'                  [reduce using rule 293 (bitwise_and)]
    ':'                  [reduce using rule 296 (shift_expr)]
    ':'                  [reduce using rule 300 (sum)]
    ':'                  [reduce using rule 304 (term)]
    ':'                  [reduce using rule 311 (factor)]
    ':'                  [reduce using rule 320 (primary)]
    ':'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    star_expressions  go to state 633
    star_expression   go to state 66
    expression        go to state 67
    lambdef           go to state 68
    disjunction       go to state 69
    conjunction       go to state 70
    inversion         go to state 71
    comparison        go to state 72
    bitwise_or        go to state 73
    bitwise_xor       go to state 74
    bitwise_and       go to state 75
    shift_expr        go to state 76
    sum               go to state 77
    term              go to state 78
    factor            go to state 79
    power             go to state 80
    await_primary     go to state 81
    primary           go to state 82
    atom              go to state 97
    strings           go to state 84


state 528

   78 with_stmt: ASYNC WITH ',' '.' with_item . '+' ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block

    '+'  shift, and go to state 634


state 529

   77 with_stmt: ASYNC WITH '(' ',' '.' . with_item '+' ',' '?' ')' ':' block

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    AS                   reduce using rule 229 (expression)
    AS                   [reduce using rule 260 (disjunction)]
    AS                   [reduce using rule 263 (conjunction)]
    AS                   [reduce using rule 266 (inversion)]
    AS                   [reduce using rule 287 (bitwise_or)]
    AS                   [reduce using rule 290 (bitwise_xor)]
    AS                   [reduce using rule 293 (bitwise_and)]
    AS                   [reduce using rule 296 (shift_expr)]
    AS                   [reduce using rule 300 (sum)]
    AS                   [reduce using rule 304 (term)]
    AS                   [reduce using rule 311 (factor)]
    AS                   [reduce using rule 320 (primary)]
    AS                   [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 229 (expression)]
    '+'                  [reduce using rule 260 (disjunction)]
    '+'                  [reduce using rule 263 (conjunction)]
    '+'                  [reduce using rule 266 (inversion)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    with_item      go to state 635
    expression     go to state 378
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 530

  175 function_def_raw: ASYNC DEF NAME '(' SQUAREBRACKET_START . params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    NAME  shift, and go to state 515
    '*'   shift, and go to state 516

    '*'       [reduce using rule 193 (param_no_default)]
    '+'       reduce using rule 193 (param_no_default)
    '+'       [reduce using rule 196 (param_with_default)]
    $default  reduce using rule 188 (star_etc)

    params              go to state 636
    parameters          go to state 518
    slash_no_default    go to state 519
    slash_with_default  go to state 520
    star_etc            go to state 521
    kwds                go to state 522
    param_no_default    go to state 523
    param_with_default  go to state 524
    param               go to state 525


state 531

  211 block: NEWLINE INDENT statements . DEDENT

    DEDENT  shift, and go to state 637


state 532

   86 finally_block: FINALLY ':' . block

    NAME      shift, and go to state 3
    STRING    shift, and go to state 4
    INTEGER   shift, and go to state 5
    NOT       shift, and go to state 8
    GLOBAL    shift, and go to state 9
    YIELD     shift, and go to state 10
    IMPORT    shift, and go to state 11
    RETURN    shift, and go to state 12
    DEL       shift, and go to state 14
    NONLOCAL  shift, and go to state 15
    NEWLINE   shift, and go to state 266
    TRUE      shift, and go to state 16
    NONE      shift, and go to state 17
    CONTINUE  shift, and go to state 21
    RAISE     shift, and go to state 22
    PASS      shift, and go to state 23
    LAMBDA    shift, and go to state 24
    DEF       shift, and go to state 267
    FALSE     shift, and go to state 26
    ASSERT    shift, and go to state 27
    AWAIT     shift, and go to state 28
    BREAK     shift, and go to state 29
    '.'       shift, and go to state 32
    '*'       shift, and go to state 33
    '+'       shift, and go to state 34
    ';'       shift, and go to state 35
    '('       shift, and go to state 268
    '~'       shift, and go to state 37
    '-'       shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    SQUAREBRACKET_END    reduce using rule 210 (block)
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 415 (t_primary)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 403 (single_target)]
    '*'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '+'                  [reduce using rule 210 (block)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 403 (single_target)]
    '+'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '!'                  reduce using rule 213 (star_expressions)
    '!'                  [reduce using rule 217 (star_expression)]
    '!'                  [reduce using rule 229 (expression)]
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '!'                  [reduce using rule 367 (yield_expr)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 407 (single_subscript_attribute_target)
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '|'                  [reduce using rule 403 (single_target)]
    '|'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '~'                  [reduce using rule 403 (single_target)]
    '~'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 403 (single_target)]
    '-'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '@'                  [reduce using rule 403 (single_target)]
    '@'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '/'                  [reduce using rule 403 (single_target)]
    '/'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '%'                  [reduce using rule 403 (single_target)]
    '%'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '&'                  [reduce using rule 403 (single_target)]
    '&'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  [reduce using rule 415 (t_primary)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '^'                  [reduce using rule 403 (single_target)]
    '^'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '<'                  [reduce using rule 403 (single_target)]
    '<'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '>'                  [reduce using rule 403 (single_target)]
    '>'                  [reduce using rule 407 (single_subscript_attribute_target)]
    $default             reduce using rule 287 (bitwise_or)

    simple_stmts                       go to state 269
    simple_stmt                        go to state 42
    assignment                         go to state 44
    global_stmt                        go to state 45
    nonlocal_stmt                      go to state 46
    yield_stmt                         go to state 47
    assert_stmt                        go to state 48
    del_stmt                           go to state 49
    import_stmt                        go to state 50
    import_name                        go to state 51
    return_stmt                        go to state 58
    raise_stmt                         go to state 59
    block                              go to state 638
    star_expressions                   go to state 65
    star_expression                    go to state 66
    expression                         go to state 67
    lambdef                            go to state 68
    disjunction                        go to state 69
    conjunction                        go to state 70
    inversion                          go to state 71
    comparison                         go to state 72
    bitwise_or                         go to state 73
    bitwise_xor                        go to state 74
    bitwise_and                        go to state 75
    shift_expr                         go to state 76
    sum                                go to state 77
    term                               go to state 78
    factor                             go to state 79
    power                              go to state 80
    await_primary                      go to state 81
    primary                            go to state 82
    atom                               go to state 83
    strings                            go to state 84
    yield_expr                         go to state 85
    single_target                      go to state 86
    single_subscript_attribute_target  go to state 87
    t_primary                          go to state 88


state 533

   85 except_block: EXPECT ':' . block

    NAME      shift, and go to state 3
    STRING    shift, and go to state 4
    INTEGER   shift, and go to state 5
    NOT       shift, and go to state 8
    GLOBAL    shift, and go to state 9
    YIELD     shift, and go to state 10
    IMPORT    shift, and go to state 11
    RETURN    shift, and go to state 12
    DEL       shift, and go to state 14
    NONLOCAL  shift, and go to state 15
    NEWLINE   shift, and go to state 266
    TRUE      shift, and go to state 16
    NONE      shift, and go to state 17
    CONTINUE  shift, and go to state 21
    RAISE     shift, and go to state 22
    PASS      shift, and go to state 23
    LAMBDA    shift, and go to state 24
    DEF       shift, and go to state 267
    FALSE     shift, and go to state 26
    ASSERT    shift, and go to state 27
    AWAIT     shift, and go to state 28
    BREAK     shift, and go to state 29
    '.'       shift, and go to state 32
    '*'       shift, and go to state 33
    '+'       shift, and go to state 34
    ';'       shift, and go to state 35
    '('       shift, and go to state 268
    '~'       shift, and go to state 37
    '-'       shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 415 (t_primary)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 403 (single_target)]
    '*'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '+'                  [reduce using rule 210 (block)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 403 (single_target)]
    '+'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '!'                  reduce using rule 213 (star_expressions)
    '!'                  [reduce using rule 217 (star_expression)]
    '!'                  [reduce using rule 229 (expression)]
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '!'                  [reduce using rule 367 (yield_expr)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 407 (single_subscript_attribute_target)
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '|'                  [reduce using rule 403 (single_target)]
    '|'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '~'                  [reduce using rule 403 (single_target)]
    '~'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 403 (single_target)]
    '-'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '@'                  [reduce using rule 403 (single_target)]
    '@'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '/'                  [reduce using rule 403 (single_target)]
    '/'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '%'                  [reduce using rule 403 (single_target)]
    '%'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '&'                  [reduce using rule 403 (single_target)]
    '&'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  [reduce using rule 415 (t_primary)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '^'                  [reduce using rule 403 (single_target)]
    '^'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '<'                  [reduce using rule 403 (single_target)]
    '<'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '>'                  [reduce using rule 403 (single_target)]
    '>'                  [reduce using rule 407 (single_subscript_attribute_target)]
    $default             reduce using rule 287 (bitwise_or)

    simple_stmts                       go to state 269
    simple_stmt                        go to state 42
    assignment                         go to state 44
    global_stmt                        go to state 45
    nonlocal_stmt                      go to state 46
    yield_stmt                         go to state 47
    assert_stmt                        go to state 48
    del_stmt                           go to state 49
    import_stmt                        go to state 50
    import_name                        go to state 51
    return_stmt                        go to state 58
    raise_stmt                         go to state 59
    block                              go to state 639
    star_expressions                   go to state 65
    star_expression                    go to state 66
    expression                         go to state 67
    lambdef                            go to state 68
    disjunction                        go to state 69
    conjunction                        go to state 70
    inversion                          go to state 71
    comparison                         go to state 72
    bitwise_or                         go to state 73
    bitwise_xor                        go to state 74
    bitwise_and                        go to state 75
    shift_expr                         go to state 76
    sum                                go to state 77
    term                               go to state 78
    factor                             go to state 79
    power                              go to state 80
    await_primary                      go to state 81
    primary                            go to state 82
    atom                               go to state 83
    strings                            go to state 84
    yield_expr                         go to state 85
    single_target                      go to state 86
    single_subscript_attribute_target  go to state 87
    t_primary                          go to state 88


state 534

   84 except_block: EXPECT expression . SQUAREBRACKET_START AS NAME SQUAREBRACKET_END ':' block

    SQUAREBRACKET_START  shift, and go to state 640


state 535

   82 try_stmt: TRY ':' block except_block '+' . SQUAREBRACKET_START else_block SQUAREBRACKET_END SQUAREBRACKET_START finally_block SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 641


state 536

    7 simple_stmts: ';' '.' simple_stmt '+' SQUAREBRACKET_START . ';' SQUAREBRACKET_END NEWLINE

    ';'  shift, and go to state 642


state 537

  220 star_named_expressions: ',' '.' . star_named_expression '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END
  388 star_targets_list_seq: ',' '.' . star_target '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    NAME                 shift, and go to state 413
    STRING               shift, and go to state 4
    INTEGER              shift, and go to state 5
    NOT                  shift, and go to state 8
    SQUAREBRACKET_START  shift, and go to state 108
    TRUE                 shift, and go to state 16
    NONE                 shift, and go to state 17
    LAMBDA               shift, and go to state 24
    FALSE                shift, and go to state 26
    AWAIT                shift, and go to state 28
    '.'                  shift, and go to state 32
    '*'                  shift, and go to state 414
    '+'                  shift, and go to state 34
    '('                  shift, and go to state 110
    '~'                  shift, and go to state 37
    '-'                  shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 415 (t_primary)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 221 (star_named_expression)]
    '+'                  [reduce using rule 224 (assigment_expression)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 392 (star_target)]
    '+'                  [reduce using rule 395 (target_with_star_atom)]
    '!'                  reduce using rule 229 (expression)
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 415 (t_primary)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '&'                  [reduce using rule 415 (t_primary)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    star_named_expression  go to state 602
    assigment_expression   go to state 94
    named_expression       go to state 416
    expression             go to state 96
    lambdef                go to state 68
    disjunction            go to state 69
    conjunction            go to state 70
    inversion              go to state 71
    comparison             go to state 72
    bitwise_or             go to state 73
    bitwise_xor            go to state 74
    bitwise_and            go to state 75
    shift_expr             go to state 76
    sum                    go to state 77
    term                   go to state 78
    factor                 go to state 79
    power                  go to state 80
    await_primary          go to state 81
    primary                go to state 82
    atom                   go to state 83
    strings                go to state 84
    star_target            go to state 583
    target_with_star_atom  go to state 114
    star_atom              go to state 115
    t_primary              go to state 116


state 538

  344 list: SQUAREBRACKET_START SQUAREBRACKET_START star_named_expressions SQUAREBRACKET_END . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 643


state 539

  338 atom: '(' . tuple '|' group '|' genexp ')'
  339     | '(' . list '|' listcomp ')'
  340     | '(' . dict '|' set '|' dictcomp '|' setcomp ')'
  393 star_target: '*' '(' . '!' '*' star_target ')'

    SQUAREBRACKET_START  shift, and go to state 218
    '!'                  shift, and go to state 362
    '('                  shift, and go to state 219
    '{'                  shift, and go to state 144

    $default  reduce using rule 343 (list)

    list   go to state 145
    tuple  go to state 146
    dict   go to state 147


state 540

  347 tuple: '(' SQUAREBRACKET_START star_named_expression ',' . SQUAREBRACKET_START star_named_expressions SQUAREBRACKET_END SQUAREBRACKET_END ')'

    SQUAREBRACKET_START  shift, and go to state 644


state 541

  205 decorators: '(' '@' named_expression NEWLINE ')' . '+'

    '+'  shift, and go to state 645


state 542

  358 double_starred_kvpairs: ',' '.' . double_starred_kvpair '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '*'      shift, and go to state 646
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 229 (expression)
    ':'                  [reduce using rule 260 (disjunction)]
    ':'                  [reduce using rule 263 (conjunction)]
    ':'                  [reduce using rule 266 (inversion)]
    ':'                  [reduce using rule 287 (bitwise_or)]
    ':'                  [reduce using rule 290 (bitwise_xor)]
    ':'                  [reduce using rule 293 (bitwise_and)]
    ':'                  [reduce using rule 296 (shift_expr)]
    ':'                  [reduce using rule 300 (sum)]
    ':'                  [reduce using rule 304 (term)]
    ':'                  [reduce using rule 311 (factor)]
    ':'                  [reduce using rule 320 (primary)]
    ':'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression             go to state 647
    lambdef                go to state 68
    disjunction            go to state 69
    conjunction            go to state 70
    inversion              go to state 71
    comparison             go to state 72
    bitwise_or             go to state 73
    bitwise_xor            go to state 74
    bitwise_and            go to state 75
    shift_expr             go to state 76
    sum                    go to state 77
    term                   go to state 78
    factor                 go to state 79
    power                  go to state 80
    await_primary          go to state 81
    primary                go to state 82
    atom                   go to state 97
    strings                go to state 84
    double_starred_kvpair  go to state 648
    kvpair                 go to state 649


state 543

  355 dict: '{' SQUAREBRACKET_START double_starred_kvpairs SQUAREBRACKET_END . '}'

    '}'  shift, and go to state 650


state 544

  346 listcomp: SQUAREBRACKET_START named_expression . for_if_clauses SQUAREBRACKET_END

    FOR    shift, and go to state 651
    ASYNC  shift, and go to state 652

    '+'       reduce using rule 364 (for_if_clause)
    $default  reduce using rule 362 (for_if_clauses)

    for_if_clauses  go to state 653
    for_if_clause   go to state 654


state 545

  339 atom: '(' list '|' listcomp ')' .

    $default  reduce using rule 339 (atom)


state 546

  349 group: '(' '(' . yield_expr '|' named_expression ')' ')'

    YIELD  shift, and go to state 10

    $default  reduce using rule 367 (yield_expr)

    yield_expr  go to state 655


state 547

  338 atom: '(' tuple '|' group '|' . genexp ')'

    '('  shift, and go to state 656

    $default  reduce using rule 350 (genexp)

    genexp  go to state 657


state 548

  352 set: '{' star_named_expressions . '}'

    '}'  shift, and go to state 658


state 549

  340 atom: '(' dict '|' set '|' . dictcomp '|' setcomp ')'

    '{'  shift, and go to state 659

    $default  reduce using rule 356 (dictcomp)

    dictcomp  go to state 660


state 550

   32 assignment: '(' star_targets EQUAL ')' '+' . '(' yield_expr '|' star_expressions ')' '!' EQUAL SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END

    '('  shift, and go to state 661


state 551

  397 target_with_star_atom: t_primary SQUAREBRACKET_START slices SQUAREBRACKET_END . '!' t_lookahead
  409 single_subscript_attribute_target: t_primary SQUAREBRACKET_START slices SQUAREBRACKET_END . '!' t_lookahead
  417 t_primary: t_primary SQUAREBRACKET_START slices SQUAREBRACKET_END . '&' t_lookahead

    '!'  shift, and go to state 662
    '&'  shift, and go to state 569


state 552

  396 target_with_star_atom: t_primary '.' NAME '!' . t_lookahead
  408 single_subscript_attribute_target: t_primary '.' NAME '!' . t_lookahead

    SQUAREBRACKET_START  shift, and go to state 323
    '.'                  shift, and go to state 324
    '('                  shift, and go to state 325

    t_lookahead  go to state 663


state 553

   56 import_from: FROM '(' '.' . '|' '.' '.' '.' ')' '*' dotted_name IMPORT import_from_targets
   57            | FROM '(' '.' . '|' '.' '.' '.' ')' '+' IMPORT import_from_targets

    '|'  shift, and go to state 664


state 554

  214 star_expressions: star_expression '(' ',' star_expression ')' . '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    '+'  shift, and go to state 665


state 555

  230 expression: disjunction IF disjunction ELSE expression .

    $default  reduce using rule 230 (expression)


state 556

  261 disjunction: conjunction '(' OR conjunction ')' . '+'

    '+'  shift, and go to state 666


state 557

  264 conjunction: inversion '(' AND inversion ')' . '+'

    '+'  shift, and go to state 667


state 558

  280 noteq_bitwise_or: '(' '!' EQUAL ')' . bitwise_or

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 296 (shift_expr)
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 304 (term)

    bitwise_or     go to state 668
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 559

  329 slice: SQUAREBRACKET_START expression SQUAREBRACKET_END . ':' SQUAREBRACKET_START expression SQUAREBRACKET_END SQUAREBRACKET_START ':' SQUAREBRACKET_START expression SQUAREBRACKET_END SQUAREBRACKET_END

    ':'  shift, and go to state 669


state 560

  328 slices: ',' '.' slice . '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    '+'  shift, and go to state 670


state 561

  327 slices: slice '!' ',' .

    $default  reduce using rule 327 (slices)


state 562

  373 args: ',' '.' . '(' starred_expression '|' '(' assigment_expression '|' expression '!' ':' EQUAL ')' '!' EQUAL ')' '+' SQUAREBRACKET_START
  375 kwargs: ',' '.' . kwarg_or_starred '+' ',' ',' '.' kwarg_or_double_starred '+'
  376       | ',' '.' . kwarg_or_starred '+'
  377       | ',' '.' . kwarg_or_double_starred '+'

    NAME  shift, and go to state 671
    '*'   shift, and go to state 672
    '('   shift, and go to state 673

    '+'       reduce using rule 378 (starred_expression)
    '+'       [reduce using rule 382 (kwarg_or_double_starred)]
    $default  reduce using rule 378 (starred_expression)

    starred_expression       go to state 674
    kwarg_or_starred         go to state 675
    kwarg_or_double_starred  go to state 676


state 563

  323 primary: primary '(' SQUAREBRACKET_START arguments SQUAREBRACKET_END . ')'

    ')'  shift, and go to state 677


state 564

  371 arguments: args SQUAREBRACKET_START . ',' SQUAREBRACKET_END '&' ')'

    ','  shift, and go to state 678


state 565

  351 genexp: '(' '(' assigment_expression '|' . expression '!' ':' EQUAL ')' for_if_clauses ')'

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 229 (expression)
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression     go to state 679
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 566

   33 assignment: single_target augassign '~' '(' yield_expr . '|' star_expressions ')'

    '|'  shift, and go to state 680


state 567

   31 assignment: single_subscript_attribute_target ')' ':' expression SQUAREBRACKET_START . EQUAL annotated_rhs SQUAREBRACKET_END

    EQUAL  shift, and go to state 681


state 568

  409 single_subscript_attribute_target: t_primary SQUAREBRACKET_START slices SQUAREBRACKET_END '!' . t_lookahead

    SQUAREBRACKET_START  shift, and go to state 323
    '.'                  shift, and go to state 324
    '('                  shift, and go to state 325

    t_lookahead  go to state 682


state 569

  417 t_primary: t_primary SQUAREBRACKET_START slices SQUAREBRACKET_END '&' . t_lookahead

    SQUAREBRACKET_START  shift, and go to state 323
    '.'                  shift, and go to state 324
    '('                  shift, and go to state 325

    t_lookahead  go to state 683


state 570

  408 single_subscript_attribute_target: t_primary '.' NAME '!' t_lookahead .

    $default  reduce using rule 408 (single_subscript_attribute_target)


state 571

  416 t_primary: t_primary '.' NAME '&' t_lookahead .

    $default  reduce using rule 416 (t_primary)


state 572

  419 t_primary: t_primary '(' SQUAREBRACKET_START arguments SQUAREBRACKET_END . ')' '&' t_lookahead

    ')'  shift, and go to state 684


state 573

   29 assignment: NAME ':' expression SQUAREBRACKET_START EQUAL annotated_rhs . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 685


state 574

  228 annotated_rhs: yield_expr . '|' star_expressions

    '|'  shift, and go to state 686


state 575

  225 assigment_expression: NAME ':' EQUAL '~' expression .

    $default  reduce using rule 225 (assigment_expression)


state 576

   71 else_block: ELSE . ':' block

    ':'  shift, and go to state 687


state 577

   68 if_stmt: IF named_expression ':' block SQUAREBRACKET_START else_block . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 688


state 578

   69 elif_stmt: ELIF named_expression . ':' block elif_stmt
   70          | ELIF named_expression . ':' block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    ':'  shift, and go to state 689


state 579

   72 while_stmt: WHILE named_expression ':' block SQUAREBRACKET_START else_block . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 690


state 580

   64 dotted_as_name: dotted_name SQUAREBRACKET_START AS . NAME SQUAREBRACKET_END

    NAME  shift, and go to state 691


state 581

   65 dotted_name: dotted_name '.' NAME .

    $default  reduce using rule 65 (dotted_name)


state 582

  410 expression_list: expression '(' ',' expression . ')' '*' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    ')'  shift, and go to state 692


state 583

  388 star_targets_list_seq: ',' '.' star_target . '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    '+'  shift, and go to state 693


state 584

  402 star_atom: SQUAREBRACKET_START SQUAREBRACKET_START star_targets_list_seq SQUAREBRACKET_END SQUAREBRACKET_END .

    $default  reduce using rule 402 (star_atom)


state 585

  393 star_target: '*' '(' '!' '*' star_target . ')'

    ')'  shift, and go to state 694


state 586

  401 star_atom: '(' SQUAREBRACKET_START star_targets_tuple_seq SQUAREBRACKET_END ')' .

    $default  reduce using rule 401 (star_atom)


state 587

  390 star_targets_tuple_seq: star_target '(' ',' . star_target ')' '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    NAME                 shift, and go to state 107
    STRING               shift, and go to state 4
    INTEGER              shift, and go to state 5
    SQUAREBRACKET_START  shift, and go to state 108
    TRUE                 shift, and go to state 16
    NONE                 shift, and go to state 17
    FALSE                shift, and go to state 26
    '.'                  shift, and go to state 32
    '*'                  shift, and go to state 109
    '('                  shift, and go to state 110

    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    '.'                  [reduce using rule 415 (t_primary)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 392 (star_target)
    ')'                  [reduce using rule 395 (target_with_star_atom)]
    '&'                  reduce using rule 331 (atom)
    '&'                  [reduce using rule 415 (t_primary)]
    $default             reduce using rule 331 (atom)

    atom                   go to state 111
    strings                go to state 84
    star_target            go to state 695
    target_with_star_atom  go to state 114
    star_atom              go to state 115
    t_primary              go to state 116


state 588

   73 for_stmt: FOR star_targets IN '~' star_expressions ':' . SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 696


state 589

  387 star_targets: star_target '(' ',' star_target ')' . '*' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    '*'  shift, and go to state 697


state 590

  397 target_with_star_atom: t_primary SQUAREBRACKET_START slices SQUAREBRACKET_END '!' . t_lookahead

    SQUAREBRACKET_START  shift, and go to state 323
    '.'                  shift, and go to state 324
    '('                  shift, and go to state 325

    t_lookahead  go to state 698


state 591

  396 target_with_star_atom: t_primary '.' NAME '!' t_lookahead .

    $default  reduce using rule 396 (target_with_star_atom)


state 592

  411 del_targets: ',' '.' del_target '+' SQUAREBRACKET_START . ',' SQUAREBRACKET_END

    ','  shift, and go to state 699


state 593

  414 del_target: t_primary SQUAREBRACKET_START slices . SQUAREBRACKET_END '!' t_lookahead
  417 t_primary: t_primary SQUAREBRACKET_START slices . SQUAREBRACKET_END '&' t_lookahead

    SQUAREBRACKET_END  shift, and go to state 700


state 594

  413 del_target: t_primary '.' NAME . '!' t_lookahead
  416 t_primary: t_primary '.' NAME . '&' t_lookahead

    '!'  shift, and go to state 701
    '&'  shift, and go to state 462


state 595

   52 del_stmt: DEL del_targets '&' '(' ';' '|' . NEWLINE ')'

    NEWLINE  shift, and go to state 702


state 596

  209 class_def_raw: CLASS NAME SQUAREBRACKET_START '(' SQUAREBRACKET_START arguments . SQUAREBRACKET_END ')' SQUAREBRACKET_END ':' block

    SQUAREBRACKET_END  shift, and go to state 703


state 597

   76 with_stmt: WITH ',' '.' with_item '+' ':' . SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block

    SQUAREBRACKET_START  shift, and go to state 704


state 598

   79 with_item: expression AS star_target . '&' '(' ',' '|' ')' '|' ':' ')'

    '&'  shift, and go to state 705


state 599

   75 with_stmt: WITH '(' ',' '.' with_item '+' . ',' '?' ')' ':' block

    ','  shift, and go to state 706


state 600

   91 case_block: CASE . patterns guard '?' ':' block

    '*'  shift, and go to state 707
    '|'  shift, and go to state 708

    IF        reduce using rule 93 (patterns)
    IF        [reduce using rule 96 (pattern)]
    IF        [reduce using rule 100 (or_pattern)]
    AS        reduce using rule 100 (or_pattern)
    ','       reduce using rule 96 (pattern)
    ','       [reduce using rule 100 (or_pattern)]
    $default  reduce using rule 93 (patterns)

    patterns               go to state 709
    pattern                go to state 710
    as_pattern             go to state 711
    or_pattern             go to state 712
    open_sequence_pattern  go to state 713
    maybe_star_pattern     go to state 714
    star_pattern           go to state 715


state 601

   87 match_stmt: MATCH subject_expr ':' NEWLINE INDENT case_block . '+' DEDENT

    '+'  shift, and go to state 716


state 602

  220 star_named_expressions: ',' '.' star_named_expression . '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    '+'  shift, and go to state 717


state 603

  170 raise_stmt: RAISE expression SQUAREBRACKET_START FROM expression SQUAREBRACKET_END .

    $default  reduce using rule 170 (raise_stmt)


state 604

  247 lambda_star_etc: '*' ',' lambda_param_maybe_default '+' . SQUAREBRACKET_START lambda_kwds SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 718


state 605

  257 lambda_param_maybe_default: lambda_param default . '?' ','
  258                           | lambda_param default . '?' '&' ':'

    '?'  shift, and go to state 719


state 606

  246 lambda_star_etc: '*' lambda_param_no_default lambda_param_maybe_default '*' . SQUAREBRACKET_START lambda_kwds SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 720


state 607

  233 lambdef: LAMBDA SQUAREBRACKET_START lambda_params SQUAREBRACKET_END ':' expression .

    $default  reduce using rule 233 (lambdef)


state 608

  236 lambda_parameters: lambda_slash_no_default lambda_param_no_default '*' lambda_param_with_default . '*' SQUAREBRACKET_START

    '*'  shift, and go to state 721


state 609

  237 lambda_parameters: lambda_slash_with_default lambda_param_with_default '*' SQUAREBRACKET_START . lambda_star_etc SQUAREBRACKET_END

    '*'  shift, and go to state 250

    $default  reduce using rule 245 (lambda_star_etc)

    lambda_star_etc  go to state 722
    lambda_kwds      go to state 256


state 610

  243 lambda_slash_with_default: lambda_param_no_default '*' lambda_param_with_default '+' . '/' ','
  244                          | lambda_param_no_default '*' lambda_param_with_default '+' . '/' '&' ':'

    '/'  shift, and go to state 723


state 611

  241 lambda_slash_no_default: lambda_param_no_default '+' '/' ',' .

    $default  reduce using rule 241 (lambda_slash_no_default)


state 612

  242 lambda_slash_no_default: lambda_param_no_default '+' '/' '&' . ':'

    ':'  shift, and go to state 724


state 613

  238 lambda_parameters: lambda_param_no_default '+' lambda_param_with_default '*' . SQUAREBRACKET_START lambda_star_etc SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 725


state 614

  239 lambda_parameters: lambda_param_with_default '+' SQUAREBRACKET_START lambda_star_etc . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 726


state 615

  255 lambda_param_with_default: lambda_param default '&' ':' .

    $default  reduce using rule 255 (lambda_param_with_default)


state 616

  203 annotation: ':' . expression

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '?'                  reduce using rule 229 (expression)
    '?'                  [reduce using rule 260 (disjunction)]
    '?'                  [reduce using rule 263 (conjunction)]
    '?'                  [reduce using rule 266 (inversion)]
    '?'                  [reduce using rule 287 (bitwise_or)]
    '?'                  [reduce using rule 290 (bitwise_xor)]
    '?'                  [reduce using rule 293 (bitwise_and)]
    '?'                  [reduce using rule 296 (shift_expr)]
    '?'                  [reduce using rule 300 (sum)]
    '?'                  [reduce using rule 304 (term)]
    '?'                  [reduce using rule 311 (factor)]
    '?'                  [reduce using rule 320 (primary)]
    '?'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression     go to state 727
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 617

  202 param: NAME annotation . '?'

    '?'  shift, and go to state 728


state 618

  190 star_etc: '*' ',' . param_maybe_default '+' SQUAREBRACKET_START kwds SQUAREBRACKET_END

    NAME  shift, and go to state 515

    $default  reduce using rule 199 (param_maybe_default)

    param_maybe_default  go to state 729
    param                go to state 730


state 619

  192 kwds: '*' '*' . param_no_default

    NAME  shift, and go to state 515

    $default  reduce using rule 193 (param_no_default)

    param_no_default  go to state 731
    param             go to state 621


state 620

  189 star_etc: '*' param_no_default . param_maybe_default '*' SQUAREBRACKET_START kwds SQUAREBRACKET_END

    NAME  shift, and go to state 515

    $default  reduce using rule 199 (param_maybe_default)

    param_maybe_default  go to state 732
    param                go to state 730


state 621

  194 param_no_default: param . ',' TYPE_COMMENT '?'
  195                 | param . TYPE_COMMENT '?' '&' ')'

    TYPE_COMMENT  shift, and go to state 629
    ','           shift, and go to state 630


state 622

  174 function_def_raw: DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END . ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    ')'  shift, and go to state 733


state 623

  179 parameters: slash_no_default param_no_default . '*' param_with_default '*' SQUAREBRACKET_START star_etc SQUAREBRACKET_END

    '*'  shift, and go to state 734


state 624

  180 parameters: slash_with_default param_with_default . '*' SQUAREBRACKET_START star_etc SQUAREBRACKET_END

    '*'  shift, and go to state 735


state 625

  197 param_with_default: param . default ',' TYPE_COMMENT '?'
  198                   | param . default TYPE_COMMENT '?' '&' ')'

    EQUAL  shift, and go to state 395

    default  go to state 631


state 626

  186 slash_with_default: param_no_default '*' . param_with_default '+' '/' ','
  187                   | param_no_default '*' . param_with_default '+' '/' '&' ')'

    NAME  shift, and go to state 515

    $default  reduce using rule 196 (param_with_default)

    param_with_default  go to state 736
    param               go to state 625


state 627

  181 parameters: param_no_default '+' . param_with_default '*' SQUAREBRACKET_START star_etc SQUAREBRACKET_END
  184 slash_no_default: param_no_default '+' . '/' ','
  185                 | param_no_default '+' . '/' '&' ')'

    NAME  shift, and go to state 515
    '/'   shift, and go to state 737

    $default  reduce using rule 196 (param_with_default)

    param_with_default  go to state 738
    param               go to state 625


state 628

  182 parameters: param_with_default '+' . SQUAREBRACKET_START star_etc SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 739


state 629

  195 param_no_default: param TYPE_COMMENT . '?' '&' ')'

    '?'  shift, and go to state 740


state 630

  194 param_no_default: param ',' . TYPE_COMMENT '?'

    TYPE_COMMENT  shift, and go to state 741


state 631

  197 param_with_default: param default . ',' TYPE_COMMENT '?'
  198                   | param default . TYPE_COMMENT '?' '&' ')'

    TYPE_COMMENT  shift, and go to state 742
    ','           shift, and go to state 743


state 632

   51 assert_stmt: ASSERT expression SQUAREBRACKET_START ',' expression SQUAREBRACKET_END .

    $default  reduce using rule 51 (assert_stmt)


state 633

   74 for_stmt: ASYNC FOR star_targets IN '~' star_expressions . ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    ':'  shift, and go to state 744


state 634

   78 with_stmt: ASYNC WITH ',' '.' with_item '+' . ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block

    ':'  shift, and go to state 745


state 635

   77 with_stmt: ASYNC WITH '(' ',' '.' with_item . '+' ',' '?' ')' ':' block

    '+'  shift, and go to state 746


state 636

  175 function_def_raw: ASYNC DEF NAME '(' SQUAREBRACKET_START params . SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    SQUAREBRACKET_END  shift, and go to state 747


state 637

  211 block: NEWLINE INDENT statements DEDENT .

    $default  reduce using rule 211 (block)


state 638

   86 finally_block: FINALLY ':' block .

    $default  reduce using rule 86 (finally_block)


state 639

   85 except_block: EXPECT ':' block .

    $default  reduce using rule 85 (except_block)


state 640

   84 except_block: EXPECT expression SQUAREBRACKET_START . AS NAME SQUAREBRACKET_END ':' block

    AS  shift, and go to state 748


state 641

   82 try_stmt: TRY ':' block except_block '+' SQUAREBRACKET_START . else_block SQUAREBRACKET_END SQUAREBRACKET_START finally_block SQUAREBRACKET_END

    ELSE  shift, and go to state 576

    else_block  go to state 749


state 642

    7 simple_stmts: ';' '.' simple_stmt '+' SQUAREBRACKET_START ';' . SQUAREBRACKET_END NEWLINE

    SQUAREBRACKET_END  shift, and go to state 750


state 643

  344 list: SQUAREBRACKET_START SQUAREBRACKET_START star_named_expressions SQUAREBRACKET_END SQUAREBRACKET_END .

    $default  reduce using rule 344 (list)


state 644

  347 tuple: '(' SQUAREBRACKET_START star_named_expression ',' SQUAREBRACKET_START . star_named_expressions SQUAREBRACKET_END SQUAREBRACKET_END ')'

    ','  shift, and go to state 381

    star_named_expressions  go to state 751


state 645

  205 decorators: '(' '@' named_expression NEWLINE ')' '+' .

    $default  reduce using rule 205 (decorators)


state 646

  359 double_starred_kvpair: '*' . '*' bitwise_or

    '*'  shift, and go to state 752


state 647

  361 kvpair: expression . ':' expression

    ':'  shift, and go to state 753


state 648

  358 double_starred_kvpairs: ',' '.' double_starred_kvpair . '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    '+'  shift, and go to state 754


state 649

  360 double_starred_kvpair: kvpair .

    $default  reduce using rule 360 (double_starred_kvpair)


state 650

  355 dict: '{' SQUAREBRACKET_START double_starred_kvpairs SQUAREBRACKET_END '}' .

    $default  reduce using rule 355 (dict)


state 651

  366 for_if_clause: FOR . star_targets IN '~' disjunction '(' IF disjunction ')' '*'

    NAME                 shift, and go to state 107
    STRING               shift, and go to state 4
    INTEGER              shift, and go to state 5
    SQUAREBRACKET_START  shift, and go to state 108
    TRUE                 shift, and go to state 16
    NONE                 shift, and go to state 17
    FALSE                shift, and go to state 26
    '.'                  shift, and go to state 32
    '*'                  shift, and go to state 109
    '('                  shift, and go to state 110

    IN                   reduce using rule 385 (star_targets)
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    '.'                  [reduce using rule 415 (t_primary)]
    '!'                  reduce using rule 392 (star_target)
    '!'                  [reduce using rule 395 (target_with_star_atom)]
    '('                  [reduce using rule 392 (star_target)]
    '('                  [reduce using rule 395 (target_with_star_atom)]
    '('                  [reduce using rule 415 (t_primary)]
    '&'                  reduce using rule 331 (atom)
    '&'                  [reduce using rule 415 (t_primary)]
    $default             reduce using rule 331 (atom)

    atom                   go to state 111
    strings                go to state 84
    star_targets           go to state 755
    star_target            go to state 113
    target_with_star_atom  go to state 114
    star_atom              go to state 115
    t_primary              go to state 116


state 652

  365 for_if_clause: ASYNC . FOR star_targets IN '~' disjunction '(' IF disjunction ')' '*'

    FOR  shift, and go to state 756


state 653

  346 listcomp: SQUAREBRACKET_START named_expression for_if_clauses . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 757


state 654

  363 for_if_clauses: for_if_clause . '+'

    '+'  shift, and go to state 758


state 655

  349 group: '(' '(' yield_expr . '|' named_expression ')' ')'

    '|'  shift, and go to state 759


state 656

  351 genexp: '(' . '(' assigment_expression '|' expression '!' ':' EQUAL ')' for_if_clauses ')'

    '('  shift, and go to state 322


state 657

  338 atom: '(' tuple '|' group '|' genexp . ')'

    ')'  shift, and go to state 760


state 658

  352 set: '{' star_named_expressions '}' .

    $default  reduce using rule 352 (set)


state 659

  357 dictcomp: '{' . kvpair for_if_clauses '}'

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    ':'                  reduce using rule 229 (expression)
    ':'                  [reduce using rule 260 (disjunction)]
    ':'                  [reduce using rule 263 (conjunction)]
    ':'                  [reduce using rule 266 (inversion)]
    ':'                  [reduce using rule 287 (bitwise_or)]
    ':'                  [reduce using rule 290 (bitwise_xor)]
    ':'                  [reduce using rule 293 (bitwise_and)]
    ':'                  [reduce using rule 296 (shift_expr)]
    ':'                  [reduce using rule 300 (sum)]
    ':'                  [reduce using rule 304 (term)]
    ':'                  [reduce using rule 311 (factor)]
    ':'                  [reduce using rule 320 (primary)]
    ':'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression     go to state 647
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84
    kvpair         go to state 761


state 660

  340 atom: '(' dict '|' set '|' dictcomp . '|' setcomp ')'

    '|'  shift, and go to state 762


state 661

   32 assignment: '(' star_targets EQUAL ')' '+' '(' . yield_expr '|' star_expressions ')' '!' EQUAL SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END

    YIELD  shift, and go to state 10

    $default  reduce using rule 367 (yield_expr)

    yield_expr  go to state 763


state 662

  397 target_with_star_atom: t_primary SQUAREBRACKET_START slices SQUAREBRACKET_END '!' . t_lookahead
  409 single_subscript_attribute_target: t_primary SQUAREBRACKET_START slices SQUAREBRACKET_END '!' . t_lookahead

    SQUAREBRACKET_START  shift, and go to state 323
    '.'                  shift, and go to state 324
    '('                  shift, and go to state 325

    t_lookahead  go to state 764


state 663

  396 target_with_star_atom: t_primary '.' NAME '!' t_lookahead .
  408 single_subscript_attribute_target: t_primary '.' NAME '!' t_lookahead .

    ')'       reduce using rule 396 (target_with_star_atom)
    ')'       [reduce using rule 408 (single_subscript_attribute_target)]
    $default  reduce using rule 396 (target_with_star_atom)


state 664

   56 import_from: FROM '(' '.' '|' . '.' '.' '.' ')' '*' dotted_name IMPORT import_from_targets
   57            | FROM '(' '.' '|' . '.' '.' '.' ')' '+' IMPORT import_from_targets

    '.'  shift, and go to state 765


state 665

  214 star_expressions: star_expression '(' ',' star_expression ')' '+' . SQUAREBRACKET_START ',' SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 766


state 666

  261 disjunction: conjunction '(' OR conjunction ')' '+' .

    $default  reduce using rule 261 (disjunction)


state 667

  264 conjunction: inversion '(' AND inversion ')' '+' .

    $default  reduce using rule 264 (conjunction)


state 668

  280 noteq_bitwise_or: '(' '!' EQUAL ')' bitwise_or .
  288 bitwise_or: bitwise_or . '|' bitwise_xor

    '|'  shift, and go to state 172

    $default  reduce using rule 280 (noteq_bitwise_or)


state 669

  329 slice: SQUAREBRACKET_START expression SQUAREBRACKET_END ':' . SQUAREBRACKET_START expression SQUAREBRACKET_END SQUAREBRACKET_START ':' SQUAREBRACKET_START expression SQUAREBRACKET_END SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 767


state 670

  328 slices: ',' '.' slice '+' . SQUAREBRACKET_START ',' SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 768


state 671

  380 kwarg_or_starred: NAME . EQUAL expression
  383 kwarg_or_double_starred: NAME . EQUAL expression

    EQUAL  shift, and go to state 769


state 672

  379 starred_expression: '*' . expression
  384 kwarg_or_double_starred: '*' . '*' expression

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '*'      shift, and go to state 770
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 229 (expression)]
    '+'                  [reduce using rule 260 (disjunction)]
    '+'                  [reduce using rule 263 (conjunction)]
    '+'                  [reduce using rule 266 (inversion)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression     go to state 771
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 673

  373 args: ',' '.' '(' . starred_expression '|' '(' assigment_expression '|' expression '!' ':' EQUAL ')' '!' EQUAL ')' '+' SQUAREBRACKET_START

    '*'  shift, and go to state 772

    $default  reduce using rule 378 (starred_expression)

    starred_expression  go to state 773


state 674

  381 kwarg_or_starred: starred_expression .

    $default  reduce using rule 381 (kwarg_or_starred)


state 675

  375 kwargs: ',' '.' kwarg_or_starred . '+' ',' ',' '.' kwarg_or_double_starred '+'
  376       | ',' '.' kwarg_or_starred . '+'

    '+'  shift, and go to state 774


state 676

  377 kwargs: ',' '.' kwarg_or_double_starred . '+'

    '+'  shift, and go to state 775


state 677

  323 primary: primary '(' SQUAREBRACKET_START arguments SQUAREBRACKET_END ')' .

    $default  reduce using rule 323 (primary)


state 678

  371 arguments: args SQUAREBRACKET_START ',' . SQUAREBRACKET_END '&' ')'

    SQUAREBRACKET_END  shift, and go to state 776


state 679

  351 genexp: '(' '(' assigment_expression '|' expression . '!' ':' EQUAL ')' for_if_clauses ')'

    '!'  shift, and go to state 777


state 680

   33 assignment: single_target augassign '~' '(' yield_expr '|' . star_expressions ')'

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '*'      shift, and go to state 33
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 213 (star_expressions)
    ')'                  [reduce using rule 217 (star_expression)]
    ')'                  [reduce using rule 229 (expression)]
    ')'                  [reduce using rule 260 (disjunction)]
    ')'                  [reduce using rule 263 (conjunction)]
    ')'                  [reduce using rule 266 (inversion)]
    ')'                  [reduce using rule 287 (bitwise_or)]
    ')'                  [reduce using rule 290 (bitwise_xor)]
    ')'                  [reduce using rule 293 (bitwise_and)]
    ')'                  [reduce using rule 296 (shift_expr)]
    ')'                  [reduce using rule 300 (sum)]
    ')'                  [reduce using rule 304 (term)]
    ')'                  [reduce using rule 311 (factor)]
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    star_expressions  go to state 778
    star_expression   go to state 66
    expression        go to state 67
    lambdef           go to state 68
    disjunction       go to state 69
    conjunction       go to state 70
    inversion         go to state 71
    comparison        go to state 72
    bitwise_or        go to state 73
    bitwise_xor       go to state 74
    bitwise_and       go to state 75
    shift_expr        go to state 76
    sum               go to state 77
    term              go to state 78
    factor            go to state 79
    power             go to state 80
    await_primary     go to state 81
    primary           go to state 82
    atom              go to state 97
    strings           go to state 84


state 681

   31 assignment: single_subscript_attribute_target ')' ':' expression SQUAREBRACKET_START EQUAL . annotated_rhs SQUAREBRACKET_END

    YIELD  shift, and go to state 10

    $default  reduce using rule 367 (yield_expr)

    annotated_rhs  go to state 779
    yield_expr     go to state 574


state 682

  409 single_subscript_attribute_target: t_primary SQUAREBRACKET_START slices SQUAREBRACKET_END '!' t_lookahead .

    $default  reduce using rule 409 (single_subscript_attribute_target)


state 683

  417 t_primary: t_primary SQUAREBRACKET_START slices SQUAREBRACKET_END '&' t_lookahead .

    $default  reduce using rule 417 (t_primary)


state 684

  419 t_primary: t_primary '(' SQUAREBRACKET_START arguments SQUAREBRACKET_END ')' . '&' t_lookahead

    '&'  shift, and go to state 780


state 685

   29 assignment: NAME ':' expression SQUAREBRACKET_START EQUAL annotated_rhs SQUAREBRACKET_END .

    $default  reduce using rule 29 (assignment)


state 686

  228 annotated_rhs: yield_expr '|' . star_expressions

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '*'      shift, and go to state 33
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 213 (star_expressions)
    SQUAREBRACKET_END    [reduce using rule 217 (star_expression)]
    SQUAREBRACKET_END    [reduce using rule 229 (expression)]
    SQUAREBRACKET_END    [reduce using rule 260 (disjunction)]
    SQUAREBRACKET_END    [reduce using rule 263 (conjunction)]
    SQUAREBRACKET_END    [reduce using rule 266 (inversion)]
    SQUAREBRACKET_END    [reduce using rule 287 (bitwise_or)]
    SQUAREBRACKET_END    [reduce using rule 290 (bitwise_xor)]
    SQUAREBRACKET_END    [reduce using rule 293 (bitwise_and)]
    SQUAREBRACKET_END    [reduce using rule 296 (shift_expr)]
    SQUAREBRACKET_END    [reduce using rule 300 (sum)]
    SQUAREBRACKET_END    [reduce using rule 304 (term)]
    SQUAREBRACKET_END    [reduce using rule 311 (factor)]
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    star_expressions  go to state 781
    star_expression   go to state 66
    expression        go to state 67
    lambdef           go to state 68
    disjunction       go to state 69
    conjunction       go to state 70
    inversion         go to state 71
    comparison        go to state 72
    bitwise_or        go to state 73
    bitwise_xor       go to state 74
    bitwise_and       go to state 75
    shift_expr        go to state 76
    sum               go to state 77
    term              go to state 78
    factor            go to state 79
    power             go to state 80
    await_primary     go to state 81
    primary           go to state 82
    atom              go to state 97
    strings           go to state 84


state 687

   71 else_block: ELSE ':' . block

    NAME      shift, and go to state 3
    STRING    shift, and go to state 4
    INTEGER   shift, and go to state 5
    NOT       shift, and go to state 8
    GLOBAL    shift, and go to state 9
    YIELD     shift, and go to state 10
    IMPORT    shift, and go to state 11
    RETURN    shift, and go to state 12
    DEL       shift, and go to state 14
    NONLOCAL  shift, and go to state 15
    NEWLINE   shift, and go to state 266
    TRUE      shift, and go to state 16
    NONE      shift, and go to state 17
    CONTINUE  shift, and go to state 21
    RAISE     shift, and go to state 22
    PASS      shift, and go to state 23
    LAMBDA    shift, and go to state 24
    DEF       shift, and go to state 267
    FALSE     shift, and go to state 26
    ASSERT    shift, and go to state 27
    AWAIT     shift, and go to state 28
    BREAK     shift, and go to state 29
    '.'       shift, and go to state 32
    '*'       shift, and go to state 33
    '+'       shift, and go to state 34
    ';'       shift, and go to state 35
    '('       shift, and go to state 268
    '~'       shift, and go to state 37
    '-'       shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    SQUAREBRACKET_END    reduce using rule 210 (block)
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 415 (t_primary)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 403 (single_target)]
    '*'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 403 (single_target)]
    '+'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '!'                  reduce using rule 213 (star_expressions)
    '!'                  [reduce using rule 217 (star_expression)]
    '!'                  [reduce using rule 229 (expression)]
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '!'                  [reduce using rule 367 (yield_expr)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 407 (single_subscript_attribute_target)
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '|'                  [reduce using rule 403 (single_target)]
    '|'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '~'                  [reduce using rule 403 (single_target)]
    '~'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 403 (single_target)]
    '-'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '@'                  [reduce using rule 403 (single_target)]
    '@'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '/'                  [reduce using rule 403 (single_target)]
    '/'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '%'                  [reduce using rule 403 (single_target)]
    '%'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '&'                  [reduce using rule 403 (single_target)]
    '&'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  [reduce using rule 415 (t_primary)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '^'                  [reduce using rule 403 (single_target)]
    '^'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '<'                  [reduce using rule 403 (single_target)]
    '<'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '>'                  [reduce using rule 403 (single_target)]
    '>'                  [reduce using rule 407 (single_subscript_attribute_target)]
    $default             reduce using rule 287 (bitwise_or)

    simple_stmts                       go to state 269
    simple_stmt                        go to state 42
    assignment                         go to state 44
    global_stmt                        go to state 45
    nonlocal_stmt                      go to state 46
    yield_stmt                         go to state 47
    assert_stmt                        go to state 48
    del_stmt                           go to state 49
    import_stmt                        go to state 50
    import_name                        go to state 51
    return_stmt                        go to state 58
    raise_stmt                         go to state 59
    block                              go to state 782
    star_expressions                   go to state 65
    star_expression                    go to state 66
    expression                         go to state 67
    lambdef                            go to state 68
    disjunction                        go to state 69
    conjunction                        go to state 70
    inversion                          go to state 71
    comparison                         go to state 72
    bitwise_or                         go to state 73
    bitwise_xor                        go to state 74
    bitwise_and                        go to state 75
    shift_expr                         go to state 76
    sum                                go to state 77
    term                               go to state 78
    factor                             go to state 79
    power                              go to state 80
    await_primary                      go to state 81
    primary                            go to state 82
    atom                               go to state 83
    strings                            go to state 84
    yield_expr                         go to state 85
    single_target                      go to state 86
    single_subscript_attribute_target  go to state 87
    t_primary                          go to state 88


state 688

   68 if_stmt: IF named_expression ':' block SQUAREBRACKET_START else_block SQUAREBRACKET_END .

    $default  reduce using rule 68 (if_stmt)


state 689

   69 elif_stmt: ELIF named_expression ':' . block elif_stmt
   70          | ELIF named_expression ':' . block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    NAME      shift, and go to state 3
    STRING    shift, and go to state 4
    INTEGER   shift, and go to state 5
    NOT       shift, and go to state 8
    GLOBAL    shift, and go to state 9
    YIELD     shift, and go to state 10
    IMPORT    shift, and go to state 11
    RETURN    shift, and go to state 12
    DEL       shift, and go to state 14
    NONLOCAL  shift, and go to state 15
    NEWLINE   shift, and go to state 266
    TRUE      shift, and go to state 16
    NONE      shift, and go to state 17
    CONTINUE  shift, and go to state 21
    RAISE     shift, and go to state 22
    PASS      shift, and go to state 23
    LAMBDA    shift, and go to state 24
    DEF       shift, and go to state 267
    FALSE     shift, and go to state 26
    ASSERT    shift, and go to state 27
    AWAIT     shift, and go to state 28
    BREAK     shift, and go to state 29
    '.'       shift, and go to state 32
    '*'       shift, and go to state 33
    '+'       shift, and go to state 34
    ';'       shift, and go to state 35
    '('       shift, and go to state 268
    '~'       shift, and go to state 37
    '-'       shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 210 (block)
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    ELIF                 reduce using rule 210 (block)
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 415 (t_primary)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 403 (single_target)]
    '*'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 403 (single_target)]
    '+'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '!'                  reduce using rule 213 (star_expressions)
    '!'                  [reduce using rule 217 (star_expression)]
    '!'                  [reduce using rule 229 (expression)]
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '!'                  [reduce using rule 367 (yield_expr)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 407 (single_subscript_attribute_target)
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '|'                  [reduce using rule 403 (single_target)]
    '|'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '~'                  [reduce using rule 403 (single_target)]
    '~'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 403 (single_target)]
    '-'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '@'                  [reduce using rule 403 (single_target)]
    '@'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '/'                  [reduce using rule 403 (single_target)]
    '/'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '%'                  [reduce using rule 403 (single_target)]
    '%'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '&'                  [reduce using rule 403 (single_target)]
    '&'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  [reduce using rule 415 (t_primary)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '^'                  [reduce using rule 403 (single_target)]
    '^'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '<'                  [reduce using rule 403 (single_target)]
    '<'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '>'                  [reduce using rule 403 (single_target)]
    '>'                  [reduce using rule 407 (single_subscript_attribute_target)]
    $default             reduce using rule 287 (bitwise_or)

    simple_stmts                       go to state 269
    simple_stmt                        go to state 42
    assignment                         go to state 44
    global_stmt                        go to state 45
    nonlocal_stmt                      go to state 46
    yield_stmt                         go to state 47
    assert_stmt                        go to state 48
    del_stmt                           go to state 49
    import_stmt                        go to state 50
    import_name                        go to state 51
    return_stmt                        go to state 58
    raise_stmt                         go to state 59
    block                              go to state 783
    star_expressions                   go to state 65
    star_expression                    go to state 66
    expression                         go to state 67
    lambdef                            go to state 68
    disjunction                        go to state 69
    conjunction                        go to state 70
    inversion                          go to state 71
    comparison                         go to state 72
    bitwise_or                         go to state 73
    bitwise_xor                        go to state 74
    bitwise_and                        go to state 75
    shift_expr                         go to state 76
    sum                                go to state 77
    term                               go to state 78
    factor                             go to state 79
    power                              go to state 80
    await_primary                      go to state 81
    primary                            go to state 82
    atom                               go to state 83
    strings                            go to state 84
    yield_expr                         go to state 85
    single_target                      go to state 86
    single_subscript_attribute_target  go to state 87
    t_primary                          go to state 88


state 690

   72 while_stmt: WHILE named_expression ':' block SQUAREBRACKET_START else_block SQUAREBRACKET_END .

    $default  reduce using rule 72 (while_stmt)


state 691

   64 dotted_as_name: dotted_name SQUAREBRACKET_START AS NAME . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 784


state 692

  410 expression_list: expression '(' ',' expression ')' . '*' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    '*'  shift, and go to state 785


state 693

  388 star_targets_list_seq: ',' '.' star_target '+' . SQUAREBRACKET_START ',' SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 786


state 694

  393 star_target: '*' '(' '!' '*' star_target ')' .

    $default  reduce using rule 393 (star_target)


state 695

  390 star_targets_tuple_seq: star_target '(' ',' star_target . ')' '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    ')'  shift, and go to state 787


state 696

   73 for_stmt: FOR star_targets IN '~' star_expressions ':' SQUAREBRACKET_START . TYPE_COMMENT SQUAREBRACKET_END block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    TYPE_COMMENT  shift, and go to state 788


state 697

  387 star_targets: star_target '(' ',' star_target ')' '*' . SQUAREBRACKET_START ',' SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 789


state 698

  397 target_with_star_atom: t_primary SQUAREBRACKET_START slices SQUAREBRACKET_END '!' t_lookahead .

    $default  reduce using rule 397 (target_with_star_atom)


state 699

  411 del_targets: ',' '.' del_target '+' SQUAREBRACKET_START ',' . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 790


state 700

  414 del_target: t_primary SQUAREBRACKET_START slices SQUAREBRACKET_END . '!' t_lookahead
  417 t_primary: t_primary SQUAREBRACKET_START slices SQUAREBRACKET_END . '&' t_lookahead

    '!'  shift, and go to state 791
    '&'  shift, and go to state 569


state 701

  413 del_target: t_primary '.' NAME '!' . t_lookahead

    SQUAREBRACKET_START  shift, and go to state 323
    '.'                  shift, and go to state 324
    '('                  shift, and go to state 325

    t_lookahead  go to state 792


state 702

   52 del_stmt: DEL del_targets '&' '(' ';' '|' NEWLINE . ')'

    ')'  shift, and go to state 793


state 703

  209 class_def_raw: CLASS NAME SQUAREBRACKET_START '(' SQUAREBRACKET_START arguments SQUAREBRACKET_END . ')' SQUAREBRACKET_END ':' block

    ')'  shift, and go to state 794


state 704

   76 with_stmt: WITH ',' '.' with_item '+' ':' SQUAREBRACKET_START . TYPE_COMMENT SQUAREBRACKET_END block

    TYPE_COMMENT  shift, and go to state 795


state 705

   79 with_item: expression AS star_target '&' . '(' ',' '|' ')' '|' ':' ')'

    '('  shift, and go to state 796


state 706

   75 with_stmt: WITH '(' ',' '.' with_item '+' ',' . '?' ')' ':' block

    '?'  shift, and go to state 797


state 707

  153 star_pattern: '*' . pattern_capture_target
  154             | '*' . wildcard_pattern

    EQUAL  shift, and go to state 798
    '!'    shift, and go to state 799
    '_'    shift, and go to state 800

    $default  reduce using rule 137 (pattern_capture_target)

    pattern_capture_target  go to state 801
    wildcard_pattern        go to state 802


state 708

  101 or_pattern: '|' . '.' closed_pattern '+'

    '.'  shift, and go to state 803


state 709

   91 case_block: CASE patterns . guard '?' ':' block

    IF  shift, and go to state 804

    guard  go to state 805


state 710

   95 patterns: pattern .
  152 maybe_star_pattern: pattern .

    ','       reduce using rule 152 (maybe_star_pattern)
    $default  reduce using rule 95 (patterns)


state 711

   97 pattern: as_pattern .

    $default  reduce using rule 97 (pattern)


state 712

   98 pattern: or_pattern .
   99 as_pattern: or_pattern . AS pattern_capture_target

    AS  shift, and go to state 806

    $default  reduce using rule 98 (pattern)


state 713

   94 patterns: open_sequence_pattern .

    $default  reduce using rule 94 (patterns)


state 714

  149 open_sequence_pattern: maybe_star_pattern . ',' maybe_sequence_pattern '?'

    ','  shift, and go to state 807


state 715

  151 maybe_star_pattern: star_pattern .

    $default  reduce using rule 151 (maybe_star_pattern)


state 716

   87 match_stmt: MATCH subject_expr ':' NEWLINE INDENT case_block '+' . DEDENT

    DEDENT  shift, and go to state 808


state 717

  220 star_named_expressions: ',' '.' star_named_expression '+' . SQUAREBRACKET_START ',' SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 809


state 718

  247 lambda_star_etc: '*' ',' lambda_param_maybe_default '+' SQUAREBRACKET_START . lambda_kwds SQUAREBRACKET_END

    '*'  shift, and go to state 810

    lambda_kwds  go to state 811


state 719

  257 lambda_param_maybe_default: lambda_param default '?' . ','
  258                           | lambda_param default '?' . '&' ':'

    ','  shift, and go to state 812
    '&'  shift, and go to state 813


state 720

  246 lambda_star_etc: '*' lambda_param_no_default lambda_param_maybe_default '*' SQUAREBRACKET_START . lambda_kwds SQUAREBRACKET_END

    '*'  shift, and go to state 810

    lambda_kwds  go to state 814


state 721

  236 lambda_parameters: lambda_slash_no_default lambda_param_no_default '*' lambda_param_with_default '*' . SQUAREBRACKET_START

    SQUAREBRACKET_START  shift, and go to state 815


state 722

  237 lambda_parameters: lambda_slash_with_default lambda_param_with_default '*' SQUAREBRACKET_START lambda_star_etc . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 816


state 723

  243 lambda_slash_with_default: lambda_param_no_default '*' lambda_param_with_default '+' '/' . ','
  244                          | lambda_param_no_default '*' lambda_param_with_default '+' '/' . '&' ':'

    ','  shift, and go to state 817
    '&'  shift, and go to state 818


state 724

  242 lambda_slash_no_default: lambda_param_no_default '+' '/' '&' ':' .

    $default  reduce using rule 242 (lambda_slash_no_default)


state 725

  238 lambda_parameters: lambda_param_no_default '+' lambda_param_with_default '*' SQUAREBRACKET_START . lambda_star_etc SQUAREBRACKET_END

    '*'  shift, and go to state 250

    $default  reduce using rule 245 (lambda_star_etc)

    lambda_star_etc  go to state 819
    lambda_kwds      go to state 256


state 726

  239 lambda_parameters: lambda_param_with_default '+' SQUAREBRACKET_START lambda_star_etc SQUAREBRACKET_END .

    $default  reduce using rule 239 (lambda_parameters)


state 727

  203 annotation: ':' expression .

    $default  reduce using rule 203 (annotation)


state 728

  202 param: NAME annotation '?' .

    $default  reduce using rule 202 (param)


state 729

  190 star_etc: '*' ',' param_maybe_default . '+' SQUAREBRACKET_START kwds SQUAREBRACKET_END

    '+'  shift, and go to state 820


state 730

  200 param_maybe_default: param . default '?' ',' TYPE_COMMENT '?'
  201                    | param . default '?' TYPE_COMMENT '?' '&' ')'

    EQUAL  shift, and go to state 395

    default  go to state 821


state 731

  192 kwds: '*' '*' param_no_default .

    $default  reduce using rule 192 (kwds)


state 732

  189 star_etc: '*' param_no_default param_maybe_default . '*' SQUAREBRACKET_START kwds SQUAREBRACKET_END

    '*'  shift, and go to state 822


state 733

  174 function_def_raw: DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' . SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    SQUAREBRACKET_START  shift, and go to state 823


state 734

  179 parameters: slash_no_default param_no_default '*' . param_with_default '*' SQUAREBRACKET_START star_etc SQUAREBRACKET_END

    NAME  shift, and go to state 515

    $default  reduce using rule 196 (param_with_default)

    param_with_default  go to state 824
    param               go to state 625


state 735

  180 parameters: slash_with_default param_with_default '*' . SQUAREBRACKET_START star_etc SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 825


state 736

  186 slash_with_default: param_no_default '*' param_with_default . '+' '/' ','
  187                   | param_no_default '*' param_with_default . '+' '/' '&' ')'

    '+'  shift, and go to state 826


state 737

  184 slash_no_default: param_no_default '+' '/' . ','
  185                 | param_no_default '+' '/' . '&' ')'

    ','  shift, and go to state 827
    '&'  shift, and go to state 828


state 738

  181 parameters: param_no_default '+' param_with_default . '*' SQUAREBRACKET_START star_etc SQUAREBRACKET_END

    '*'  shift, and go to state 829


state 739

  182 parameters: param_with_default '+' SQUAREBRACKET_START . star_etc SQUAREBRACKET_END

    '*'  shift, and go to state 516

    $default  reduce using rule 188 (star_etc)

    star_etc  go to state 830
    kwds      go to state 522


state 740

  195 param_no_default: param TYPE_COMMENT '?' . '&' ')'

    '&'  shift, and go to state 831


state 741

  194 param_no_default: param ',' TYPE_COMMENT . '?'

    '?'  shift, and go to state 832


state 742

  198 param_with_default: param default TYPE_COMMENT . '?' '&' ')'

    '?'  shift, and go to state 833


state 743

  197 param_with_default: param default ',' . TYPE_COMMENT '?'

    TYPE_COMMENT  shift, and go to state 834


state 744

   74 for_stmt: ASYNC FOR star_targets IN '~' star_expressions ':' . SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 835


state 745

   78 with_stmt: ASYNC WITH ',' '.' with_item '+' ':' . SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block

    SQUAREBRACKET_START  shift, and go to state 836


state 746

   77 with_stmt: ASYNC WITH '(' ',' '.' with_item '+' . ',' '?' ')' ':' block

    ','  shift, and go to state 837


state 747

  175 function_def_raw: ASYNC DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END . ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    ')'  shift, and go to state 838


state 748

   84 except_block: EXPECT expression SQUAREBRACKET_START AS . NAME SQUAREBRACKET_END ':' block

    NAME  shift, and go to state 839


state 749

   82 try_stmt: TRY ':' block except_block '+' SQUAREBRACKET_START else_block . SQUAREBRACKET_END SQUAREBRACKET_START finally_block SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 840


state 750

    7 simple_stmts: ';' '.' simple_stmt '+' SQUAREBRACKET_START ';' SQUAREBRACKET_END . NEWLINE

    NEWLINE  shift, and go to state 841


state 751

  347 tuple: '(' SQUAREBRACKET_START star_named_expression ',' SQUAREBRACKET_START star_named_expressions . SQUAREBRACKET_END SQUAREBRACKET_END ')'

    SQUAREBRACKET_END  shift, and go to state 842


state 752

  359 double_starred_kvpair: '*' '*' . bitwise_or

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 296 (shift_expr)
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 304 (term)

    bitwise_or     go to state 843
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 753

  361 kvpair: expression ':' . expression

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    FOR                  reduce using rule 229 (expression)
    FOR                  [reduce using rule 260 (disjunction)]
    FOR                  [reduce using rule 263 (conjunction)]
    FOR                  [reduce using rule 266 (inversion)]
    FOR                  [reduce using rule 287 (bitwise_or)]
    FOR                  [reduce using rule 290 (bitwise_xor)]
    FOR                  [reduce using rule 293 (bitwise_and)]
    FOR                  [reduce using rule 296 (shift_expr)]
    FOR                  [reduce using rule 300 (sum)]
    FOR                  [reduce using rule 304 (term)]
    FOR                  [reduce using rule 311 (factor)]
    FOR                  [reduce using rule 320 (primary)]
    FOR                  [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ASYNC                reduce using rule 229 (expression)
    ASYNC                [reduce using rule 260 (disjunction)]
    ASYNC                [reduce using rule 263 (conjunction)]
    ASYNC                [reduce using rule 266 (inversion)]
    ASYNC                [reduce using rule 287 (bitwise_or)]
    ASYNC                [reduce using rule 290 (bitwise_xor)]
    ASYNC                [reduce using rule 293 (bitwise_and)]
    ASYNC                [reduce using rule 296 (shift_expr)]
    ASYNC                [reduce using rule 300 (sum)]
    ASYNC                [reduce using rule 304 (term)]
    ASYNC                [reduce using rule 311 (factor)]
    ASYNC                [reduce using rule 320 (primary)]
    ASYNC                [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 229 (expression)]
    '+'                  [reduce using rule 260 (disjunction)]
    '+'                  [reduce using rule 263 (conjunction)]
    '+'                  [reduce using rule 266 (inversion)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '}'                  reduce using rule 229 (expression)
    '}'                  [reduce using rule 260 (disjunction)]
    '}'                  [reduce using rule 263 (conjunction)]
    '}'                  [reduce using rule 266 (inversion)]
    '}'                  [reduce using rule 287 (bitwise_or)]
    '}'                  [reduce using rule 290 (bitwise_xor)]
    '}'                  [reduce using rule 293 (bitwise_and)]
    '}'                  [reduce using rule 296 (shift_expr)]
    '}'                  [reduce using rule 300 (sum)]
    '}'                  [reduce using rule 304 (term)]
    '}'                  [reduce using rule 311 (factor)]
    '}'                  [reduce using rule 320 (primary)]
    '}'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression     go to state 844
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 754

  358 double_starred_kvpairs: ',' '.' double_starred_kvpair '+' . SQUAREBRACKET_START ',' SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 845


state 755

  366 for_if_clause: FOR star_targets . IN '~' disjunction '(' IF disjunction ')' '*'

    IN  shift, and go to state 846


state 756

  365 for_if_clause: ASYNC FOR . star_targets IN '~' disjunction '(' IF disjunction ')' '*'

    NAME                 shift, and go to state 107
    STRING               shift, and go to state 4
    INTEGER              shift, and go to state 5
    SQUAREBRACKET_START  shift, and go to state 108
    TRUE                 shift, and go to state 16
    NONE                 shift, and go to state 17
    FALSE                shift, and go to state 26
    '.'                  shift, and go to state 32
    '*'                  shift, and go to state 109
    '('                  shift, and go to state 110

    IN                   reduce using rule 385 (star_targets)
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    '.'                  [reduce using rule 415 (t_primary)]
    '!'                  reduce using rule 392 (star_target)
    '!'                  [reduce using rule 395 (target_with_star_atom)]
    '('                  [reduce using rule 392 (star_target)]
    '('                  [reduce using rule 395 (target_with_star_atom)]
    '('                  [reduce using rule 415 (t_primary)]
    '&'                  reduce using rule 331 (atom)
    '&'                  [reduce using rule 415 (t_primary)]
    $default             reduce using rule 331 (atom)

    atom                   go to state 111
    strings                go to state 84
    star_targets           go to state 847
    star_target            go to state 113
    target_with_star_atom  go to state 114
    star_atom              go to state 115
    t_primary              go to state 116


state 757

  346 listcomp: SQUAREBRACKET_START named_expression for_if_clauses SQUAREBRACKET_END .

    $default  reduce using rule 346 (listcomp)


state 758

  363 for_if_clauses: for_if_clause '+' .

    $default  reduce using rule 363 (for_if_clauses)


state 759

  349 group: '(' '(' yield_expr '|' . named_expression ')' ')'

    NAME     shift, and go to state 92
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 229 (expression)
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 224 (assigment_expression)
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    assigment_expression  go to state 94
    named_expression      go to state 848
    expression            go to state 96
    lambdef               go to state 68
    disjunction           go to state 69
    conjunction           go to state 70
    inversion             go to state 71
    comparison            go to state 72
    bitwise_or            go to state 73
    bitwise_xor           go to state 74
    bitwise_and           go to state 75
    shift_expr            go to state 76
    sum                   go to state 77
    term                  go to state 78
    factor                go to state 79
    power                 go to state 80
    await_primary         go to state 81
    primary               go to state 82
    atom                  go to state 97
    strings               go to state 84


state 760

  338 atom: '(' tuple '|' group '|' genexp ')' .

    $default  reduce using rule 338 (atom)


state 761

  357 dictcomp: '{' kvpair . for_if_clauses '}'

    FOR    shift, and go to state 651
    ASYNC  shift, and go to state 652

    '+'       reduce using rule 364 (for_if_clause)
    $default  reduce using rule 362 (for_if_clauses)

    for_if_clauses  go to state 849
    for_if_clause   go to state 654


state 762

  340 atom: '(' dict '|' set '|' dictcomp '|' . setcomp ')'

    '{'  shift, and go to state 850

    $default  reduce using rule 353 (setcomp)

    setcomp  go to state 851


state 763

   32 assignment: '(' star_targets EQUAL ')' '+' '(' yield_expr . '|' star_expressions ')' '!' EQUAL SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END

    '|'  shift, and go to state 852


state 764

  397 target_with_star_atom: t_primary SQUAREBRACKET_START slices SQUAREBRACKET_END '!' t_lookahead .
  409 single_subscript_attribute_target: t_primary SQUAREBRACKET_START slices SQUAREBRACKET_END '!' t_lookahead .

    ')'       reduce using rule 397 (target_with_star_atom)
    ')'       [reduce using rule 409 (single_subscript_attribute_target)]
    $default  reduce using rule 397 (target_with_star_atom)


state 765

   56 import_from: FROM '(' '.' '|' '.' . '.' '.' ')' '*' dotted_name IMPORT import_from_targets
   57            | FROM '(' '.' '|' '.' . '.' '.' ')' '+' IMPORT import_from_targets

    '.'  shift, and go to state 853


state 766

  214 star_expressions: star_expression '(' ',' star_expression ')' '+' SQUAREBRACKET_START . ',' SQUAREBRACKET_END

    ','  shift, and go to state 854


state 767

  329 slice: SQUAREBRACKET_START expression SQUAREBRACKET_END ':' SQUAREBRACKET_START . expression SQUAREBRACKET_END SQUAREBRACKET_START ':' SQUAREBRACKET_START expression SQUAREBRACKET_END SQUAREBRACKET_END

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 229 (expression)
    SQUAREBRACKET_END    [reduce using rule 260 (disjunction)]
    SQUAREBRACKET_END    [reduce using rule 263 (conjunction)]
    SQUAREBRACKET_END    [reduce using rule 266 (inversion)]
    SQUAREBRACKET_END    [reduce using rule 287 (bitwise_or)]
    SQUAREBRACKET_END    [reduce using rule 290 (bitwise_xor)]
    SQUAREBRACKET_END    [reduce using rule 293 (bitwise_and)]
    SQUAREBRACKET_END    [reduce using rule 296 (shift_expr)]
    SQUAREBRACKET_END    [reduce using rule 300 (sum)]
    SQUAREBRACKET_END    [reduce using rule 304 (term)]
    SQUAREBRACKET_END    [reduce using rule 311 (factor)]
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression     go to state 855
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 768

  328 slices: ',' '.' slice '+' SQUAREBRACKET_START . ',' SQUAREBRACKET_END

    ','  shift, and go to state 856


state 769

  380 kwarg_or_starred: NAME EQUAL . expression
  383 kwarg_or_double_starred: NAME EQUAL . expression

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 229 (expression)]
    '+'                  [reduce using rule 260 (disjunction)]
    '+'                  [reduce using rule 263 (conjunction)]
    '+'                  [reduce using rule 266 (inversion)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression     go to state 857
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 770

  384 kwarg_or_double_starred: '*' '*' . expression

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 229 (expression)]
    '+'                  [reduce using rule 260 (disjunction)]
    '+'                  [reduce using rule 263 (conjunction)]
    '+'                  [reduce using rule 266 (inversion)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression     go to state 858
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 771

  379 starred_expression: '*' expression .

    $default  reduce using rule 379 (starred_expression)


state 772

  379 starred_expression: '*' . expression

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 229 (expression)
    '|'                  [reduce using rule 260 (disjunction)]
    '|'                  [reduce using rule 263 (conjunction)]
    '|'                  [reduce using rule 266 (inversion)]
    '|'                  [reduce using rule 287 (bitwise_or)]
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression     go to state 771
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 773

  373 args: ',' '.' '(' starred_expression . '|' '(' assigment_expression '|' expression '!' ':' EQUAL ')' '!' EQUAL ')' '+' SQUAREBRACKET_START

    '|'  shift, and go to state 859


state 774

  375 kwargs: ',' '.' kwarg_or_starred '+' . ',' ',' '.' kwarg_or_double_starred '+'
  376       | ',' '.' kwarg_or_starred '+' .

    ','  shift, and go to state 860

    $default  reduce using rule 376 (kwargs)


state 775

  377 kwargs: ',' '.' kwarg_or_double_starred '+' .

    $default  reduce using rule 377 (kwargs)


state 776

  371 arguments: args SQUAREBRACKET_START ',' SQUAREBRACKET_END . '&' ')'

    '&'  shift, and go to state 861


state 777

  351 genexp: '(' '(' assigment_expression '|' expression '!' . ':' EQUAL ')' for_if_clauses ')'

    ':'  shift, and go to state 862


state 778

   33 assignment: single_target augassign '~' '(' yield_expr '|' star_expressions . ')'

    ')'  shift, and go to state 863


state 779

   31 assignment: single_subscript_attribute_target ')' ':' expression SQUAREBRACKET_START EQUAL annotated_rhs . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 864


state 780

  419 t_primary: t_primary '(' SQUAREBRACKET_START arguments SQUAREBRACKET_END ')' '&' . t_lookahead

    SQUAREBRACKET_START  shift, and go to state 323
    '.'                  shift, and go to state 324
    '('                  shift, and go to state 325

    t_lookahead  go to state 865


state 781

  228 annotated_rhs: yield_expr '|' star_expressions .

    $default  reduce using rule 228 (annotated_rhs)


state 782

   71 else_block: ELSE ':' block .

    $default  reduce using rule 71 (else_block)


state 783

   69 elif_stmt: ELIF named_expression ':' block . elif_stmt
   70          | ELIF named_expression ':' block . SQUAREBRACKET_START else_block SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 866
    ELIF                 shift, and go to state 468

    elif_stmt  go to state 867


state 784

   64 dotted_as_name: dotted_name SQUAREBRACKET_START AS NAME SQUAREBRACKET_END .

    $default  reduce using rule 64 (dotted_as_name)


state 785

  410 expression_list: expression '(' ',' expression ')' '*' . SQUAREBRACKET_START ',' SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 868


state 786

  388 star_targets_list_seq: ',' '.' star_target '+' SQUAREBRACKET_START . ',' SQUAREBRACKET_END

    ','  shift, and go to state 869


state 787

  390 star_targets_tuple_seq: star_target '(' ',' star_target ')' . '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END

    '+'  shift, and go to state 870


state 788

   73 for_stmt: FOR star_targets IN '~' star_expressions ':' SQUAREBRACKET_START TYPE_COMMENT . SQUAREBRACKET_END block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 871


state 789

  387 star_targets: star_target '(' ',' star_target ')' '*' SQUAREBRACKET_START . ',' SQUAREBRACKET_END

    ','  shift, and go to state 872


state 790

  411 del_targets: ',' '.' del_target '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END .

    $default  reduce using rule 411 (del_targets)


state 791

  414 del_target: t_primary SQUAREBRACKET_START slices SQUAREBRACKET_END '!' . t_lookahead

    SQUAREBRACKET_START  shift, and go to state 323
    '.'                  shift, and go to state 324
    '('                  shift, and go to state 325

    t_lookahead  go to state 873


state 792

  413 del_target: t_primary '.' NAME '!' t_lookahead .

    $default  reduce using rule 413 (del_target)


state 793

   52 del_stmt: DEL del_targets '&' '(' ';' '|' NEWLINE ')' .

    $default  reduce using rule 52 (del_stmt)


state 794

  209 class_def_raw: CLASS NAME SQUAREBRACKET_START '(' SQUAREBRACKET_START arguments SQUAREBRACKET_END ')' . SQUAREBRACKET_END ':' block

    SQUAREBRACKET_END  shift, and go to state 874


state 795

   76 with_stmt: WITH ',' '.' with_item '+' ':' SQUAREBRACKET_START TYPE_COMMENT . SQUAREBRACKET_END block

    SQUAREBRACKET_END  shift, and go to state 875


state 796

   79 with_item: expression AS star_target '&' '(' . ',' '|' ')' '|' ':' ')'

    ','  shift, and go to state 876


state 797

   75 with_stmt: WITH '(' ',' '.' with_item '+' ',' '?' . ')' ':' block

    ')'  shift, and go to state 877


state 798

  139 pattern_capture_target: EQUAL . ')'

    ')'  shift, and go to state 878


state 799

  138 pattern_capture_target: '!' . '_' NAME '!' '(' '.' '|' '('

    '_'  shift, and go to state 879


state 800

  140 wildcard_pattern: '_' .

    $default  reduce using rule 140 (wildcard_pattern)


state 801

  153 star_pattern: '*' pattern_capture_target .

    $default  reduce using rule 153 (star_pattern)


state 802

  154 star_pattern: '*' wildcard_pattern .

    $default  reduce using rule 154 (star_pattern)


state 803

  101 or_pattern: '|' '.' . closed_pattern '+'

    NAME                 shift, and go to state 880
    STRING               shift, and go to state 4
    INTEGER              shift, and go to state 881
    SQUAREBRACKET_START  shift, and go to state 882
    EQUAL                shift, and go to state 798
    TRUE                 shift, and go to state 883
    NONE                 shift, and go to state 884
    FALSE                shift, and go to state 885
    '!'                  shift, and go to state 799
    '('                  shift, and go to state 886
    '-'                  shift, and go to state 887
    '_'                  shift, and go to state 800
    '{'                  shift, and go to state 888

    '.'       reduce using rule 143 (name_or_attr)
    '+'       reduce using rule 102 (closed_pattern)
    '+'       [reduce using rule 129 (signed_real_number)]
    '+'       [reduce using rule 132 (real_number)]
    '+'       [reduce using rule 137 (pattern_capture_target)]
    '!'       [reduce using rule 126 (signed_number)]
    '('       [reduce using rule 143 (name_or_attr)]
    '-'       [reduce using rule 129 (signed_real_number)]
    '-'       [reduce using rule 132 (real_number)]
    $default  reduce using rule 102 (closed_pattern)

    closed_pattern          go to state 889
    literal_pattern         go to state 890
    complex_number          go to state 891
    signed_number           go to state 892
    signed_real_number      go to state 893
    real_number             go to state 894
    capture_pattern         go to state 895
    pattern_capture_target  go to state 896
    wildcard_pattern        go to state 897
    value_pattern           go to state 898
    attr                    go to state 899
    name_or_attr            go to state 900
    group_pattern           go to state 901
    sequence_pattern        go to state 902
    mapping_pattern         go to state 903
    class_pattern           go to state 904
    strings                 go to state 905


state 804

   92 guard: IF . named_expression

    NAME     shift, and go to state 92
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 229 (expression)
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '?'                  reduce using rule 224 (assigment_expression)
    $default             reduce using rule 287 (bitwise_or)

    assigment_expression  go to state 94
    named_expression      go to state 906
    expression            go to state 96
    lambdef               go to state 68
    disjunction           go to state 69
    conjunction           go to state 70
    inversion             go to state 71
    comparison            go to state 72
    bitwise_or            go to state 73
    bitwise_xor           go to state 74
    bitwise_and           go to state 75
    shift_expr            go to state 76
    sum                   go to state 77
    term                  go to state 78
    factor                go to state 79
    power                 go to state 80
    await_primary         go to state 81
    primary               go to state 82
    atom                  go to state 97
    strings               go to state 84


state 805

   91 case_block: CASE patterns guard . '?' ':' block

    '?'  shift, and go to state 907


state 806

   99 as_pattern: or_pattern AS . pattern_capture_target

    EQUAL  shift, and go to state 798
    '!'    shift, and go to state 799

    $default  reduce using rule 137 (pattern_capture_target)

    pattern_capture_target  go to state 908


state 807

  149 open_sequence_pattern: maybe_star_pattern ',' . maybe_sequence_pattern '?'

    ','  shift, and go to state 909

    maybe_sequence_pattern  go to state 910


state 808

   87 match_stmt: MATCH subject_expr ':' NEWLINE INDENT case_block '+' DEDENT .

    $default  reduce using rule 87 (match_stmt)


state 809

  220 star_named_expressions: ',' '.' star_named_expression '+' SQUAREBRACKET_START . ',' SQUAREBRACKET_END

    ','  shift, and go to state 911


state 810

  249 lambda_kwds: '*' . '*' lambda_param_no_default

    '*'  shift, and go to state 385


state 811

  247 lambda_star_etc: '*' ',' lambda_param_maybe_default '+' SQUAREBRACKET_START lambda_kwds . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 912


state 812

  257 lambda_param_maybe_default: lambda_param default '?' ',' .

    $default  reduce using rule 257 (lambda_param_maybe_default)


state 813

  258 lambda_param_maybe_default: lambda_param default '?' '&' . ':'

    ':'  shift, and go to state 913


state 814

  246 lambda_star_etc: '*' lambda_param_no_default lambda_param_maybe_default '*' SQUAREBRACKET_START lambda_kwds . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 914


state 815

  236 lambda_parameters: lambda_slash_no_default lambda_param_no_default '*' lambda_param_with_default '*' SQUAREBRACKET_START .

    $default  reduce using rule 236 (lambda_parameters)


state 816

  237 lambda_parameters: lambda_slash_with_default lambda_param_with_default '*' SQUAREBRACKET_START lambda_star_etc SQUAREBRACKET_END .

    $default  reduce using rule 237 (lambda_parameters)


state 817

  243 lambda_slash_with_default: lambda_param_no_default '*' lambda_param_with_default '+' '/' ',' .

    $default  reduce using rule 243 (lambda_slash_with_default)


state 818

  244 lambda_slash_with_default: lambda_param_no_default '*' lambda_param_with_default '+' '/' '&' . ':'

    ':'  shift, and go to state 915


state 819

  238 lambda_parameters: lambda_param_no_default '+' lambda_param_with_default '*' SQUAREBRACKET_START lambda_star_etc . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 916


state 820

  190 star_etc: '*' ',' param_maybe_default '+' . SQUAREBRACKET_START kwds SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 917


state 821

  200 param_maybe_default: param default . '?' ',' TYPE_COMMENT '?'
  201                    | param default . '?' TYPE_COMMENT '?' '&' ')'

    '?'  shift, and go to state 918


state 822

  189 star_etc: '*' param_no_default param_maybe_default '*' . SQUAREBRACKET_START kwds SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 919


state 823

  174 function_def_raw: DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START . '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    '-'  shift, and go to state 920


state 824

  179 parameters: slash_no_default param_no_default '*' param_with_default . '*' SQUAREBRACKET_START star_etc SQUAREBRACKET_END

    '*'  shift, and go to state 921


state 825

  180 parameters: slash_with_default param_with_default '*' SQUAREBRACKET_START . star_etc SQUAREBRACKET_END

    '*'  shift, and go to state 516

    $default  reduce using rule 188 (star_etc)

    star_etc  go to state 922
    kwds      go to state 522


state 826

  186 slash_with_default: param_no_default '*' param_with_default '+' . '/' ','
  187                   | param_no_default '*' param_with_default '+' . '/' '&' ')'

    '/'  shift, and go to state 923


state 827

  184 slash_no_default: param_no_default '+' '/' ',' .

    $default  reduce using rule 184 (slash_no_default)


state 828

  185 slash_no_default: param_no_default '+' '/' '&' . ')'

    ')'  shift, and go to state 924


state 829

  181 parameters: param_no_default '+' param_with_default '*' . SQUAREBRACKET_START star_etc SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 925


state 830

  182 parameters: param_with_default '+' SQUAREBRACKET_START star_etc . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 926


state 831

  195 param_no_default: param TYPE_COMMENT '?' '&' . ')'

    ')'  shift, and go to state 927


state 832

  194 param_no_default: param ',' TYPE_COMMENT '?' .

    $default  reduce using rule 194 (param_no_default)


state 833

  198 param_with_default: param default TYPE_COMMENT '?' . '&' ')'

    '&'  shift, and go to state 928


state 834

  197 param_with_default: param default ',' TYPE_COMMENT . '?'

    '?'  shift, and go to state 929


state 835

   74 for_stmt: ASYNC FOR star_targets IN '~' star_expressions ':' SQUAREBRACKET_START . TYPE_COMMENT SQUAREBRACKET_END block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    TYPE_COMMENT  shift, and go to state 930


state 836

   78 with_stmt: ASYNC WITH ',' '.' with_item '+' ':' SQUAREBRACKET_START . TYPE_COMMENT SQUAREBRACKET_END block

    TYPE_COMMENT  shift, and go to state 931


state 837

   77 with_stmt: ASYNC WITH '(' ',' '.' with_item '+' ',' . '?' ')' ':' block

    '?'  shift, and go to state 932


state 838

  175 function_def_raw: ASYNC DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' . SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    SQUAREBRACKET_START  shift, and go to state 933


state 839

   84 except_block: EXPECT expression SQUAREBRACKET_START AS NAME . SQUAREBRACKET_END ':' block

    SQUAREBRACKET_END  shift, and go to state 934


state 840

   82 try_stmt: TRY ':' block except_block '+' SQUAREBRACKET_START else_block SQUAREBRACKET_END . SQUAREBRACKET_START finally_block SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 935


state 841

    7 simple_stmts: ';' '.' simple_stmt '+' SQUAREBRACKET_START ';' SQUAREBRACKET_END NEWLINE .

    $default  reduce using rule 7 (simple_stmts)


state 842

  347 tuple: '(' SQUAREBRACKET_START star_named_expression ',' SQUAREBRACKET_START star_named_expressions SQUAREBRACKET_END . SQUAREBRACKET_END ')'

    SQUAREBRACKET_END  shift, and go to state 936


state 843

  288 bitwise_or: bitwise_or . '|' bitwise_xor
  359 double_starred_kvpair: '*' '*' bitwise_or .

    '|'  shift, and go to state 172

    $default  reduce using rule 359 (double_starred_kvpair)


state 844

  361 kvpair: expression ':' expression .

    $default  reduce using rule 361 (kvpair)


state 845

  358 double_starred_kvpairs: ',' '.' double_starred_kvpair '+' SQUAREBRACKET_START . ',' SQUAREBRACKET_END

    ','  shift, and go to state 937


state 846

  366 for_if_clause: FOR star_targets IN . '~' disjunction '(' IF disjunction ')' '*'

    '~'  shift, and go to state 938


state 847

  365 for_if_clause: ASYNC FOR star_targets . IN '~' disjunction '(' IF disjunction ')' '*'

    IN  shift, and go to state 939


state 848

  349 group: '(' '(' yield_expr '|' named_expression . ')' ')'

    ')'  shift, and go to state 940


state 849

  357 dictcomp: '{' kvpair for_if_clauses . '}'

    '}'  shift, and go to state 941


state 850

  354 setcomp: '{' . named_expression for_if_clauses '}'

    NAME     shift, and go to state 92
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    FOR                  reduce using rule 224 (assigment_expression)
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ASYNC                reduce using rule 224 (assigment_expression)
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 224 (assigment_expression)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 229 (expression)
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '}'                  reduce using rule 224 (assigment_expression)
    $default             reduce using rule 287 (bitwise_or)

    assigment_expression  go to state 94
    named_expression      go to state 942
    expression            go to state 96
    lambdef               go to state 68
    disjunction           go to state 69
    conjunction           go to state 70
    inversion             go to state 71
    comparison            go to state 72
    bitwise_or            go to state 73
    bitwise_xor           go to state 74
    bitwise_and           go to state 75
    shift_expr            go to state 76
    sum                   go to state 77
    term                  go to state 78
    factor                go to state 79
    power                 go to state 80
    await_primary         go to state 81
    primary               go to state 82
    atom                  go to state 97
    strings               go to state 84


state 851

  340 atom: '(' dict '|' set '|' dictcomp '|' setcomp . ')'

    ')'  shift, and go to state 943


state 852

   32 assignment: '(' star_targets EQUAL ')' '+' '(' yield_expr '|' . star_expressions ')' '!' EQUAL SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '*'      shift, and go to state 33
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 213 (star_expressions)
    ')'                  [reduce using rule 217 (star_expression)]
    ')'                  [reduce using rule 229 (expression)]
    ')'                  [reduce using rule 260 (disjunction)]
    ')'                  [reduce using rule 263 (conjunction)]
    ')'                  [reduce using rule 266 (inversion)]
    ')'                  [reduce using rule 287 (bitwise_or)]
    ')'                  [reduce using rule 290 (bitwise_xor)]
    ')'                  [reduce using rule 293 (bitwise_and)]
    ')'                  [reduce using rule 296 (shift_expr)]
    ')'                  [reduce using rule 300 (sum)]
    ')'                  [reduce using rule 304 (term)]
    ')'                  [reduce using rule 311 (factor)]
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    star_expressions  go to state 944
    star_expression   go to state 66
    expression        go to state 67
    lambdef           go to state 68
    disjunction       go to state 69
    conjunction       go to state 70
    inversion         go to state 71
    comparison        go to state 72
    bitwise_or        go to state 73
    bitwise_xor       go to state 74
    bitwise_and       go to state 75
    shift_expr        go to state 76
    sum               go to state 77
    term              go to state 78
    factor            go to state 79
    power             go to state 80
    await_primary     go to state 81
    primary           go to state 82
    atom              go to state 97
    strings           go to state 84


state 853

   56 import_from: FROM '(' '.' '|' '.' '.' . '.' ')' '*' dotted_name IMPORT import_from_targets
   57            | FROM '(' '.' '|' '.' '.' . '.' ')' '+' IMPORT import_from_targets

    '.'  shift, and go to state 945


state 854

  214 star_expressions: star_expression '(' ',' star_expression ')' '+' SQUAREBRACKET_START ',' . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 946


state 855

  329 slice: SQUAREBRACKET_START expression SQUAREBRACKET_END ':' SQUAREBRACKET_START expression . SQUAREBRACKET_END SQUAREBRACKET_START ':' SQUAREBRACKET_START expression SQUAREBRACKET_END SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 947


state 856

  328 slices: ',' '.' slice '+' SQUAREBRACKET_START ',' . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 948


state 857

  380 kwarg_or_starred: NAME EQUAL expression .
  383 kwarg_or_double_starred: NAME EQUAL expression .

    '+'       reduce using rule 380 (kwarg_or_starred)
    '+'       [reduce using rule 383 (kwarg_or_double_starred)]
    $default  reduce using rule 380 (kwarg_or_starred)


state 858

  384 kwarg_or_double_starred: '*' '*' expression .

    $default  reduce using rule 384 (kwarg_or_double_starred)


state 859

  373 args: ',' '.' '(' starred_expression '|' . '(' assigment_expression '|' expression '!' ':' EQUAL ')' '!' EQUAL ')' '+' SQUAREBRACKET_START

    '('  shift, and go to state 949


state 860

  375 kwargs: ',' '.' kwarg_or_starred '+' ',' . ',' '.' kwarg_or_double_starred '+'

    ','  shift, and go to state 950


state 861

  371 arguments: args SQUAREBRACKET_START ',' SQUAREBRACKET_END '&' . ')'

    ')'  shift, and go to state 951


state 862

  351 genexp: '(' '(' assigment_expression '|' expression '!' ':' . EQUAL ')' for_if_clauses ')'

    EQUAL  shift, and go to state 952


state 863

   33 assignment: single_target augassign '~' '(' yield_expr '|' star_expressions ')' .

    $default  reduce using rule 33 (assignment)


state 864

   31 assignment: single_subscript_attribute_target ')' ':' expression SQUAREBRACKET_START EQUAL annotated_rhs SQUAREBRACKET_END .

    $default  reduce using rule 31 (assignment)


state 865

  419 t_primary: t_primary '(' SQUAREBRACKET_START arguments SQUAREBRACKET_END ')' '&' t_lookahead .

    $default  reduce using rule 419 (t_primary)


state 866

   70 elif_stmt: ELIF named_expression ':' block SQUAREBRACKET_START . else_block SQUAREBRACKET_END

    ELSE  shift, and go to state 576

    else_block  go to state 953


state 867

   69 elif_stmt: ELIF named_expression ':' block elif_stmt .

    $default  reduce using rule 69 (elif_stmt)


state 868

  410 expression_list: expression '(' ',' expression ')' '*' SQUAREBRACKET_START . ',' SQUAREBRACKET_END

    ','  shift, and go to state 954


state 869

  388 star_targets_list_seq: ',' '.' star_target '+' SQUAREBRACKET_START ',' . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 955


state 870

  390 star_targets_tuple_seq: star_target '(' ',' star_target ')' '+' . SQUAREBRACKET_START ',' SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 956


state 871

   73 for_stmt: FOR star_targets IN '~' star_expressions ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END . block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    NAME      shift, and go to state 3
    STRING    shift, and go to state 4
    INTEGER   shift, and go to state 5
    NOT       shift, and go to state 8
    GLOBAL    shift, and go to state 9
    YIELD     shift, and go to state 10
    IMPORT    shift, and go to state 11
    RETURN    shift, and go to state 12
    DEL       shift, and go to state 14
    NONLOCAL  shift, and go to state 15
    NEWLINE   shift, and go to state 266
    TRUE      shift, and go to state 16
    NONE      shift, and go to state 17
    CONTINUE  shift, and go to state 21
    RAISE     shift, and go to state 22
    PASS      shift, and go to state 23
    LAMBDA    shift, and go to state 24
    DEF       shift, and go to state 267
    FALSE     shift, and go to state 26
    ASSERT    shift, and go to state 27
    AWAIT     shift, and go to state 28
    BREAK     shift, and go to state 29
    '.'       shift, and go to state 32
    '*'       shift, and go to state 33
    '+'       shift, and go to state 34
    ';'       shift, and go to state 35
    '('       shift, and go to state 268
    '~'       shift, and go to state 37
    '-'       shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 210 (block)
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 415 (t_primary)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 403 (single_target)]
    '*'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 403 (single_target)]
    '+'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '!'                  reduce using rule 213 (star_expressions)
    '!'                  [reduce using rule 217 (star_expression)]
    '!'                  [reduce using rule 229 (expression)]
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '!'                  [reduce using rule 367 (yield_expr)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 407 (single_subscript_attribute_target)
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '|'                  [reduce using rule 403 (single_target)]
    '|'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '~'                  [reduce using rule 403 (single_target)]
    '~'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 403 (single_target)]
    '-'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '@'                  [reduce using rule 403 (single_target)]
    '@'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '/'                  [reduce using rule 403 (single_target)]
    '/'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '%'                  [reduce using rule 403 (single_target)]
    '%'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '&'                  [reduce using rule 403 (single_target)]
    '&'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  [reduce using rule 415 (t_primary)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '^'                  [reduce using rule 403 (single_target)]
    '^'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '<'                  [reduce using rule 403 (single_target)]
    '<'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '>'                  [reduce using rule 403 (single_target)]
    '>'                  [reduce using rule 407 (single_subscript_attribute_target)]
    $default             reduce using rule 287 (bitwise_or)

    simple_stmts                       go to state 269
    simple_stmt                        go to state 42
    assignment                         go to state 44
    global_stmt                        go to state 45
    nonlocal_stmt                      go to state 46
    yield_stmt                         go to state 47
    assert_stmt                        go to state 48
    del_stmt                           go to state 49
    import_stmt                        go to state 50
    import_name                        go to state 51
    return_stmt                        go to state 58
    raise_stmt                         go to state 59
    block                              go to state 957
    star_expressions                   go to state 65
    star_expression                    go to state 66
    expression                         go to state 67
    lambdef                            go to state 68
    disjunction                        go to state 69
    conjunction                        go to state 70
    inversion                          go to state 71
    comparison                         go to state 72
    bitwise_or                         go to state 73
    bitwise_xor                        go to state 74
    bitwise_and                        go to state 75
    shift_expr                         go to state 76
    sum                                go to state 77
    term                               go to state 78
    factor                             go to state 79
    power                              go to state 80
    await_primary                      go to state 81
    primary                            go to state 82
    atom                               go to state 83
    strings                            go to state 84
    yield_expr                         go to state 85
    single_target                      go to state 86
    single_subscript_attribute_target  go to state 87
    t_primary                          go to state 88


state 872

  387 star_targets: star_target '(' ',' star_target ')' '*' SQUAREBRACKET_START ',' . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 958


state 873

  414 del_target: t_primary SQUAREBRACKET_START slices SQUAREBRACKET_END '!' t_lookahead .

    $default  reduce using rule 414 (del_target)


state 874

  209 class_def_raw: CLASS NAME SQUAREBRACKET_START '(' SQUAREBRACKET_START arguments SQUAREBRACKET_END ')' SQUAREBRACKET_END . ':' block

    ':'  shift, and go to state 959


state 875

   76 with_stmt: WITH ',' '.' with_item '+' ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END . block

    NAME      shift, and go to state 3
    STRING    shift, and go to state 4
    INTEGER   shift, and go to state 5
    NOT       shift, and go to state 8
    GLOBAL    shift, and go to state 9
    YIELD     shift, and go to state 10
    IMPORT    shift, and go to state 11
    RETURN    shift, and go to state 12
    DEL       shift, and go to state 14
    NONLOCAL  shift, and go to state 15
    NEWLINE   shift, and go to state 266
    TRUE      shift, and go to state 16
    NONE      shift, and go to state 17
    CONTINUE  shift, and go to state 21
    RAISE     shift, and go to state 22
    PASS      shift, and go to state 23
    LAMBDA    shift, and go to state 24
    DEF       shift, and go to state 267
    FALSE     shift, and go to state 26
    ASSERT    shift, and go to state 27
    AWAIT     shift, and go to state 28
    BREAK     shift, and go to state 29
    '.'       shift, and go to state 32
    '*'       shift, and go to state 33
    '+'       shift, and go to state 34
    ';'       shift, and go to state 35
    '('       shift, and go to state 268
    '~'       shift, and go to state 37
    '-'       shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 415 (t_primary)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 403 (single_target)]
    '*'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '+'                  [reduce using rule 210 (block)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 403 (single_target)]
    '+'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '!'                  reduce using rule 213 (star_expressions)
    '!'                  [reduce using rule 217 (star_expression)]
    '!'                  [reduce using rule 229 (expression)]
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '!'                  [reduce using rule 367 (yield_expr)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 407 (single_subscript_attribute_target)
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '|'                  [reduce using rule 403 (single_target)]
    '|'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '~'                  [reduce using rule 403 (single_target)]
    '~'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 403 (single_target)]
    '-'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '@'                  [reduce using rule 403 (single_target)]
    '@'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '/'                  [reduce using rule 403 (single_target)]
    '/'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '%'                  [reduce using rule 403 (single_target)]
    '%'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '&'                  [reduce using rule 403 (single_target)]
    '&'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  [reduce using rule 415 (t_primary)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '^'                  [reduce using rule 403 (single_target)]
    '^'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '<'                  [reduce using rule 403 (single_target)]
    '<'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '>'                  [reduce using rule 403 (single_target)]
    '>'                  [reduce using rule 407 (single_subscript_attribute_target)]
    $default             reduce using rule 287 (bitwise_or)

    simple_stmts                       go to state 269
    simple_stmt                        go to state 42
    assignment                         go to state 44
    global_stmt                        go to state 45
    nonlocal_stmt                      go to state 46
    yield_stmt                         go to state 47
    assert_stmt                        go to state 48
    del_stmt                           go to state 49
    import_stmt                        go to state 50
    import_name                        go to state 51
    return_stmt                        go to state 58
    raise_stmt                         go to state 59
    block                              go to state 960
    star_expressions                   go to state 65
    star_expression                    go to state 66
    expression                         go to state 67
    lambdef                            go to state 68
    disjunction                        go to state 69
    conjunction                        go to state 70
    inversion                          go to state 71
    comparison                         go to state 72
    bitwise_or                         go to state 73
    bitwise_xor                        go to state 74
    bitwise_and                        go to state 75
    shift_expr                         go to state 76
    sum                                go to state 77
    term                               go to state 78
    factor                             go to state 79
    power                              go to state 80
    await_primary                      go to state 81
    primary                            go to state 82
    atom                               go to state 83
    strings                            go to state 84
    yield_expr                         go to state 85
    single_target                      go to state 86
    single_subscript_attribute_target  go to state 87
    t_primary                          go to state 88


state 876

   79 with_item: expression AS star_target '&' '(' ',' . '|' ')' '|' ':' ')'

    '|'  shift, and go to state 961


state 877

   75 with_stmt: WITH '(' ',' '.' with_item '+' ',' '?' ')' . ':' block

    ':'  shift, and go to state 962


state 878

  139 pattern_capture_target: EQUAL ')' .

    $default  reduce using rule 139 (pattern_capture_target)


state 879

  138 pattern_capture_target: '!' '_' . NAME '!' '(' '.' '|' '('

    NAME  shift, and go to state 963


state 880

  145 name_or_attr: NAME .

    $default  reduce using rule 145 (name_or_attr)


state 881

  127 signed_number: INTEGER .
  133 real_number: INTEGER .

    '!'       reduce using rule 127 (signed_number)
    $default  reduce using rule 133 (real_number)


state 882

  147 sequence_pattern: SQUAREBRACKET_START . maybe_sequence_pattern '?' SQUAREBRACKET_END

    ','  shift, and go to state 909

    maybe_sequence_pattern  go to state 964


state 883

  115 literal_pattern: TRUE .

    $default  reduce using rule 115 (literal_pattern)


state 884

  114 literal_pattern: NONE .

    $default  reduce using rule 114 (literal_pattern)


state 885

  116 literal_pattern: FALSE .

    $default  reduce using rule 116 (literal_pattern)


state 886

  146 group_pattern: '(' . pattern ')'
  148 sequence_pattern: '(' . open_sequence_pattern '?' ')'

    '*'  shift, and go to state 707
    '|'  shift, and go to state 708

    AS        reduce using rule 100 (or_pattern)
    ','       reduce using rule 96 (pattern)
    ','       [reduce using rule 100 (or_pattern)]
    ')'       reduce using rule 96 (pattern)
    ')'       [reduce using rule 100 (or_pattern)]
    $default  reduce using rule 96 (pattern)

    pattern                go to state 965
    as_pattern             go to state 711
    or_pattern             go to state 712
    open_sequence_pattern  go to state 966
    maybe_star_pattern     go to state 714
    star_pattern           go to state 715


state 887

  128 signed_number: '-' . INTEGER
  131 signed_real_number: '-' . real_number

    INTEGER  shift, and go to state 967

    $default  reduce using rule 132 (real_number)

    real_number  go to state 968


state 888

  155 mapping_pattern: '{' . '}'
  156                | '{' . double_star_pattern ',' '?' '}'
  157                | '{' . items_pattern ',' double_star_pattern ',' '?' '}'
  158                | '{' . items_pattern ',' '?' '}'

    ','  shift, and go to state 969
    '*'  shift, and go to state 970
    '}'  shift, and go to state 971

    items_pattern        go to state 972
    double_star_pattern  go to state 973


state 889

  101 or_pattern: '|' '.' closed_pattern . '+'

    '+'  shift, and go to state 974


state 890

  103 closed_pattern: literal_pattern .

    $default  reduce using rule 103 (closed_pattern)


state 891

  112 literal_pattern: complex_number .

    $default  reduce using rule 112 (literal_pattern)


state 892

  111 literal_pattern: signed_number . '!' '(' '+' '|' '-' ')'

    '!'  shift, and go to state 975


state 893

  124 complex_number: signed_real_number . '+' imaginary_number
  125               | signed_real_number . '-' imaginary_number

    '+'  shift, and go to state 976
    '-'  shift, and go to state 977


state 894

  130 signed_real_number: real_number .

    $default  reduce using rule 130 (signed_real_number)


state 895

  104 closed_pattern: capture_pattern .

    $default  reduce using rule 104 (closed_pattern)


state 896

  136 capture_pattern: pattern_capture_target .

    $default  reduce using rule 136 (capture_pattern)


state 897

  105 closed_pattern: wildcard_pattern .

    $default  reduce using rule 105 (closed_pattern)


state 898

  106 closed_pattern: value_pattern .

    $default  reduce using rule 106 (closed_pattern)


state 899

  141 value_pattern: attr . '!' '(' '.' '|' '(' '|' EQUAL ')'
  144 name_or_attr: attr .

    '!'  shift, and go to state 978

    $default  reduce using rule 144 (name_or_attr)


state 900

  142 attr: name_or_attr . '.' NAME
  162 class_pattern: name_or_attr . '(' ')'
  163              | name_or_attr . '(' positional_patterns ',' '?' ')'
  164              | name_or_attr . '(' keyword_patterns ',' '?' ')'
  165              | name_or_attr . '(' positional_patterns ',' keyword_patterns ',' '?' ')'

    '.'  shift, and go to state 979
    '('  shift, and go to state 980


state 901

  107 closed_pattern: group_pattern .

    $default  reduce using rule 107 (closed_pattern)


state 902

  108 closed_pattern: sequence_pattern .

    $default  reduce using rule 108 (closed_pattern)


state 903

  109 closed_pattern: mapping_pattern .

    $default  reduce using rule 109 (closed_pattern)


state 904

  110 closed_pattern: class_pattern .

    $default  reduce using rule 110 (closed_pattern)


state 905

  113 literal_pattern: strings .

    $default  reduce using rule 113 (literal_pattern)


state 906

   92 guard: IF named_expression .

    $default  reduce using rule 92 (guard)


state 907

   91 case_block: CASE patterns guard '?' . ':' block

    ':'  shift, and go to state 981


state 908

   99 as_pattern: or_pattern AS pattern_capture_target .

    $default  reduce using rule 99 (as_pattern)


state 909

  150 maybe_sequence_pattern: ',' . '.' maybe_star_pattern '+' ',' '?'

    '.'  shift, and go to state 982


state 910

  149 open_sequence_pattern: maybe_star_pattern ',' maybe_sequence_pattern . '?'

    '?'  shift, and go to state 983


state 911

  220 star_named_expressions: ',' '.' star_named_expression '+' SQUAREBRACKET_START ',' . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 984


state 912

  247 lambda_star_etc: '*' ',' lambda_param_maybe_default '+' SQUAREBRACKET_START lambda_kwds SQUAREBRACKET_END .

    $default  reduce using rule 247 (lambda_star_etc)


state 913

  258 lambda_param_maybe_default: lambda_param default '?' '&' ':' .

    $default  reduce using rule 258 (lambda_param_maybe_default)


state 914

  246 lambda_star_etc: '*' lambda_param_no_default lambda_param_maybe_default '*' SQUAREBRACKET_START lambda_kwds SQUAREBRACKET_END .

    $default  reduce using rule 246 (lambda_star_etc)


state 915

  244 lambda_slash_with_default: lambda_param_no_default '*' lambda_param_with_default '+' '/' '&' ':' .

    $default  reduce using rule 244 (lambda_slash_with_default)


state 916

  238 lambda_parameters: lambda_param_no_default '+' lambda_param_with_default '*' SQUAREBRACKET_START lambda_star_etc SQUAREBRACKET_END .

    $default  reduce using rule 238 (lambda_parameters)


state 917

  190 star_etc: '*' ',' param_maybe_default '+' SQUAREBRACKET_START . kwds SQUAREBRACKET_END

    '*'  shift, and go to state 985

    kwds  go to state 986


state 918

  200 param_maybe_default: param default '?' . ',' TYPE_COMMENT '?'
  201                    | param default '?' . TYPE_COMMENT '?' '&' ')'

    TYPE_COMMENT  shift, and go to state 987
    ','           shift, and go to state 988


state 919

  189 star_etc: '*' param_no_default param_maybe_default '*' SQUAREBRACKET_START . kwds SQUAREBRACKET_END

    '*'  shift, and go to state 985

    kwds  go to state 989


state 920

  174 function_def_raw: DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' . '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    '>'  shift, and go to state 990


state 921

  179 parameters: slash_no_default param_no_default '*' param_with_default '*' . SQUAREBRACKET_START star_etc SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 991


state 922

  180 parameters: slash_with_default param_with_default '*' SQUAREBRACKET_START star_etc . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 992


state 923

  186 slash_with_default: param_no_default '*' param_with_default '+' '/' . ','
  187                   | param_no_default '*' param_with_default '+' '/' . '&' ')'

    ','  shift, and go to state 993
    '&'  shift, and go to state 994


state 924

  185 slash_no_default: param_no_default '+' '/' '&' ')' .

    $default  reduce using rule 185 (slash_no_default)


state 925

  181 parameters: param_no_default '+' param_with_default '*' SQUAREBRACKET_START . star_etc SQUAREBRACKET_END

    '*'  shift, and go to state 516

    $default  reduce using rule 188 (star_etc)

    star_etc  go to state 995
    kwds      go to state 522


state 926

  182 parameters: param_with_default '+' SQUAREBRACKET_START star_etc SQUAREBRACKET_END .

    $default  reduce using rule 182 (parameters)


state 927

  195 param_no_default: param TYPE_COMMENT '?' '&' ')' .

    $default  reduce using rule 195 (param_no_default)


state 928

  198 param_with_default: param default TYPE_COMMENT '?' '&' . ')'

    ')'  shift, and go to state 996


state 929

  197 param_with_default: param default ',' TYPE_COMMENT '?' .

    $default  reduce using rule 197 (param_with_default)


state 930

   74 for_stmt: ASYNC FOR star_targets IN '~' star_expressions ':' SQUAREBRACKET_START TYPE_COMMENT . SQUAREBRACKET_END block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 997


state 931

   78 with_stmt: ASYNC WITH ',' '.' with_item '+' ':' SQUAREBRACKET_START TYPE_COMMENT . SQUAREBRACKET_END block

    SQUAREBRACKET_END  shift, and go to state 998


state 932

   77 with_stmt: ASYNC WITH '(' ',' '.' with_item '+' ',' '?' . ')' ':' block

    ')'  shift, and go to state 999


state 933

  175 function_def_raw: ASYNC DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START . '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    '-'  shift, and go to state 1000


state 934

   84 except_block: EXPECT expression SQUAREBRACKET_START AS NAME SQUAREBRACKET_END . ':' block

    ':'  shift, and go to state 1001


state 935

   82 try_stmt: TRY ':' block except_block '+' SQUAREBRACKET_START else_block SQUAREBRACKET_END SQUAREBRACKET_START . finally_block SQUAREBRACKET_END

    FINALLY  shift, and go to state 406

    finally_block  go to state 1002


state 936

  347 tuple: '(' SQUAREBRACKET_START star_named_expression ',' SQUAREBRACKET_START star_named_expressions SQUAREBRACKET_END SQUAREBRACKET_END . ')'

    ')'  shift, and go to state 1003


state 937

  358 double_starred_kvpairs: ',' '.' double_starred_kvpair '+' SQUAREBRACKET_START ',' . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 1004


state 938

  366 for_if_clause: FOR star_targets IN '~' . disjunction '(' IF disjunction ')' '*'

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    disjunction    go to state 1005
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 939

  365 for_if_clause: ASYNC FOR star_targets IN . '~' disjunction '(' IF disjunction ')' '*'

    '~'  shift, and go to state 1006


state 940

  349 group: '(' '(' yield_expr '|' named_expression ')' . ')'

    ')'  shift, and go to state 1007


state 941

  357 dictcomp: '{' kvpair for_if_clauses '}' .

    $default  reduce using rule 357 (dictcomp)


state 942

  354 setcomp: '{' named_expression . for_if_clauses '}'

    FOR    shift, and go to state 651
    ASYNC  shift, and go to state 652

    '+'       reduce using rule 364 (for_if_clause)
    $default  reduce using rule 362 (for_if_clauses)

    for_if_clauses  go to state 1008
    for_if_clause   go to state 654


state 943

  340 atom: '(' dict '|' set '|' dictcomp '|' setcomp ')' .

    $default  reduce using rule 340 (atom)


state 944

   32 assignment: '(' star_targets EQUAL ')' '+' '(' yield_expr '|' star_expressions . ')' '!' EQUAL SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END

    ')'  shift, and go to state 1009


state 945

   56 import_from: FROM '(' '.' '|' '.' '.' '.' . ')' '*' dotted_name IMPORT import_from_targets
   57            | FROM '(' '.' '|' '.' '.' '.' . ')' '+' IMPORT import_from_targets

    ')'  shift, and go to state 1010


state 946

  214 star_expressions: star_expression '(' ',' star_expression ')' '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END .

    $default  reduce using rule 214 (star_expressions)


state 947

  329 slice: SQUAREBRACKET_START expression SQUAREBRACKET_END ':' SQUAREBRACKET_START expression SQUAREBRACKET_END . SQUAREBRACKET_START ':' SQUAREBRACKET_START expression SQUAREBRACKET_END SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 1011


state 948

  328 slices: ',' '.' slice '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END .

    $default  reduce using rule 328 (slices)


state 949

  373 args: ',' '.' '(' starred_expression '|' '(' . assigment_expression '|' expression '!' ':' EQUAL ')' '!' EQUAL ')' '+' SQUAREBRACKET_START

    NAME  shift, and go to state 452

    $default  reduce using rule 224 (assigment_expression)

    assigment_expression  go to state 1012


state 950

  375 kwargs: ',' '.' kwarg_or_starred '+' ',' ',' . '.' kwarg_or_double_starred '+'

    '.'  shift, and go to state 1013


state 951

  371 arguments: args SQUAREBRACKET_START ',' SQUAREBRACKET_END '&' ')' .

    $default  reduce using rule 371 (arguments)


state 952

  351 genexp: '(' '(' assigment_expression '|' expression '!' ':' EQUAL . ')' for_if_clauses ')'

    ')'  shift, and go to state 1014


state 953

   70 elif_stmt: ELIF named_expression ':' block SQUAREBRACKET_START else_block . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 1015


state 954

  410 expression_list: expression '(' ',' expression ')' '*' SQUAREBRACKET_START ',' . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 1016


state 955

  388 star_targets_list_seq: ',' '.' star_target '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END .

    $default  reduce using rule 388 (star_targets_list_seq)


state 956

  390 star_targets_tuple_seq: star_target '(' ',' star_target ')' '+' SQUAREBRACKET_START . ',' SQUAREBRACKET_END

    ','  shift, and go to state 1017


state 957

   73 for_stmt: FOR star_targets IN '~' star_expressions ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block . SQUAREBRACKET_START else_block SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 1018


state 958

  387 star_targets: star_target '(' ',' star_target ')' '*' SQUAREBRACKET_START ',' SQUAREBRACKET_END .

    $default  reduce using rule 387 (star_targets)


state 959

  209 class_def_raw: CLASS NAME SQUAREBRACKET_START '(' SQUAREBRACKET_START arguments SQUAREBRACKET_END ')' SQUAREBRACKET_END ':' . block

    NAME      shift, and go to state 3
    STRING    shift, and go to state 4
    INTEGER   shift, and go to state 5
    NOT       shift, and go to state 8
    GLOBAL    shift, and go to state 9
    YIELD     shift, and go to state 10
    IMPORT    shift, and go to state 11
    RETURN    shift, and go to state 12
    DEL       shift, and go to state 14
    NONLOCAL  shift, and go to state 15
    NEWLINE   shift, and go to state 266
    TRUE      shift, and go to state 16
    NONE      shift, and go to state 17
    CONTINUE  shift, and go to state 21
    RAISE     shift, and go to state 22
    PASS      shift, and go to state 23
    LAMBDA    shift, and go to state 24
    DEF       shift, and go to state 267
    FALSE     shift, and go to state 26
    ASSERT    shift, and go to state 27
    AWAIT     shift, and go to state 28
    BREAK     shift, and go to state 29
    '.'       shift, and go to state 32
    '*'       shift, and go to state 33
    '+'       shift, and go to state 34
    ';'       shift, and go to state 35
    '('       shift, and go to state 268
    '~'       shift, and go to state 37
    '-'       shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 415 (t_primary)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 403 (single_target)]
    '*'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '+'                  [reduce using rule 210 (block)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 403 (single_target)]
    '+'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '!'                  reduce using rule 213 (star_expressions)
    '!'                  [reduce using rule 217 (star_expression)]
    '!'                  [reduce using rule 229 (expression)]
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '!'                  [reduce using rule 367 (yield_expr)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 407 (single_subscript_attribute_target)
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '|'                  [reduce using rule 403 (single_target)]
    '|'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '~'                  [reduce using rule 403 (single_target)]
    '~'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 403 (single_target)]
    '-'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '@'                  [reduce using rule 403 (single_target)]
    '@'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '/'                  [reduce using rule 403 (single_target)]
    '/'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '%'                  [reduce using rule 403 (single_target)]
    '%'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '&'                  [reduce using rule 403 (single_target)]
    '&'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  [reduce using rule 415 (t_primary)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '^'                  [reduce using rule 403 (single_target)]
    '^'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '<'                  [reduce using rule 403 (single_target)]
    '<'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '>'                  [reduce using rule 403 (single_target)]
    '>'                  [reduce using rule 407 (single_subscript_attribute_target)]
    $default             reduce using rule 287 (bitwise_or)

    simple_stmts                       go to state 269
    simple_stmt                        go to state 42
    assignment                         go to state 44
    global_stmt                        go to state 45
    nonlocal_stmt                      go to state 46
    yield_stmt                         go to state 47
    assert_stmt                        go to state 48
    del_stmt                           go to state 49
    import_stmt                        go to state 50
    import_name                        go to state 51
    return_stmt                        go to state 58
    raise_stmt                         go to state 59
    block                              go to state 1019
    star_expressions                   go to state 65
    star_expression                    go to state 66
    expression                         go to state 67
    lambdef                            go to state 68
    disjunction                        go to state 69
    conjunction                        go to state 70
    inversion                          go to state 71
    comparison                         go to state 72
    bitwise_or                         go to state 73
    bitwise_xor                        go to state 74
    bitwise_and                        go to state 75
    shift_expr                         go to state 76
    sum                                go to state 77
    term                               go to state 78
    factor                             go to state 79
    power                              go to state 80
    await_primary                      go to state 81
    primary                            go to state 82
    atom                               go to state 83
    strings                            go to state 84
    yield_expr                         go to state 85
    single_target                      go to state 86
    single_subscript_attribute_target  go to state 87
    t_primary                          go to state 88


state 960

   76 with_stmt: WITH ',' '.' with_item '+' ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block .

    $default  reduce using rule 76 (with_stmt)


state 961

   79 with_item: expression AS star_target '&' '(' ',' '|' . ')' '|' ':' ')'

    ')'  shift, and go to state 1020


state 962

   75 with_stmt: WITH '(' ',' '.' with_item '+' ',' '?' ')' ':' . block

    NAME      shift, and go to state 3
    STRING    shift, and go to state 4
    INTEGER   shift, and go to state 5
    NOT       shift, and go to state 8
    GLOBAL    shift, and go to state 9
    YIELD     shift, and go to state 10
    IMPORT    shift, and go to state 11
    RETURN    shift, and go to state 12
    DEL       shift, and go to state 14
    NONLOCAL  shift, and go to state 15
    NEWLINE   shift, and go to state 266
    TRUE      shift, and go to state 16
    NONE      shift, and go to state 17
    CONTINUE  shift, and go to state 21
    RAISE     shift, and go to state 22
    PASS      shift, and go to state 23
    LAMBDA    shift, and go to state 24
    DEF       shift, and go to state 267
    FALSE     shift, and go to state 26
    ASSERT    shift, and go to state 27
    AWAIT     shift, and go to state 28
    BREAK     shift, and go to state 29
    '.'       shift, and go to state 32
    '*'       shift, and go to state 33
    '+'       shift, and go to state 34
    ';'       shift, and go to state 35
    '('       shift, and go to state 268
    '~'       shift, and go to state 37
    '-'       shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 415 (t_primary)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 403 (single_target)]
    '*'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '+'                  [reduce using rule 210 (block)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 403 (single_target)]
    '+'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '!'                  reduce using rule 213 (star_expressions)
    '!'                  [reduce using rule 217 (star_expression)]
    '!'                  [reduce using rule 229 (expression)]
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '!'                  [reduce using rule 367 (yield_expr)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 407 (single_subscript_attribute_target)
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '|'                  [reduce using rule 403 (single_target)]
    '|'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '~'                  [reduce using rule 403 (single_target)]
    '~'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 403 (single_target)]
    '-'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '@'                  [reduce using rule 403 (single_target)]
    '@'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '/'                  [reduce using rule 403 (single_target)]
    '/'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '%'                  [reduce using rule 403 (single_target)]
    '%'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '&'                  [reduce using rule 403 (single_target)]
    '&'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  [reduce using rule 415 (t_primary)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '^'                  [reduce using rule 403 (single_target)]
    '^'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '<'                  [reduce using rule 403 (single_target)]
    '<'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '>'                  [reduce using rule 403 (single_target)]
    '>'                  [reduce using rule 407 (single_subscript_attribute_target)]
    $default             reduce using rule 287 (bitwise_or)

    simple_stmts                       go to state 269
    simple_stmt                        go to state 42
    assignment                         go to state 44
    global_stmt                        go to state 45
    nonlocal_stmt                      go to state 46
    yield_stmt                         go to state 47
    assert_stmt                        go to state 48
    del_stmt                           go to state 49
    import_stmt                        go to state 50
    import_name                        go to state 51
    return_stmt                        go to state 58
    raise_stmt                         go to state 59
    block                              go to state 1021
    star_expressions                   go to state 65
    star_expression                    go to state 66
    expression                         go to state 67
    lambdef                            go to state 68
    disjunction                        go to state 69
    conjunction                        go to state 70
    inversion                          go to state 71
    comparison                         go to state 72
    bitwise_or                         go to state 73
    bitwise_xor                        go to state 74
    bitwise_and                        go to state 75
    shift_expr                         go to state 76
    sum                                go to state 77
    term                               go to state 78
    factor                             go to state 79
    power                              go to state 80
    await_primary                      go to state 81
    primary                            go to state 82
    atom                               go to state 83
    strings                            go to state 84
    yield_expr                         go to state 85
    single_target                      go to state 86
    single_subscript_attribute_target  go to state 87
    t_primary                          go to state 88


state 963

  138 pattern_capture_target: '!' '_' NAME . '!' '(' '.' '|' '('

    '!'  shift, and go to state 1022


state 964

  147 sequence_pattern: SQUAREBRACKET_START maybe_sequence_pattern . '?' SQUAREBRACKET_END

    '?'  shift, and go to state 1023


state 965

  146 group_pattern: '(' pattern . ')'
  152 maybe_star_pattern: pattern .

    ')'  shift, and go to state 1024

    $default  reduce using rule 152 (maybe_star_pattern)


state 966

  148 sequence_pattern: '(' open_sequence_pattern . '?' ')'

    '?'  shift, and go to state 1025


state 967

  128 signed_number: '-' INTEGER .
  133 real_number: INTEGER .

    '!'       reduce using rule 128 (signed_number)
    $default  reduce using rule 133 (real_number)


state 968

  131 signed_real_number: '-' real_number .

    $default  reduce using rule 131 (signed_real_number)


state 969

  159 items_pattern: ',' . '.' key_value_pattern '+'

    '.'  shift, and go to state 1026


state 970

  161 double_star_pattern: '*' . '*' pattern_capture_target

    '*'  shift, and go to state 1027


state 971

  155 mapping_pattern: '{' '}' .

    $default  reduce using rule 155 (mapping_pattern)


state 972

  157 mapping_pattern: '{' items_pattern . ',' double_star_pattern ',' '?' '}'
  158                | '{' items_pattern . ',' '?' '}'

    ','  shift, and go to state 1028


state 973

  156 mapping_pattern: '{' double_star_pattern . ',' '?' '}'

    ','  shift, and go to state 1029


state 974

  101 or_pattern: '|' '.' closed_pattern '+' .

    $default  reduce using rule 101 (or_pattern)


state 975

  111 literal_pattern: signed_number '!' . '(' '+' '|' '-' ')'

    '('  shift, and go to state 1030


state 976

  124 complex_number: signed_real_number '+' . imaginary_number

    INTEGER  shift, and go to state 1031

    $default  reduce using rule 134 (imaginary_number)

    imaginary_number  go to state 1032


state 977

  125 complex_number: signed_real_number '-' . imaginary_number

    INTEGER  shift, and go to state 1031

    $default  reduce using rule 134 (imaginary_number)

    imaginary_number  go to state 1033


state 978

  141 value_pattern: attr '!' . '(' '.' '|' '(' '|' EQUAL ')'

    '('  shift, and go to state 1034


state 979

  142 attr: name_or_attr '.' . NAME

    NAME  shift, and go to state 1035


state 980

  162 class_pattern: name_or_attr '(' . ')'
  163              | name_or_attr '(' . positional_patterns ',' '?' ')'
  164              | name_or_attr '(' . keyword_patterns ',' '?' ')'
  165              | name_or_attr '(' . positional_patterns ',' keyword_patterns ',' '?' ')'

    ','  shift, and go to state 1036
    ')'  shift, and go to state 1037

    positional_patterns  go to state 1038
    keyword_patterns     go to state 1039


state 981

   91 case_block: CASE patterns guard '?' ':' . block

    NAME      shift, and go to state 3
    STRING    shift, and go to state 4
    INTEGER   shift, and go to state 5
    NOT       shift, and go to state 8
    GLOBAL    shift, and go to state 9
    YIELD     shift, and go to state 10
    IMPORT    shift, and go to state 11
    RETURN    shift, and go to state 12
    DEL       shift, and go to state 14
    NONLOCAL  shift, and go to state 15
    NEWLINE   shift, and go to state 266
    TRUE      shift, and go to state 16
    NONE      shift, and go to state 17
    CONTINUE  shift, and go to state 21
    RAISE     shift, and go to state 22
    PASS      shift, and go to state 23
    LAMBDA    shift, and go to state 24
    DEF       shift, and go to state 267
    FALSE     shift, and go to state 26
    ASSERT    shift, and go to state 27
    AWAIT     shift, and go to state 28
    BREAK     shift, and go to state 29
    '.'       shift, and go to state 32
    '*'       shift, and go to state 33
    '+'       shift, and go to state 34
    ';'       shift, and go to state 35
    '('       shift, and go to state 268
    '~'       shift, and go to state 37
    '-'       shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 415 (t_primary)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 403 (single_target)]
    '*'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '+'                  [reduce using rule 210 (block)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 403 (single_target)]
    '+'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '!'                  reduce using rule 213 (star_expressions)
    '!'                  [reduce using rule 217 (star_expression)]
    '!'                  [reduce using rule 229 (expression)]
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '!'                  [reduce using rule 367 (yield_expr)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 407 (single_subscript_attribute_target)
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '|'                  [reduce using rule 403 (single_target)]
    '|'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '~'                  [reduce using rule 403 (single_target)]
    '~'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 403 (single_target)]
    '-'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '@'                  [reduce using rule 403 (single_target)]
    '@'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '/'                  [reduce using rule 403 (single_target)]
    '/'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '%'                  [reduce using rule 403 (single_target)]
    '%'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '&'                  [reduce using rule 403 (single_target)]
    '&'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  [reduce using rule 415 (t_primary)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '^'                  [reduce using rule 403 (single_target)]
    '^'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '<'                  [reduce using rule 403 (single_target)]
    '<'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '>'                  [reduce using rule 403 (single_target)]
    '>'                  [reduce using rule 407 (single_subscript_attribute_target)]
    $default             reduce using rule 287 (bitwise_or)

    simple_stmts                       go to state 269
    simple_stmt                        go to state 42
    assignment                         go to state 44
    global_stmt                        go to state 45
    nonlocal_stmt                      go to state 46
    yield_stmt                         go to state 47
    assert_stmt                        go to state 48
    del_stmt                           go to state 49
    import_stmt                        go to state 50
    import_name                        go to state 51
    return_stmt                        go to state 58
    raise_stmt                         go to state 59
    block                              go to state 1040
    star_expressions                   go to state 65
    star_expression                    go to state 66
    expression                         go to state 67
    lambdef                            go to state 68
    disjunction                        go to state 69
    conjunction                        go to state 70
    inversion                          go to state 71
    comparison                         go to state 72
    bitwise_or                         go to state 73
    bitwise_xor                        go to state 74
    bitwise_and                        go to state 75
    shift_expr                         go to state 76
    sum                                go to state 77
    term                               go to state 78
    factor                             go to state 79
    power                              go to state 80
    await_primary                      go to state 81
    primary                            go to state 82
    atom                               go to state 83
    strings                            go to state 84
    yield_expr                         go to state 85
    single_target                      go to state 86
    single_subscript_attribute_target  go to state 87
    t_primary                          go to state 88


state 982

  150 maybe_sequence_pattern: ',' '.' . maybe_star_pattern '+' ',' '?'

    '*'  shift, and go to state 707
    '|'  shift, and go to state 708

    AS        reduce using rule 100 (or_pattern)
    '+'       reduce using rule 96 (pattern)
    '+'       [reduce using rule 100 (or_pattern)]
    $default  reduce using rule 96 (pattern)

    pattern             go to state 1041
    as_pattern          go to state 711
    or_pattern          go to state 712
    maybe_star_pattern  go to state 1042
    star_pattern        go to state 715


state 983

  149 open_sequence_pattern: maybe_star_pattern ',' maybe_sequence_pattern '?' .

    $default  reduce using rule 149 (open_sequence_pattern)


state 984

  220 star_named_expressions: ',' '.' star_named_expression '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END .

    $default  reduce using rule 220 (star_named_expressions)


state 985

  192 kwds: '*' . '*' param_no_default

    '*'  shift, and go to state 619


state 986

  190 star_etc: '*' ',' param_maybe_default '+' SQUAREBRACKET_START kwds . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 1043


state 987

  201 param_maybe_default: param default '?' TYPE_COMMENT . '?' '&' ')'

    '?'  shift, and go to state 1044


state 988

  200 param_maybe_default: param default '?' ',' . TYPE_COMMENT '?'

    TYPE_COMMENT  shift, and go to state 1045


state 989

  189 star_etc: '*' param_no_default param_maybe_default '*' SQUAREBRACKET_START kwds . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 1046


state 990

  174 function_def_raw: DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' . expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 229 (expression)
    SQUAREBRACKET_END    [reduce using rule 260 (disjunction)]
    SQUAREBRACKET_END    [reduce using rule 263 (conjunction)]
    SQUAREBRACKET_END    [reduce using rule 266 (inversion)]
    SQUAREBRACKET_END    [reduce using rule 287 (bitwise_or)]
    SQUAREBRACKET_END    [reduce using rule 290 (bitwise_xor)]
    SQUAREBRACKET_END    [reduce using rule 293 (bitwise_and)]
    SQUAREBRACKET_END    [reduce using rule 296 (shift_expr)]
    SQUAREBRACKET_END    [reduce using rule 300 (sum)]
    SQUAREBRACKET_END    [reduce using rule 304 (term)]
    SQUAREBRACKET_END    [reduce using rule 311 (factor)]
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression     go to state 1047
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 991

  179 parameters: slash_no_default param_no_default '*' param_with_default '*' SQUAREBRACKET_START . star_etc SQUAREBRACKET_END

    '*'  shift, and go to state 516

    $default  reduce using rule 188 (star_etc)

    star_etc  go to state 1048
    kwds      go to state 522


state 992

  180 parameters: slash_with_default param_with_default '*' SQUAREBRACKET_START star_etc SQUAREBRACKET_END .

    $default  reduce using rule 180 (parameters)


state 993

  186 slash_with_default: param_no_default '*' param_with_default '+' '/' ',' .

    $default  reduce using rule 186 (slash_with_default)


state 994

  187 slash_with_default: param_no_default '*' param_with_default '+' '/' '&' . ')'

    ')'  shift, and go to state 1049


state 995

  181 parameters: param_no_default '+' param_with_default '*' SQUAREBRACKET_START star_etc . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 1050


state 996

  198 param_with_default: param default TYPE_COMMENT '?' '&' ')' .

    $default  reduce using rule 198 (param_with_default)


state 997

   74 for_stmt: ASYNC FOR star_targets IN '~' star_expressions ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END . block SQUAREBRACKET_START else_block SQUAREBRACKET_END

    NAME      shift, and go to state 3
    STRING    shift, and go to state 4
    INTEGER   shift, and go to state 5
    NOT       shift, and go to state 8
    GLOBAL    shift, and go to state 9
    YIELD     shift, and go to state 10
    IMPORT    shift, and go to state 11
    RETURN    shift, and go to state 12
    DEL       shift, and go to state 14
    NONLOCAL  shift, and go to state 15
    NEWLINE   shift, and go to state 266
    TRUE      shift, and go to state 16
    NONE      shift, and go to state 17
    CONTINUE  shift, and go to state 21
    RAISE     shift, and go to state 22
    PASS      shift, and go to state 23
    LAMBDA    shift, and go to state 24
    DEF       shift, and go to state 267
    FALSE     shift, and go to state 26
    ASSERT    shift, and go to state 27
    AWAIT     shift, and go to state 28
    BREAK     shift, and go to state 29
    '.'       shift, and go to state 32
    '*'       shift, and go to state 33
    '+'       shift, and go to state 34
    ';'       shift, and go to state 35
    '('       shift, and go to state 268
    '~'       shift, and go to state 37
    '-'       shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 210 (block)
    SQUAREBRACKET_START  [reduce using rule 320 (primary)]
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 415 (t_primary)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 403 (single_target)]
    '*'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 403 (single_target)]
    '+'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '!'                  reduce using rule 213 (star_expressions)
    '!'                  [reduce using rule 217 (star_expression)]
    '!'                  [reduce using rule 229 (expression)]
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '!'                  [reduce using rule 367 (yield_expr)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 407 (single_subscript_attribute_target)
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '|'                  [reduce using rule 403 (single_target)]
    '|'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '~'                  [reduce using rule 403 (single_target)]
    '~'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 403 (single_target)]
    '-'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '@'                  [reduce using rule 403 (single_target)]
    '@'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '/'                  [reduce using rule 403 (single_target)]
    '/'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '%'                  [reduce using rule 403 (single_target)]
    '%'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '&'                  [reduce using rule 403 (single_target)]
    '&'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  [reduce using rule 415 (t_primary)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '^'                  [reduce using rule 403 (single_target)]
    '^'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '<'                  [reduce using rule 403 (single_target)]
    '<'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '>'                  [reduce using rule 403 (single_target)]
    '>'                  [reduce using rule 407 (single_subscript_attribute_target)]
    $default             reduce using rule 287 (bitwise_or)

    simple_stmts                       go to state 269
    simple_stmt                        go to state 42
    assignment                         go to state 44
    global_stmt                        go to state 45
    nonlocal_stmt                      go to state 46
    yield_stmt                         go to state 47
    assert_stmt                        go to state 48
    del_stmt                           go to state 49
    import_stmt                        go to state 50
    import_name                        go to state 51
    return_stmt                        go to state 58
    raise_stmt                         go to state 59
    block                              go to state 1051
    star_expressions                   go to state 65
    star_expression                    go to state 66
    expression                         go to state 67
    lambdef                            go to state 68
    disjunction                        go to state 69
    conjunction                        go to state 70
    inversion                          go to state 71
    comparison                         go to state 72
    bitwise_or                         go to state 73
    bitwise_xor                        go to state 74
    bitwise_and                        go to state 75
    shift_expr                         go to state 76
    sum                                go to state 77
    term                               go to state 78
    factor                             go to state 79
    power                              go to state 80
    await_primary                      go to state 81
    primary                            go to state 82
    atom                               go to state 83
    strings                            go to state 84
    yield_expr                         go to state 85
    single_target                      go to state 86
    single_subscript_attribute_target  go to state 87
    t_primary                          go to state 88


state 998

   78 with_stmt: ASYNC WITH ',' '.' with_item '+' ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END . block

    NAME      shift, and go to state 3
    STRING    shift, and go to state 4
    INTEGER   shift, and go to state 5
    NOT       shift, and go to state 8
    GLOBAL    shift, and go to state 9
    YIELD     shift, and go to state 10
    IMPORT    shift, and go to state 11
    RETURN    shift, and go to state 12
    DEL       shift, and go to state 14
    NONLOCAL  shift, and go to state 15
    NEWLINE   shift, and go to state 266
    TRUE      shift, and go to state 16
    NONE      shift, and go to state 17
    CONTINUE  shift, and go to state 21
    RAISE     shift, and go to state 22
    PASS      shift, and go to state 23
    LAMBDA    shift, and go to state 24
    DEF       shift, and go to state 267
    FALSE     shift, and go to state 26
    ASSERT    shift, and go to state 27
    AWAIT     shift, and go to state 28
    BREAK     shift, and go to state 29
    '.'       shift, and go to state 32
    '*'       shift, and go to state 33
    '+'       shift, and go to state 34
    ';'       shift, and go to state 35
    '('       shift, and go to state 268
    '~'       shift, and go to state 37
    '-'       shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 415 (t_primary)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 403 (single_target)]
    '*'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '+'                  [reduce using rule 210 (block)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 403 (single_target)]
    '+'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '!'                  reduce using rule 213 (star_expressions)
    '!'                  [reduce using rule 217 (star_expression)]
    '!'                  [reduce using rule 229 (expression)]
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '!'                  [reduce using rule 367 (yield_expr)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 407 (single_subscript_attribute_target)
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '|'                  [reduce using rule 403 (single_target)]
    '|'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '~'                  [reduce using rule 403 (single_target)]
    '~'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 403 (single_target)]
    '-'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '@'                  [reduce using rule 403 (single_target)]
    '@'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '/'                  [reduce using rule 403 (single_target)]
    '/'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '%'                  [reduce using rule 403 (single_target)]
    '%'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '&'                  [reduce using rule 403 (single_target)]
    '&'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  [reduce using rule 415 (t_primary)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '^'                  [reduce using rule 403 (single_target)]
    '^'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '<'                  [reduce using rule 403 (single_target)]
    '<'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '>'                  [reduce using rule 403 (single_target)]
    '>'                  [reduce using rule 407 (single_subscript_attribute_target)]
    $default             reduce using rule 287 (bitwise_or)

    simple_stmts                       go to state 269
    simple_stmt                        go to state 42
    assignment                         go to state 44
    global_stmt                        go to state 45
    nonlocal_stmt                      go to state 46
    yield_stmt                         go to state 47
    assert_stmt                        go to state 48
    del_stmt                           go to state 49
    import_stmt                        go to state 50
    import_name                        go to state 51
    return_stmt                        go to state 58
    raise_stmt                         go to state 59
    block                              go to state 1052
    star_expressions                   go to state 65
    star_expression                    go to state 66
    expression                         go to state 67
    lambdef                            go to state 68
    disjunction                        go to state 69
    conjunction                        go to state 70
    inversion                          go to state 71
    comparison                         go to state 72
    bitwise_or                         go to state 73
    bitwise_xor                        go to state 74
    bitwise_and                        go to state 75
    shift_expr                         go to state 76
    sum                                go to state 77
    term                               go to state 78
    factor                             go to state 79
    power                              go to state 80
    await_primary                      go to state 81
    primary                            go to state 82
    atom                               go to state 83
    strings                            go to state 84
    yield_expr                         go to state 85
    single_target                      go to state 86
    single_subscript_attribute_target  go to state 87
    t_primary                          go to state 88


state 999

   77 with_stmt: ASYNC WITH '(' ',' '.' with_item '+' ',' '?' ')' . ':' block

    ':'  shift, and go to state 1053


state 1000

  175 function_def_raw: ASYNC DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' . '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    '>'  shift, and go to state 1054


state 1001

   84 except_block: EXPECT expression SQUAREBRACKET_START AS NAME SQUAREBRACKET_END ':' . block

    NAME      shift, and go to state 3
    STRING    shift, and go to state 4
    INTEGER   shift, and go to state 5
    NOT       shift, and go to state 8
    GLOBAL    shift, and go to state 9
    YIELD     shift, and go to state 10
    IMPORT    shift, and go to state 11
    RETURN    shift, and go to state 12
    DEL       shift, and go to state 14
    NONLOCAL  shift, and go to state 15
    NEWLINE   shift, and go to state 266
    TRUE      shift, and go to state 16
    NONE      shift, and go to state 17
    CONTINUE  shift, and go to state 21
    RAISE     shift, and go to state 22
    PASS      shift, and go to state 23
    LAMBDA    shift, and go to state 24
    DEF       shift, and go to state 267
    FALSE     shift, and go to state 26
    ASSERT    shift, and go to state 27
    AWAIT     shift, and go to state 28
    BREAK     shift, and go to state 29
    '.'       shift, and go to state 32
    '*'       shift, and go to state 33
    '+'       shift, and go to state 34
    ';'       shift, and go to state 35
    '('       shift, and go to state 268
    '~'       shift, and go to state 37
    '-'       shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 415 (t_primary)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 403 (single_target)]
    '*'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '+'                  [reduce using rule 210 (block)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 403 (single_target)]
    '+'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '!'                  reduce using rule 213 (star_expressions)
    '!'                  [reduce using rule 217 (star_expression)]
    '!'                  [reduce using rule 229 (expression)]
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '!'                  [reduce using rule 367 (yield_expr)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 407 (single_subscript_attribute_target)
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '|'                  [reduce using rule 403 (single_target)]
    '|'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '~'                  [reduce using rule 403 (single_target)]
    '~'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 403 (single_target)]
    '-'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '@'                  [reduce using rule 403 (single_target)]
    '@'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '/'                  [reduce using rule 403 (single_target)]
    '/'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '%'                  [reduce using rule 403 (single_target)]
    '%'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '&'                  [reduce using rule 403 (single_target)]
    '&'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  [reduce using rule 415 (t_primary)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '^'                  [reduce using rule 403 (single_target)]
    '^'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '<'                  [reduce using rule 403 (single_target)]
    '<'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '>'                  [reduce using rule 403 (single_target)]
    '>'                  [reduce using rule 407 (single_subscript_attribute_target)]
    $default             reduce using rule 287 (bitwise_or)

    simple_stmts                       go to state 269
    simple_stmt                        go to state 42
    assignment                         go to state 44
    global_stmt                        go to state 45
    nonlocal_stmt                      go to state 46
    yield_stmt                         go to state 47
    assert_stmt                        go to state 48
    del_stmt                           go to state 49
    import_stmt                        go to state 50
    import_name                        go to state 51
    return_stmt                        go to state 58
    raise_stmt                         go to state 59
    block                              go to state 1055
    star_expressions                   go to state 65
    star_expression                    go to state 66
    expression                         go to state 67
    lambdef                            go to state 68
    disjunction                        go to state 69
    conjunction                        go to state 70
    inversion                          go to state 71
    comparison                         go to state 72
    bitwise_or                         go to state 73
    bitwise_xor                        go to state 74
    bitwise_and                        go to state 75
    shift_expr                         go to state 76
    sum                                go to state 77
    term                               go to state 78
    factor                             go to state 79
    power                              go to state 80
    await_primary                      go to state 81
    primary                            go to state 82
    atom                               go to state 83
    strings                            go to state 84
    yield_expr                         go to state 85
    single_target                      go to state 86
    single_subscript_attribute_target  go to state 87
    t_primary                          go to state 88


state 1002

   82 try_stmt: TRY ':' block except_block '+' SQUAREBRACKET_START else_block SQUAREBRACKET_END SQUAREBRACKET_START finally_block . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 1056


state 1003

  347 tuple: '(' SQUAREBRACKET_START star_named_expression ',' SQUAREBRACKET_START star_named_expressions SQUAREBRACKET_END SQUAREBRACKET_END ')' .

    $default  reduce using rule 347 (tuple)


state 1004

  358 double_starred_kvpairs: ',' '.' double_starred_kvpair '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END .

    $default  reduce using rule 358 (double_starred_kvpairs)


state 1005

  366 for_if_clause: FOR star_targets IN '~' disjunction . '(' IF disjunction ')' '*'

    '('  shift, and go to state 1057


state 1006

  365 for_if_clause: ASYNC FOR star_targets IN '~' . disjunction '(' IF disjunction ')' '*'

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    disjunction    go to state 1058
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 1007

  349 group: '(' '(' yield_expr '|' named_expression ')' ')' .

    $default  reduce using rule 349 (group)


state 1008

  354 setcomp: '{' named_expression for_if_clauses . '}'

    '}'  shift, and go to state 1059


state 1009

   32 assignment: '(' star_targets EQUAL ')' '+' '(' yield_expr '|' star_expressions ')' . '!' EQUAL SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END

    '!'  shift, and go to state 1060


state 1010

   56 import_from: FROM '(' '.' '|' '.' '.' '.' ')' . '*' dotted_name IMPORT import_from_targets
   57            | FROM '(' '.' '|' '.' '.' '.' ')' . '+' IMPORT import_from_targets

    '*'  shift, and go to state 1061
    '+'  shift, and go to state 1062


state 1011

  329 slice: SQUAREBRACKET_START expression SQUAREBRACKET_END ':' SQUAREBRACKET_START expression SQUAREBRACKET_END SQUAREBRACKET_START . ':' SQUAREBRACKET_START expression SQUAREBRACKET_END SQUAREBRACKET_END

    ':'  shift, and go to state 1063


state 1012

  373 args: ',' '.' '(' starred_expression '|' '(' assigment_expression . '|' expression '!' ':' EQUAL ')' '!' EQUAL ')' '+' SQUAREBRACKET_START

    '|'  shift, and go to state 1064


state 1013

  375 kwargs: ',' '.' kwarg_or_starred '+' ',' ',' '.' . kwarg_or_double_starred '+'

    NAME  shift, and go to state 1065
    '*'   shift, and go to state 1066

    $default  reduce using rule 382 (kwarg_or_double_starred)

    kwarg_or_double_starred  go to state 1067


state 1014

  351 genexp: '(' '(' assigment_expression '|' expression '!' ':' EQUAL ')' . for_if_clauses ')'

    FOR    shift, and go to state 651
    ASYNC  shift, and go to state 652

    '+'       reduce using rule 364 (for_if_clause)
    $default  reduce using rule 362 (for_if_clauses)

    for_if_clauses  go to state 1068
    for_if_clause   go to state 654


state 1015

   70 elif_stmt: ELIF named_expression ':' block SQUAREBRACKET_START else_block SQUAREBRACKET_END .

    $default  reduce using rule 70 (elif_stmt)


state 1016

  410 expression_list: expression '(' ',' expression ')' '*' SQUAREBRACKET_START ',' SQUAREBRACKET_END .

    $default  reduce using rule 410 (expression_list)


state 1017

  390 star_targets_tuple_seq: star_target '(' ',' star_target ')' '+' SQUAREBRACKET_START ',' . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 1069


state 1018

   73 for_stmt: FOR star_targets IN '~' star_expressions ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block SQUAREBRACKET_START . else_block SQUAREBRACKET_END

    ELSE  shift, and go to state 576

    else_block  go to state 1070


state 1019

  209 class_def_raw: CLASS NAME SQUAREBRACKET_START '(' SQUAREBRACKET_START arguments SQUAREBRACKET_END ')' SQUAREBRACKET_END ':' block .

    $default  reduce using rule 209 (class_def_raw)


state 1020

   79 with_item: expression AS star_target '&' '(' ',' '|' ')' . '|' ':' ')'

    '|'  shift, and go to state 1071


state 1021

   75 with_stmt: WITH '(' ',' '.' with_item '+' ',' '?' ')' ':' block .

    $default  reduce using rule 75 (with_stmt)


state 1022

  138 pattern_capture_target: '!' '_' NAME '!' . '(' '.' '|' '('

    '('  shift, and go to state 1072


state 1023

  147 sequence_pattern: SQUAREBRACKET_START maybe_sequence_pattern '?' . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 1073


state 1024

  146 group_pattern: '(' pattern ')' .

    $default  reduce using rule 146 (group_pattern)


state 1025

  148 sequence_pattern: '(' open_sequence_pattern '?' . ')'

    ')'  shift, and go to state 1074


state 1026

  159 items_pattern: ',' '.' . key_value_pattern '+'

    '('  shift, and go to state 1075

    key_value_pattern  go to state 1076


state 1027

  161 double_star_pattern: '*' '*' . pattern_capture_target

    EQUAL  shift, and go to state 798
    '!'    shift, and go to state 799

    $default  reduce using rule 137 (pattern_capture_target)

    pattern_capture_target  go to state 1077


state 1028

  157 mapping_pattern: '{' items_pattern ',' . double_star_pattern ',' '?' '}'
  158                | '{' items_pattern ',' . '?' '}'

    '*'  shift, and go to state 970
    '?'  shift, and go to state 1078

    double_star_pattern  go to state 1079


state 1029

  156 mapping_pattern: '{' double_star_pattern ',' . '?' '}'

    '?'  shift, and go to state 1080


state 1030

  111 literal_pattern: signed_number '!' '(' . '+' '|' '-' ')'

    '+'  shift, and go to state 1081


state 1031

  135 imaginary_number: INTEGER .

    $default  reduce using rule 135 (imaginary_number)


state 1032

  124 complex_number: signed_real_number '+' imaginary_number .

    $default  reduce using rule 124 (complex_number)


state 1033

  125 complex_number: signed_real_number '-' imaginary_number .

    $default  reduce using rule 125 (complex_number)


state 1034

  141 value_pattern: attr '!' '(' . '.' '|' '(' '|' EQUAL ')'

    '.'  shift, and go to state 1082


state 1035

  142 attr: name_or_attr '.' NAME .

    $default  reduce using rule 142 (attr)


state 1036

  166 positional_patterns: ',' . '.' pattern '+'
  167 keyword_patterns: ',' . '.' keyword_pattern '+'

    '.'  shift, and go to state 1083


state 1037

  162 class_pattern: name_or_attr '(' ')' .

    $default  reduce using rule 162 (class_pattern)


state 1038

  163 class_pattern: name_or_attr '(' positional_patterns . ',' '?' ')'
  165              | name_or_attr '(' positional_patterns . ',' keyword_patterns ',' '?' ')'

    ','  shift, and go to state 1084


state 1039

  164 class_pattern: name_or_attr '(' keyword_patterns . ',' '?' ')'

    ','  shift, and go to state 1085


state 1040

   91 case_block: CASE patterns guard '?' ':' block .

    $default  reduce using rule 91 (case_block)


state 1041

  152 maybe_star_pattern: pattern .

    $default  reduce using rule 152 (maybe_star_pattern)


state 1042

  150 maybe_sequence_pattern: ',' '.' maybe_star_pattern . '+' ',' '?'

    '+'  shift, and go to state 1086


state 1043

  190 star_etc: '*' ',' param_maybe_default '+' SQUAREBRACKET_START kwds SQUAREBRACKET_END .

    $default  reduce using rule 190 (star_etc)


state 1044

  201 param_maybe_default: param default '?' TYPE_COMMENT '?' . '&' ')'

    '&'  shift, and go to state 1087


state 1045

  200 param_maybe_default: param default '?' ',' TYPE_COMMENT . '?'

    '?'  shift, and go to state 1088


state 1046

  189 star_etc: '*' param_no_default param_maybe_default '*' SQUAREBRACKET_START kwds SQUAREBRACKET_END .

    $default  reduce using rule 189 (star_etc)


state 1047

  174 function_def_raw: DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression . SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    SQUAREBRACKET_END  shift, and go to state 1089


state 1048

  179 parameters: slash_no_default param_no_default '*' param_with_default '*' SQUAREBRACKET_START star_etc . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 1090


state 1049

  187 slash_with_default: param_no_default '*' param_with_default '+' '/' '&' ')' .

    $default  reduce using rule 187 (slash_with_default)


state 1050

  181 parameters: param_no_default '+' param_with_default '*' SQUAREBRACKET_START star_etc SQUAREBRACKET_END .

    $default  reduce using rule 181 (parameters)


state 1051

   74 for_stmt: ASYNC FOR star_targets IN '~' star_expressions ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block . SQUAREBRACKET_START else_block SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 1091


state 1052

   78 with_stmt: ASYNC WITH ',' '.' with_item '+' ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block .

    $default  reduce using rule 78 (with_stmt)


state 1053

   77 with_stmt: ASYNC WITH '(' ',' '.' with_item '+' ',' '?' ')' ':' . block

    NAME      shift, and go to state 3
    STRING    shift, and go to state 4
    INTEGER   shift, and go to state 5
    NOT       shift, and go to state 8
    GLOBAL    shift, and go to state 9
    YIELD     shift, and go to state 10
    IMPORT    shift, and go to state 11
    RETURN    shift, and go to state 12
    DEL       shift, and go to state 14
    NONLOCAL  shift, and go to state 15
    NEWLINE   shift, and go to state 266
    TRUE      shift, and go to state 16
    NONE      shift, and go to state 17
    CONTINUE  shift, and go to state 21
    RAISE     shift, and go to state 22
    PASS      shift, and go to state 23
    LAMBDA    shift, and go to state 24
    DEF       shift, and go to state 267
    FALSE     shift, and go to state 26
    ASSERT    shift, and go to state 27
    AWAIT     shift, and go to state 28
    BREAK     shift, and go to state 29
    '.'       shift, and go to state 32
    '*'       shift, and go to state 33
    '+'       shift, and go to state 34
    ';'       shift, and go to state 35
    '('       shift, and go to state 268
    '~'       shift, and go to state 37
    '-'       shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 415 (t_primary)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 403 (single_target)]
    '*'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '+'                  [reduce using rule 210 (block)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 403 (single_target)]
    '+'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '!'                  reduce using rule 213 (star_expressions)
    '!'                  [reduce using rule 217 (star_expression)]
    '!'                  [reduce using rule 229 (expression)]
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '!'                  [reduce using rule 367 (yield_expr)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 407 (single_subscript_attribute_target)
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '|'                  [reduce using rule 403 (single_target)]
    '|'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '~'                  [reduce using rule 403 (single_target)]
    '~'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 403 (single_target)]
    '-'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '@'                  [reduce using rule 403 (single_target)]
    '@'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '/'                  [reduce using rule 403 (single_target)]
    '/'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '%'                  [reduce using rule 403 (single_target)]
    '%'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '&'                  [reduce using rule 403 (single_target)]
    '&'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  [reduce using rule 415 (t_primary)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '^'                  [reduce using rule 403 (single_target)]
    '^'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '<'                  [reduce using rule 403 (single_target)]
    '<'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '>'                  [reduce using rule 403 (single_target)]
    '>'                  [reduce using rule 407 (single_subscript_attribute_target)]
    $default             reduce using rule 287 (bitwise_or)

    simple_stmts                       go to state 269
    simple_stmt                        go to state 42
    assignment                         go to state 44
    global_stmt                        go to state 45
    nonlocal_stmt                      go to state 46
    yield_stmt                         go to state 47
    assert_stmt                        go to state 48
    del_stmt                           go to state 49
    import_stmt                        go to state 50
    import_name                        go to state 51
    return_stmt                        go to state 58
    raise_stmt                         go to state 59
    block                              go to state 1092
    star_expressions                   go to state 65
    star_expression                    go to state 66
    expression                         go to state 67
    lambdef                            go to state 68
    disjunction                        go to state 69
    conjunction                        go to state 70
    inversion                          go to state 71
    comparison                         go to state 72
    bitwise_or                         go to state 73
    bitwise_xor                        go to state 74
    bitwise_and                        go to state 75
    shift_expr                         go to state 76
    sum                                go to state 77
    term                               go to state 78
    factor                             go to state 79
    power                              go to state 80
    await_primary                      go to state 81
    primary                            go to state 82
    atom                               go to state 83
    strings                            go to state 84
    yield_expr                         go to state 85
    single_target                      go to state 86
    single_subscript_attribute_target  go to state 87
    t_primary                          go to state 88


state 1054

  175 function_def_raw: ASYNC DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' . expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 229 (expression)
    SQUAREBRACKET_END    [reduce using rule 260 (disjunction)]
    SQUAREBRACKET_END    [reduce using rule 263 (conjunction)]
    SQUAREBRACKET_END    [reduce using rule 266 (inversion)]
    SQUAREBRACKET_END    [reduce using rule 287 (bitwise_or)]
    SQUAREBRACKET_END    [reduce using rule 290 (bitwise_xor)]
    SQUAREBRACKET_END    [reduce using rule 293 (bitwise_and)]
    SQUAREBRACKET_END    [reduce using rule 296 (shift_expr)]
    SQUAREBRACKET_END    [reduce using rule 300 (sum)]
    SQUAREBRACKET_END    [reduce using rule 304 (term)]
    SQUAREBRACKET_END    [reduce using rule 311 (factor)]
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression     go to state 1093
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 1055

   84 except_block: EXPECT expression SQUAREBRACKET_START AS NAME SQUAREBRACKET_END ':' block .

    $default  reduce using rule 84 (except_block)


state 1056

   82 try_stmt: TRY ':' block except_block '+' SQUAREBRACKET_START else_block SQUAREBRACKET_END SQUAREBRACKET_START finally_block SQUAREBRACKET_END .

    $default  reduce using rule 82 (try_stmt)


state 1057

  366 for_if_clause: FOR star_targets IN '~' disjunction '(' . IF disjunction ')' '*'

    IF  shift, and go to state 1094


state 1058

  365 for_if_clause: ASYNC FOR star_targets IN '~' disjunction . '(' IF disjunction ')' '*'

    '('  shift, and go to state 1095


state 1059

  354 setcomp: '{' named_expression for_if_clauses '}' .

    $default  reduce using rule 354 (setcomp)


state 1060

   32 assignment: '(' star_targets EQUAL ')' '+' '(' yield_expr '|' star_expressions ')' '!' . EQUAL SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END

    EQUAL  shift, and go to state 1096


state 1061

   56 import_from: FROM '(' '.' '|' '.' '.' '.' ')' '*' . dotted_name IMPORT import_from_targets

    NAME  shift, and go to state 355

    dotted_name  go to state 1097


state 1062

   57 import_from: FROM '(' '.' '|' '.' '.' '.' ')' '+' . IMPORT import_from_targets

    IMPORT  shift, and go to state 1098


state 1063

  329 slice: SQUAREBRACKET_START expression SQUAREBRACKET_END ':' SQUAREBRACKET_START expression SQUAREBRACKET_END SQUAREBRACKET_START ':' . SQUAREBRACKET_START expression SQUAREBRACKET_END SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 1099


state 1064

  373 args: ',' '.' '(' starred_expression '|' '(' assigment_expression '|' . expression '!' ':' EQUAL ')' '!' EQUAL ')' '+' SQUAREBRACKET_START

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '!'                  reduce using rule 229 (expression)
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression     go to state 1100
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 1065

  383 kwarg_or_double_starred: NAME . EQUAL expression

    EQUAL  shift, and go to state 1101


state 1066

  384 kwarg_or_double_starred: '*' . '*' expression

    '*'  shift, and go to state 770


state 1067

  375 kwargs: ',' '.' kwarg_or_starred '+' ',' ',' '.' kwarg_or_double_starred . '+'

    '+'  shift, and go to state 1102


state 1068

  351 genexp: '(' '(' assigment_expression '|' expression '!' ':' EQUAL ')' for_if_clauses . ')'

    ')'  shift, and go to state 1103


state 1069

  390 star_targets_tuple_seq: star_target '(' ',' star_target ')' '+' SQUAREBRACKET_START ',' SQUAREBRACKET_END .

    $default  reduce using rule 390 (star_targets_tuple_seq)


state 1070

   73 for_stmt: FOR star_targets IN '~' star_expressions ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block SQUAREBRACKET_START else_block . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 1104


state 1071

   79 with_item: expression AS star_target '&' '(' ',' '|' ')' '|' . ':' ')'

    ':'  shift, and go to state 1105


state 1072

  138 pattern_capture_target: '!' '_' NAME '!' '(' . '.' '|' '('

    '.'  shift, and go to state 1106


state 1073

  147 sequence_pattern: SQUAREBRACKET_START maybe_sequence_pattern '?' SQUAREBRACKET_END .

    $default  reduce using rule 147 (sequence_pattern)


state 1074

  148 sequence_pattern: '(' open_sequence_pattern '?' ')' .

    $default  reduce using rule 148 (sequence_pattern)


state 1075

  160 key_value_pattern: '(' . literal_expr '|' attr ')' ':' pattern

    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 881
    TRUE     shift, and go to state 1107
    NONE     shift, and go to state 1108
    FALSE    shift, and go to state 1109
    '-'      shift, and go to state 887

    '+'       reduce using rule 129 (signed_real_number)
    '+'       [reduce using rule 132 (real_number)]
    '!'       reduce using rule 126 (signed_number)
    '-'       [reduce using rule 129 (signed_real_number)]
    '-'       [reduce using rule 132 (real_number)]
    $default  reduce using rule 117 (literal_expr)

    literal_expr        go to state 1110
    complex_number      go to state 1111
    signed_number       go to state 1112
    signed_real_number  go to state 893
    real_number         go to state 894
    strings             go to state 1113


state 1076

  159 items_pattern: ',' '.' key_value_pattern . '+'

    '+'  shift, and go to state 1114


state 1077

  161 double_star_pattern: '*' '*' pattern_capture_target .

    $default  reduce using rule 161 (double_star_pattern)


state 1078

  158 mapping_pattern: '{' items_pattern ',' '?' . '}'

    '}'  shift, and go to state 1115


state 1079

  157 mapping_pattern: '{' items_pattern ',' double_star_pattern . ',' '?' '}'

    ','  shift, and go to state 1116


state 1080

  156 mapping_pattern: '{' double_star_pattern ',' '?' . '}'

    '}'  shift, and go to state 1117


state 1081

  111 literal_pattern: signed_number '!' '(' '+' . '|' '-' ')'

    '|'  shift, and go to state 1118


state 1082

  141 value_pattern: attr '!' '(' '.' . '|' '(' '|' EQUAL ')'

    '|'  shift, and go to state 1119


state 1083

  166 positional_patterns: ',' '.' . pattern '+'
  167 keyword_patterns: ',' '.' . keyword_pattern '+'

    NAME  shift, and go to state 1120
    '|'   shift, and go to state 708

    AS        reduce using rule 100 (or_pattern)
    '+'       reduce using rule 96 (pattern)
    '+'       [reduce using rule 100 (or_pattern)]
    $default  reduce using rule 96 (pattern)

    pattern          go to state 1121
    as_pattern       go to state 711
    or_pattern       go to state 712
    keyword_pattern  go to state 1122


state 1084

  163 class_pattern: name_or_attr '(' positional_patterns ',' . '?' ')'
  165              | name_or_attr '(' positional_patterns ',' . keyword_patterns ',' '?' ')'

    ','  shift, and go to state 1123
    '?'  shift, and go to state 1124

    keyword_patterns  go to state 1125


state 1085

  164 class_pattern: name_or_attr '(' keyword_patterns ',' . '?' ')'

    '?'  shift, and go to state 1126


state 1086

  150 maybe_sequence_pattern: ',' '.' maybe_star_pattern '+' . ',' '?'

    ','  shift, and go to state 1127


state 1087

  201 param_maybe_default: param default '?' TYPE_COMMENT '?' '&' . ')'

    ')'  shift, and go to state 1128


state 1088

  200 param_maybe_default: param default '?' ',' TYPE_COMMENT '?' .

    $default  reduce using rule 200 (param_maybe_default)


state 1089

  174 function_def_raw: DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END . ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    ':'  shift, and go to state 1129


state 1090

  179 parameters: slash_no_default param_no_default '*' param_with_default '*' SQUAREBRACKET_START star_etc SQUAREBRACKET_END .

    $default  reduce using rule 179 (parameters)


state 1091

   74 for_stmt: ASYNC FOR star_targets IN '~' star_expressions ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block SQUAREBRACKET_START . else_block SQUAREBRACKET_END

    ELSE  shift, and go to state 576

    else_block  go to state 1130


state 1092

   77 with_stmt: ASYNC WITH '(' ',' '.' with_item '+' ',' '?' ')' ':' block .

    $default  reduce using rule 77 (with_stmt)


state 1093

  175 function_def_raw: ASYNC DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression . SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    SQUAREBRACKET_END  shift, and go to state 1131


state 1094

  366 for_if_clause: FOR star_targets IN '~' disjunction '(' IF . disjunction ')' '*'

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 260 (disjunction)
    ')'                  [reduce using rule 263 (conjunction)]
    ')'                  [reduce using rule 266 (inversion)]
    ')'                  [reduce using rule 287 (bitwise_or)]
    ')'                  [reduce using rule 290 (bitwise_xor)]
    ')'                  [reduce using rule 293 (bitwise_and)]
    ')'                  [reduce using rule 296 (shift_expr)]
    ')'                  [reduce using rule 300 (sum)]
    ')'                  [reduce using rule 304 (term)]
    ')'                  [reduce using rule 311 (factor)]
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    disjunction    go to state 1132
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 1095

  365 for_if_clause: ASYNC FOR star_targets IN '~' disjunction '(' . IF disjunction ')' '*'

    IF  shift, and go to state 1133


state 1096

   32 assignment: '(' star_targets EQUAL ')' '+' '(' yield_expr '|' star_expressions ')' '!' EQUAL . SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 1134


state 1097

   56 import_from: FROM '(' '.' '|' '.' '.' '.' ')' '*' dotted_name . IMPORT import_from_targets
   65 dotted_name: dotted_name . '.' NAME

    IMPORT  shift, and go to state 1135
    '.'     shift, and go to state 475


state 1098

   57 import_from: FROM '(' '.' '|' '.' '.' '.' ')' '+' IMPORT . import_from_targets

    NAME  shift, and go to state 1136
    '*'   shift, and go to state 1137
    '('   shift, and go to state 1138

    $default  reduce using rule 58 (import_from_targets)

    import_from_targets   go to state 1139
    import_from_as_names  go to state 1140


state 1099

  329 slice: SQUAREBRACKET_START expression SQUAREBRACKET_END ':' SQUAREBRACKET_START expression SQUAREBRACKET_END SQUAREBRACKET_START ':' SQUAREBRACKET_START . expression SQUAREBRACKET_END SQUAREBRACKET_END

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_END    reduce using rule 229 (expression)
    SQUAREBRACKET_END    [reduce using rule 260 (disjunction)]
    SQUAREBRACKET_END    [reduce using rule 263 (conjunction)]
    SQUAREBRACKET_END    [reduce using rule 266 (inversion)]
    SQUAREBRACKET_END    [reduce using rule 287 (bitwise_or)]
    SQUAREBRACKET_END    [reduce using rule 290 (bitwise_xor)]
    SQUAREBRACKET_END    [reduce using rule 293 (bitwise_and)]
    SQUAREBRACKET_END    [reduce using rule 296 (shift_expr)]
    SQUAREBRACKET_END    [reduce using rule 300 (sum)]
    SQUAREBRACKET_END    [reduce using rule 304 (term)]
    SQUAREBRACKET_END    [reduce using rule 311 (factor)]
    SQUAREBRACKET_END    [reduce using rule 320 (primary)]
    SQUAREBRACKET_END    [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression     go to state 1141
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 1100

  373 args: ',' '.' '(' starred_expression '|' '(' assigment_expression '|' expression . '!' ':' EQUAL ')' '!' EQUAL ')' '+' SQUAREBRACKET_START

    '!'  shift, and go to state 1142


state 1101

  383 kwarg_or_double_starred: NAME EQUAL . expression

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    LAMBDA   shift, and go to state 24
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 229 (expression)]
    '+'                  [reduce using rule 260 (disjunction)]
    '+'                  [reduce using rule 263 (conjunction)]
    '+'                  [reduce using rule 266 (inversion)]
    '+'                  [reduce using rule 287 (bitwise_or)]
    '+'                  [reduce using rule 290 (bitwise_xor)]
    '+'                  [reduce using rule 293 (bitwise_and)]
    '+'                  [reduce using rule 296 (shift_expr)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    expression     go to state 1143
    lambdef        go to state 68
    disjunction    go to state 69
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 1102

  375 kwargs: ',' '.' kwarg_or_starred '+' ',' ',' '.' kwarg_or_double_starred '+' .

    $default  reduce using rule 375 (kwargs)


state 1103

  351 genexp: '(' '(' assigment_expression '|' expression '!' ':' EQUAL ')' for_if_clauses ')' .

    $default  reduce using rule 351 (genexp)


state 1104

   73 for_stmt: FOR star_targets IN '~' star_expressions ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block SQUAREBRACKET_START else_block SQUAREBRACKET_END .

    $default  reduce using rule 73 (for_stmt)


state 1105

   79 with_item: expression AS star_target '&' '(' ',' '|' ')' '|' ':' . ')'

    ')'  shift, and go to state 1144


state 1106

  138 pattern_capture_target: '!' '_' NAME '!' '(' '.' . '|' '('

    '|'  shift, and go to state 1145


state 1107

  122 literal_expr: TRUE .

    $default  reduce using rule 122 (literal_expr)


state 1108

  121 literal_expr: NONE .

    $default  reduce using rule 121 (literal_expr)


state 1109

  123 literal_expr: FALSE .

    $default  reduce using rule 123 (literal_expr)


state 1110

  160 key_value_pattern: '(' literal_expr . '|' attr ')' ':' pattern

    '|'  shift, and go to state 1146


state 1111

  119 literal_expr: complex_number .

    $default  reduce using rule 119 (literal_expr)


state 1112

  118 literal_expr: signed_number . '!' '(' '+' '|' '-' ')'

    '!'  shift, and go to state 1147


state 1113

  120 literal_expr: strings .

    $default  reduce using rule 120 (literal_expr)


state 1114

  159 items_pattern: ',' '.' key_value_pattern '+' .

    $default  reduce using rule 159 (items_pattern)


state 1115

  158 mapping_pattern: '{' items_pattern ',' '?' '}' .

    $default  reduce using rule 158 (mapping_pattern)


state 1116

  157 mapping_pattern: '{' items_pattern ',' double_star_pattern ',' . '?' '}'

    '?'  shift, and go to state 1148


state 1117

  156 mapping_pattern: '{' double_star_pattern ',' '?' '}' .

    $default  reduce using rule 156 (mapping_pattern)


state 1118

  111 literal_pattern: signed_number '!' '(' '+' '|' . '-' ')'

    '-'  shift, and go to state 1149


state 1119

  141 value_pattern: attr '!' '(' '.' '|' . '(' '|' EQUAL ')'

    '('  shift, and go to state 1150


state 1120

  168 keyword_pattern: NAME . EQUAL pattern

    EQUAL  shift, and go to state 1151


state 1121

  166 positional_patterns: ',' '.' pattern . '+'

    '+'  shift, and go to state 1152


state 1122

  167 keyword_patterns: ',' '.' keyword_pattern . '+'

    '+'  shift, and go to state 1153


state 1123

  167 keyword_patterns: ',' . '.' keyword_pattern '+'

    '.'  shift, and go to state 1154


state 1124

  163 class_pattern: name_or_attr '(' positional_patterns ',' '?' . ')'

    ')'  shift, and go to state 1155


state 1125

  165 class_pattern: name_or_attr '(' positional_patterns ',' keyword_patterns . ',' '?' ')'

    ','  shift, and go to state 1156


state 1126

  164 class_pattern: name_or_attr '(' keyword_patterns ',' '?' . ')'

    ')'  shift, and go to state 1157


state 1127

  150 maybe_sequence_pattern: ',' '.' maybe_star_pattern '+' ',' . '?'

    '?'  shift, and go to state 1158


state 1128

  201 param_maybe_default: param default '?' TYPE_COMMENT '?' '&' ')' .

    $default  reduce using rule 201 (param_maybe_default)


state 1129

  174 function_def_raw: DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' . SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    SQUAREBRACKET_START  shift, and go to state 1159


state 1130

   74 for_stmt: ASYNC FOR star_targets IN '~' star_expressions ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block SQUAREBRACKET_START else_block . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 1160


state 1131

  175 function_def_raw: ASYNC DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END . ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    ':'  shift, and go to state 1161


state 1132

  366 for_if_clause: FOR star_targets IN '~' disjunction '(' IF disjunction . ')' '*'

    ')'  shift, and go to state 1162


state 1133

  365 for_if_clause: ASYNC FOR star_targets IN '~' disjunction '(' IF . disjunction ')' '*'

    NAME     shift, and go to state 99
    STRING   shift, and go to state 4
    INTEGER  shift, and go to state 5
    NOT      shift, and go to state 8
    TRUE     shift, and go to state 16
    NONE     shift, and go to state 17
    FALSE    shift, and go to state 26
    AWAIT    shift, and go to state 28
    '.'      shift, and go to state 32
    '+'      shift, and go to state 34
    '('      shift, and go to state 93
    '~'      shift, and go to state 37
    '-'      shift, and go to state 38

    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '*'                  reduce using rule 304 (term)
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    ')'                  reduce using rule 260 (disjunction)
    ')'                  [reduce using rule 263 (conjunction)]
    ')'                  [reduce using rule 266 (inversion)]
    ')'                  [reduce using rule 287 (bitwise_or)]
    ')'                  [reduce using rule 290 (bitwise_xor)]
    ')'                  [reduce using rule 293 (bitwise_and)]
    ')'                  [reduce using rule 296 (shift_expr)]
    ')'                  [reduce using rule 300 (sum)]
    ')'                  [reduce using rule 304 (term)]
    ')'                  [reduce using rule 311 (factor)]
    ')'                  [reduce using rule 320 (primary)]
    ')'                  [reduce using rule 331 (atom)]
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    $default             reduce using rule 287 (bitwise_or)

    disjunction    go to state 1163
    conjunction    go to state 70
    inversion      go to state 71
    comparison     go to state 72
    bitwise_or     go to state 73
    bitwise_xor    go to state 74
    bitwise_and    go to state 75
    shift_expr     go to state 76
    sum            go to state 77
    term           go to state 78
    factor         go to state 79
    power          go to state 80
    await_primary  go to state 81
    primary        go to state 82
    atom           go to state 97
    strings        go to state 84


state 1134

   32 assignment: '(' star_targets EQUAL ')' '+' '(' yield_expr '|' star_expressions ')' '!' EQUAL SQUAREBRACKET_START . TYPE_COMMENT SQUAREBRACKET_END

    TYPE_COMMENT  shift, and go to state 1164


state 1135

   56 import_from: FROM '(' '.' '|' '.' '.' '.' ')' '*' dotted_name IMPORT . import_from_targets

    NAME  shift, and go to state 1136
    '*'   shift, and go to state 1137
    '('   shift, and go to state 1138

    $default  reduce using rule 58 (import_from_targets)

    import_from_targets   go to state 1165
    import_from_as_names  go to state 1140


state 1136

   62 import_from_as_names: NAME . SQUAREBRACKET_START AS NAME SQUAREBRACKET_END

    SQUAREBRACKET_START  shift, and go to state 1166


state 1137

   61 import_from_targets: '*' .

    $default  reduce using rule 61 (import_from_targets)


state 1138

   59 import_from_targets: '(' . import_from_as_names SQUAREBRACKET_START ',' SQUAREBRACKET_END ')'

    NAME  shift, and go to state 1136

    import_from_as_names  go to state 1167


state 1139

   57 import_from: FROM '(' '.' '|' '.' '.' '.' ')' '+' IMPORT import_from_targets .

    $default  reduce using rule 57 (import_from)


state 1140

   60 import_from_targets: import_from_as_names . '!' ','

    '!'  shift, and go to state 1168


state 1141

  329 slice: SQUAREBRACKET_START expression SQUAREBRACKET_END ':' SQUAREBRACKET_START expression SQUAREBRACKET_END SQUAREBRACKET_START ':' SQUAREBRACKET_START expression . SQUAREBRACKET_END SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 1169


state 1142

  373 args: ',' '.' '(' starred_expression '|' '(' assigment_expression '|' expression '!' . ':' EQUAL ')' '!' EQUAL ')' '+' SQUAREBRACKET_START

    ':'  shift, and go to state 1170


state 1143

  383 kwarg_or_double_starred: NAME EQUAL expression .

    $default  reduce using rule 383 (kwarg_or_double_starred)


state 1144

   79 with_item: expression AS star_target '&' '(' ',' '|' ')' '|' ':' ')' .

    $default  reduce using rule 79 (with_item)


state 1145

  138 pattern_capture_target: '!' '_' NAME '!' '(' '.' '|' . '('

    '('  shift, and go to state 1171


state 1146

  160 key_value_pattern: '(' literal_expr '|' . attr ')' ':' pattern

    NAME  shift, and go to state 880

    $default  reduce using rule 143 (name_or_attr)

    attr          go to state 1172
    name_or_attr  go to state 1173


state 1147

  118 literal_expr: signed_number '!' . '(' '+' '|' '-' ')'

    '('  shift, and go to state 1174


state 1148

  157 mapping_pattern: '{' items_pattern ',' double_star_pattern ',' '?' . '}'

    '}'  shift, and go to state 1175


state 1149

  111 literal_pattern: signed_number '!' '(' '+' '|' '-' . ')'

    ')'  shift, and go to state 1176


state 1150

  141 value_pattern: attr '!' '(' '.' '|' '(' . '|' EQUAL ')'

    '|'  shift, and go to state 1177


state 1151

  168 keyword_pattern: NAME EQUAL . pattern

    '|'  shift, and go to state 708

    AS        reduce using rule 100 (or_pattern)
    '+'       reduce using rule 96 (pattern)
    '+'       [reduce using rule 100 (or_pattern)]
    $default  reduce using rule 96 (pattern)

    pattern     go to state 1178
    as_pattern  go to state 711
    or_pattern  go to state 712


state 1152

  166 positional_patterns: ',' '.' pattern '+' .

    $default  reduce using rule 166 (positional_patterns)


state 1153

  167 keyword_patterns: ',' '.' keyword_pattern '+' .

    $default  reduce using rule 167 (keyword_patterns)


state 1154

  167 keyword_patterns: ',' '.' . keyword_pattern '+'

    NAME  shift, and go to state 1120

    keyword_pattern  go to state 1122


state 1155

  163 class_pattern: name_or_attr '(' positional_patterns ',' '?' ')' .

    $default  reduce using rule 163 (class_pattern)


state 1156

  165 class_pattern: name_or_attr '(' positional_patterns ',' keyword_patterns ',' . '?' ')'

    '?'  shift, and go to state 1179


state 1157

  164 class_pattern: name_or_attr '(' keyword_patterns ',' '?' ')' .

    $default  reduce using rule 164 (class_pattern)


state 1158

  150 maybe_sequence_pattern: ',' '.' maybe_star_pattern '+' ',' '?' .

    $default  reduce using rule 150 (maybe_sequence_pattern)


state 1159

  174 function_def_raw: DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START . func_type_comment SQUAREBRACKET_END block

    TYPE_COMMENT  shift, and go to state 1180
    NEWLINE       shift, and go to state 1181

    func_type_comment  go to state 1182


state 1160

   74 for_stmt: ASYNC FOR star_targets IN '~' star_expressions ':' SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END block SQUAREBRACKET_START else_block SQUAREBRACKET_END .

    $default  reduce using rule 74 (for_stmt)


state 1161

  175 function_def_raw: ASYNC DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' . SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block

    SQUAREBRACKET_START  shift, and go to state 1183


state 1162

  366 for_if_clause: FOR star_targets IN '~' disjunction '(' IF disjunction ')' . '*'

    '*'  shift, and go to state 1184


state 1163

  365 for_if_clause: ASYNC FOR star_targets IN '~' disjunction '(' IF disjunction . ')' '*'

    ')'  shift, and go to state 1185


state 1164

   32 assignment: '(' star_targets EQUAL ')' '+' '(' yield_expr '|' star_expressions ')' '!' EQUAL SQUAREBRACKET_START TYPE_COMMENT . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 1186


state 1165

   56 import_from: FROM '(' '.' '|' '.' '.' '.' ')' '*' dotted_name IMPORT import_from_targets .

    $default  reduce using rule 56 (import_from)


state 1166

   62 import_from_as_names: NAME SQUAREBRACKET_START . AS NAME SQUAREBRACKET_END

    AS  shift, and go to state 1187


state 1167

   59 import_from_targets: '(' import_from_as_names . SQUAREBRACKET_START ',' SQUAREBRACKET_END ')'

    SQUAREBRACKET_START  shift, and go to state 1188


state 1168

   60 import_from_targets: import_from_as_names '!' . ','

    ','  shift, and go to state 1189


state 1169

  329 slice: SQUAREBRACKET_START expression SQUAREBRACKET_END ':' SQUAREBRACKET_START expression SQUAREBRACKET_END SQUAREBRACKET_START ':' SQUAREBRACKET_START expression SQUAREBRACKET_END . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 1190


state 1170

  373 args: ',' '.' '(' starred_expression '|' '(' assigment_expression '|' expression '!' ':' . EQUAL ')' '!' EQUAL ')' '+' SQUAREBRACKET_START

    EQUAL  shift, and go to state 1191


state 1171

  138 pattern_capture_target: '!' '_' NAME '!' '(' '.' '|' '(' .

    $default  reduce using rule 138 (pattern_capture_target)


state 1172

  144 name_or_attr: attr .
  160 key_value_pattern: '(' literal_expr '|' attr . ')' ':' pattern

    ')'  shift, and go to state 1192

    $default  reduce using rule 144 (name_or_attr)


state 1173

  142 attr: name_or_attr . '.' NAME

    '.'  shift, and go to state 979


state 1174

  118 literal_expr: signed_number '!' '(' . '+' '|' '-' ')'

    '+'  shift, and go to state 1193


state 1175

  157 mapping_pattern: '{' items_pattern ',' double_star_pattern ',' '?' '}' .

    $default  reduce using rule 157 (mapping_pattern)


state 1176

  111 literal_pattern: signed_number '!' '(' '+' '|' '-' ')' .

    $default  reduce using rule 111 (literal_pattern)


state 1177

  141 value_pattern: attr '!' '(' '.' '|' '(' '|' . EQUAL ')'

    EQUAL  shift, and go to state 1194


state 1178

  168 keyword_pattern: NAME EQUAL pattern .

    $default  reduce using rule 168 (keyword_pattern)


state 1179

  165 class_pattern: name_or_attr '(' positional_patterns ',' keyword_patterns ',' '?' . ')'

    ')'  shift, and go to state 1195


state 1180

  177 func_type_comment: TYPE_COMMENT .

    $default  reduce using rule 177 (func_type_comment)


state 1181

  176 func_type_comment: NEWLINE . TYPE_COMMENT '&' '(' NEWLINE INDENT ')'

    TYPE_COMMENT  shift, and go to state 1196


state 1182

  174 function_def_raw: DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment . SQUAREBRACKET_END block

    SQUAREBRACKET_END  shift, and go to state 1197


state 1183

  175 function_def_raw: ASYNC DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START . func_type_comment SQUAREBRACKET_END block

    TYPE_COMMENT  shift, and go to state 1180
    NEWLINE       shift, and go to state 1181

    func_type_comment  go to state 1198


state 1184

  366 for_if_clause: FOR star_targets IN '~' disjunction '(' IF disjunction ')' '*' .

    $default  reduce using rule 366 (for_if_clause)


state 1185

  365 for_if_clause: ASYNC FOR star_targets IN '~' disjunction '(' IF disjunction ')' . '*'

    '*'  shift, and go to state 1199


state 1186

   32 assignment: '(' star_targets EQUAL ')' '+' '(' yield_expr '|' star_expressions ')' '!' EQUAL SQUAREBRACKET_START TYPE_COMMENT SQUAREBRACKET_END .

    $default  reduce using rule 32 (assignment)


state 1187

   62 import_from_as_names: NAME SQUAREBRACKET_START AS . NAME SQUAREBRACKET_END

    NAME  shift, and go to state 1200


state 1188

   59 import_from_targets: '(' import_from_as_names SQUAREBRACKET_START . ',' SQUAREBRACKET_END ')'

    ','  shift, and go to state 1201


state 1189

   60 import_from_targets: import_from_as_names '!' ',' .

    $default  reduce using rule 60 (import_from_targets)


state 1190

  329 slice: SQUAREBRACKET_START expression SQUAREBRACKET_END ':' SQUAREBRACKET_START expression SQUAREBRACKET_END SQUAREBRACKET_START ':' SQUAREBRACKET_START expression SQUAREBRACKET_END SQUAREBRACKET_END .

    $default  reduce using rule 329 (slice)


state 1191

  373 args: ',' '.' '(' starred_expression '|' '(' assigment_expression '|' expression '!' ':' EQUAL . ')' '!' EQUAL ')' '+' SQUAREBRACKET_START

    ')'  shift, and go to state 1202


state 1192

  160 key_value_pattern: '(' literal_expr '|' attr ')' . ':' pattern

    ':'  shift, and go to state 1203


state 1193

  118 literal_expr: signed_number '!' '(' '+' . '|' '-' ')'

    '|'  shift, and go to state 1204


state 1194

  141 value_pattern: attr '!' '(' '.' '|' '(' '|' EQUAL . ')'

    ')'  shift, and go to state 1205


state 1195

  165 class_pattern: name_or_attr '(' positional_patterns ',' keyword_patterns ',' '?' ')' .

    $default  reduce using rule 165 (class_pattern)


state 1196

  176 func_type_comment: NEWLINE TYPE_COMMENT . '&' '(' NEWLINE INDENT ')'

    '&'  shift, and go to state 1206


state 1197

  174 function_def_raw: DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END . block

    NAME      shift, and go to state 3
    STRING    shift, and go to state 4
    INTEGER   shift, and go to state 5
    NOT       shift, and go to state 8
    GLOBAL    shift, and go to state 9
    YIELD     shift, and go to state 10
    IMPORT    shift, and go to state 11
    RETURN    shift, and go to state 12
    DEL       shift, and go to state 14
    NONLOCAL  shift, and go to state 15
    NEWLINE   shift, and go to state 266
    TRUE      shift, and go to state 16
    NONE      shift, and go to state 17
    CONTINUE  shift, and go to state 21
    RAISE     shift, and go to state 22
    PASS      shift, and go to state 23
    LAMBDA    shift, and go to state 24
    DEF       shift, and go to state 267
    FALSE     shift, and go to state 26
    ASSERT    shift, and go to state 27
    AWAIT     shift, and go to state 28
    BREAK     shift, and go to state 29
    '.'       shift, and go to state 32
    '*'       shift, and go to state 33
    '+'       shift, and go to state 34
    ';'       shift, and go to state 35
    '('       shift, and go to state 268
    '~'       shift, and go to state 37
    '-'       shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 415 (t_primary)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 403 (single_target)]
    '*'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '+'                  [reduce using rule 210 (block)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 403 (single_target)]
    '+'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '!'                  reduce using rule 213 (star_expressions)
    '!'                  [reduce using rule 217 (star_expression)]
    '!'                  [reduce using rule 229 (expression)]
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '!'                  [reduce using rule 367 (yield_expr)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 407 (single_subscript_attribute_target)
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '|'                  [reduce using rule 403 (single_target)]
    '|'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '~'                  [reduce using rule 403 (single_target)]
    '~'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 403 (single_target)]
    '-'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '@'                  [reduce using rule 403 (single_target)]
    '@'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '/'                  [reduce using rule 403 (single_target)]
    '/'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '%'                  [reduce using rule 403 (single_target)]
    '%'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '&'                  [reduce using rule 403 (single_target)]
    '&'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  [reduce using rule 415 (t_primary)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '^'                  [reduce using rule 403 (single_target)]
    '^'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '<'                  [reduce using rule 403 (single_target)]
    '<'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '>'                  [reduce using rule 403 (single_target)]
    '>'                  [reduce using rule 407 (single_subscript_attribute_target)]
    $default             reduce using rule 287 (bitwise_or)

    simple_stmts                       go to state 269
    simple_stmt                        go to state 42
    assignment                         go to state 44
    global_stmt                        go to state 45
    nonlocal_stmt                      go to state 46
    yield_stmt                         go to state 47
    assert_stmt                        go to state 48
    del_stmt                           go to state 49
    import_stmt                        go to state 50
    import_name                        go to state 51
    return_stmt                        go to state 58
    raise_stmt                         go to state 59
    block                              go to state 1207
    star_expressions                   go to state 65
    star_expression                    go to state 66
    expression                         go to state 67
    lambdef                            go to state 68
    disjunction                        go to state 69
    conjunction                        go to state 70
    inversion                          go to state 71
    comparison                         go to state 72
    bitwise_or                         go to state 73
    bitwise_xor                        go to state 74
    bitwise_and                        go to state 75
    shift_expr                         go to state 76
    sum                                go to state 77
    term                               go to state 78
    factor                             go to state 79
    power                              go to state 80
    await_primary                      go to state 81
    primary                            go to state 82
    atom                               go to state 83
    strings                            go to state 84
    yield_expr                         go to state 85
    single_target                      go to state 86
    single_subscript_attribute_target  go to state 87
    t_primary                          go to state 88


state 1198

  175 function_def_raw: ASYNC DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment . SQUAREBRACKET_END block

    SQUAREBRACKET_END  shift, and go to state 1208


state 1199

  365 for_if_clause: ASYNC FOR star_targets IN '~' disjunction '(' IF disjunction ')' '*' .

    $default  reduce using rule 365 (for_if_clause)


state 1200

   62 import_from_as_names: NAME SQUAREBRACKET_START AS NAME . SQUAREBRACKET_END

    SQUAREBRACKET_END  shift, and go to state 1209


state 1201

   59 import_from_targets: '(' import_from_as_names SQUAREBRACKET_START ',' . SQUAREBRACKET_END ')'

    SQUAREBRACKET_END  shift, and go to state 1210


state 1202

  373 args: ',' '.' '(' starred_expression '|' '(' assigment_expression '|' expression '!' ':' EQUAL ')' . '!' EQUAL ')' '+' SQUAREBRACKET_START

    '!'  shift, and go to state 1211


state 1203

  160 key_value_pattern: '(' literal_expr '|' attr ')' ':' . pattern

    '|'  shift, and go to state 708

    AS        reduce using rule 100 (or_pattern)
    '+'       reduce using rule 96 (pattern)
    '+'       [reduce using rule 100 (or_pattern)]
    $default  reduce using rule 96 (pattern)

    pattern     go to state 1212
    as_pattern  go to state 711
    or_pattern  go to state 712


state 1204

  118 literal_expr: signed_number '!' '(' '+' '|' . '-' ')'

    '-'  shift, and go to state 1213


state 1205

  141 value_pattern: attr '!' '(' '.' '|' '(' '|' EQUAL ')' .

    $default  reduce using rule 141 (value_pattern)


state 1206

  176 func_type_comment: NEWLINE TYPE_COMMENT '&' . '(' NEWLINE INDENT ')'

    '('  shift, and go to state 1214


state 1207

  174 function_def_raw: DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block .

    $default  reduce using rule 174 (function_def_raw)


state 1208

  175 function_def_raw: ASYNC DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END . block

    NAME      shift, and go to state 3
    STRING    shift, and go to state 4
    INTEGER   shift, and go to state 5
    NOT       shift, and go to state 8
    GLOBAL    shift, and go to state 9
    YIELD     shift, and go to state 10
    IMPORT    shift, and go to state 11
    RETURN    shift, and go to state 12
    DEL       shift, and go to state 14
    NONLOCAL  shift, and go to state 15
    NEWLINE   shift, and go to state 266
    TRUE      shift, and go to state 16
    NONE      shift, and go to state 17
    CONTINUE  shift, and go to state 21
    RAISE     shift, and go to state 22
    PASS      shift, and go to state 23
    LAMBDA    shift, and go to state 24
    DEF       shift, and go to state 267
    FALSE     shift, and go to state 26
    ASSERT    shift, and go to state 27
    AWAIT     shift, and go to state 28
    BREAK     shift, and go to state 29
    '.'       shift, and go to state 32
    '*'       shift, and go to state 33
    '+'       shift, and go to state 34
    ';'       shift, and go to state 35
    '('       shift, and go to state 268
    '~'       shift, and go to state 37
    '-'       shift, and go to state 38

    IF                   reduce using rule 260 (disjunction)
    IF                   [reduce using rule 263 (conjunction)]
    IF                   [reduce using rule 266 (inversion)]
    IF                   [reduce using rule 287 (bitwise_or)]
    IF                   [reduce using rule 290 (bitwise_xor)]
    IF                   [reduce using rule 293 (bitwise_and)]
    IF                   [reduce using rule 296 (shift_expr)]
    IF                   [reduce using rule 300 (sum)]
    IF                   [reduce using rule 304 (term)]
    IF                   [reduce using rule 311 (factor)]
    IF                   [reduce using rule 320 (primary)]
    IF                   [reduce using rule 331 (atom)]
    NOT                  [reduce using rule 287 (bitwise_or)]
    NOT                  [reduce using rule 290 (bitwise_xor)]
    NOT                  [reduce using rule 293 (bitwise_and)]
    NOT                  [reduce using rule 296 (shift_expr)]
    NOT                  [reduce using rule 300 (sum)]
    NOT                  [reduce using rule 304 (term)]
    NOT                  [reduce using rule 311 (factor)]
    NOT                  [reduce using rule 320 (primary)]
    NOT                  [reduce using rule 331 (atom)]
    IN                   reduce using rule 287 (bitwise_or)
    IN                   [reduce using rule 290 (bitwise_xor)]
    IN                   [reduce using rule 293 (bitwise_and)]
    IN                   [reduce using rule 296 (shift_expr)]
    IN                   [reduce using rule 300 (sum)]
    IN                   [reduce using rule 304 (term)]
    IN                   [reduce using rule 311 (factor)]
    IN                   [reduce using rule 320 (primary)]
    IN                   [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  reduce using rule 320 (primary)
    SQUAREBRACKET_START  [reduce using rule 331 (atom)]
    SQUAREBRACKET_START  [reduce using rule 415 (t_primary)]
    DOUBLEEQUAL          reduce using rule 287 (bitwise_or)
    DOUBLEEQUAL          [reduce using rule 290 (bitwise_xor)]
    DOUBLEEQUAL          [reduce using rule 293 (bitwise_and)]
    DOUBLEEQUAL          [reduce using rule 296 (shift_expr)]
    DOUBLEEQUAL          [reduce using rule 300 (sum)]
    DOUBLEEQUAL          [reduce using rule 304 (term)]
    DOUBLEEQUAL          [reduce using rule 311 (factor)]
    DOUBLEEQUAL          [reduce using rule 320 (primary)]
    DOUBLEEQUAL          [reduce using rule 331 (atom)]
    IS                   reduce using rule 287 (bitwise_or)
    IS                   [reduce using rule 290 (bitwise_xor)]
    IS                   [reduce using rule 293 (bitwise_and)]
    IS                   [reduce using rule 296 (shift_expr)]
    IS                   [reduce using rule 300 (sum)]
    IS                   [reduce using rule 304 (term)]
    IS                   [reduce using rule 311 (factor)]
    IS                   [reduce using rule 320 (primary)]
    IS                   [reduce using rule 331 (atom)]
    ','                  reduce using rule 217 (star_expression)
    ','                  [reduce using rule 229 (expression)]
    ','                  [reduce using rule 260 (disjunction)]
    ','                  [reduce using rule 263 (conjunction)]
    ','                  [reduce using rule 266 (inversion)]
    ','                  [reduce using rule 287 (bitwise_or)]
    ','                  [reduce using rule 290 (bitwise_xor)]
    ','                  [reduce using rule 293 (bitwise_and)]
    ','                  [reduce using rule 296 (shift_expr)]
    ','                  [reduce using rule 300 (sum)]
    ','                  [reduce using rule 304 (term)]
    ','                  [reduce using rule 311 (factor)]
    ','                  [reduce using rule 320 (primary)]
    ','                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 320 (primary)]
    '.'                  [reduce using rule 331 (atom)]
    '.'                  [reduce using rule 415 (t_primary)]
    '*'                  [reduce using rule 304 (term)]
    '*'                  [reduce using rule 311 (factor)]
    '*'                  [reduce using rule 320 (primary)]
    '*'                  [reduce using rule 331 (atom)]
    '*'                  [reduce using rule 403 (single_target)]
    '*'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '+'                  [reduce using rule 210 (block)]
    '+'                  [reduce using rule 300 (sum)]
    '+'                  [reduce using rule 304 (term)]
    '+'                  [reduce using rule 311 (factor)]
    '+'                  [reduce using rule 320 (primary)]
    '+'                  [reduce using rule 331 (atom)]
    '+'                  [reduce using rule 403 (single_target)]
    '+'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '!'                  reduce using rule 213 (star_expressions)
    '!'                  [reduce using rule 217 (star_expression)]
    '!'                  [reduce using rule 229 (expression)]
    '!'                  [reduce using rule 260 (disjunction)]
    '!'                  [reduce using rule 263 (conjunction)]
    '!'                  [reduce using rule 266 (inversion)]
    '!'                  [reduce using rule 287 (bitwise_or)]
    '!'                  [reduce using rule 290 (bitwise_xor)]
    '!'                  [reduce using rule 293 (bitwise_and)]
    '!'                  [reduce using rule 296 (shift_expr)]
    '!'                  [reduce using rule 300 (sum)]
    '!'                  [reduce using rule 304 (term)]
    '!'                  [reduce using rule 311 (factor)]
    '!'                  [reduce using rule 320 (primary)]
    '!'                  [reduce using rule 331 (atom)]
    '!'                  [reduce using rule 367 (yield_expr)]
    '('                  [reduce using rule 217 (star_expression)]
    '('                  [reduce using rule 229 (expression)]
    '('                  [reduce using rule 260 (disjunction)]
    '('                  [reduce using rule 263 (conjunction)]
    '('                  [reduce using rule 266 (inversion)]
    '('                  [reduce using rule 287 (bitwise_or)]
    '('                  [reduce using rule 290 (bitwise_xor)]
    '('                  [reduce using rule 293 (bitwise_and)]
    '('                  [reduce using rule 296 (shift_expr)]
    '('                  [reduce using rule 300 (sum)]
    '('                  [reduce using rule 304 (term)]
    '('                  [reduce using rule 311 (factor)]
    '('                  [reduce using rule 320 (primary)]
    '('                  [reduce using rule 331 (atom)]
    '('                  [reduce using rule 415 (t_primary)]
    ')'                  reduce using rule 407 (single_subscript_attribute_target)
    '|'                  reduce using rule 287 (bitwise_or)
    '|'                  [reduce using rule 290 (bitwise_xor)]
    '|'                  [reduce using rule 293 (bitwise_and)]
    '|'                  [reduce using rule 296 (shift_expr)]
    '|'                  [reduce using rule 300 (sum)]
    '|'                  [reduce using rule 304 (term)]
    '|'                  [reduce using rule 311 (factor)]
    '|'                  [reduce using rule 320 (primary)]
    '|'                  [reduce using rule 331 (atom)]
    '|'                  [reduce using rule 403 (single_target)]
    '|'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '~'                  [reduce using rule 403 (single_target)]
    '~'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '-'                  [reduce using rule 300 (sum)]
    '-'                  [reduce using rule 304 (term)]
    '-'                  [reduce using rule 311 (factor)]
    '-'                  [reduce using rule 320 (primary)]
    '-'                  [reduce using rule 331 (atom)]
    '-'                  [reduce using rule 403 (single_target)]
    '-'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '@'                  reduce using rule 304 (term)
    '@'                  [reduce using rule 311 (factor)]
    '@'                  [reduce using rule 320 (primary)]
    '@'                  [reduce using rule 331 (atom)]
    '@'                  [reduce using rule 403 (single_target)]
    '@'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '/'                  reduce using rule 304 (term)
    '/'                  [reduce using rule 311 (factor)]
    '/'                  [reduce using rule 320 (primary)]
    '/'                  [reduce using rule 331 (atom)]
    '/'                  [reduce using rule 403 (single_target)]
    '/'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '%'                  reduce using rule 304 (term)
    '%'                  [reduce using rule 311 (factor)]
    '%'                  [reduce using rule 320 (primary)]
    '%'                  [reduce using rule 331 (atom)]
    '%'                  [reduce using rule 403 (single_target)]
    '%'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  reduce using rule 293 (bitwise_and)
    '&'                  [reduce using rule 296 (shift_expr)]
    '&'                  [reduce using rule 300 (sum)]
    '&'                  [reduce using rule 304 (term)]
    '&'                  [reduce using rule 311 (factor)]
    '&'                  [reduce using rule 320 (primary)]
    '&'                  [reduce using rule 331 (atom)]
    '&'                  [reduce using rule 403 (single_target)]
    '&'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '&'                  [reduce using rule 415 (t_primary)]
    '^'                  reduce using rule 290 (bitwise_xor)
    '^'                  [reduce using rule 293 (bitwise_and)]
    '^'                  [reduce using rule 296 (shift_expr)]
    '^'                  [reduce using rule 300 (sum)]
    '^'                  [reduce using rule 304 (term)]
    '^'                  [reduce using rule 311 (factor)]
    '^'                  [reduce using rule 320 (primary)]
    '^'                  [reduce using rule 331 (atom)]
    '^'                  [reduce using rule 403 (single_target)]
    '^'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '<'                  reduce using rule 296 (shift_expr)
    '<'                  [reduce using rule 300 (sum)]
    '<'                  [reduce using rule 304 (term)]
    '<'                  [reduce using rule 311 (factor)]
    '<'                  [reduce using rule 320 (primary)]
    '<'                  [reduce using rule 331 (atom)]
    '<'                  [reduce using rule 403 (single_target)]
    '<'                  [reduce using rule 407 (single_subscript_attribute_target)]
    '>'                  reduce using rule 287 (bitwise_or)
    '>'                  [reduce using rule 290 (bitwise_xor)]
    '>'                  [reduce using rule 293 (bitwise_and)]
    '>'                  [reduce using rule 296 (shift_expr)]
    '>'                  [reduce using rule 300 (sum)]
    '>'                  [reduce using rule 304 (term)]
    '>'                  [reduce using rule 311 (factor)]
    '>'                  [reduce using rule 320 (primary)]
    '>'                  [reduce using rule 331 (atom)]
    '>'                  [reduce using rule 403 (single_target)]
    '>'                  [reduce using rule 407 (single_subscript_attribute_target)]
    $default             reduce using rule 287 (bitwise_or)

    simple_stmts                       go to state 269
    simple_stmt                        go to state 42
    assignment                         go to state 44
    global_stmt                        go to state 45
    nonlocal_stmt                      go to state 46
    yield_stmt                         go to state 47
    assert_stmt                        go to state 48
    del_stmt                           go to state 49
    import_stmt                        go to state 50
    import_name                        go to state 51
    return_stmt                        go to state 58
    raise_stmt                         go to state 59
    block                              go to state 1215
    star_expressions                   go to state 65
    star_expression                    go to state 66
    expression                         go to state 67
    lambdef                            go to state 68
    disjunction                        go to state 69
    conjunction                        go to state 70
    inversion                          go to state 71
    comparison                         go to state 72
    bitwise_or                         go to state 73
    bitwise_xor                        go to state 74
    bitwise_and                        go to state 75
    shift_expr                         go to state 76
    sum                                go to state 77
    term                               go to state 78
    factor                             go to state 79
    power                              go to state 80
    await_primary                      go to state 81
    primary                            go to state 82
    atom                               go to state 83
    strings                            go to state 84
    yield_expr                         go to state 85
    single_target                      go to state 86
    single_subscript_attribute_target  go to state 87
    t_primary                          go to state 88


state 1209

   62 import_from_as_names: NAME SQUAREBRACKET_START AS NAME SQUAREBRACKET_END .

    $default  reduce using rule 62 (import_from_as_names)


state 1210

   59 import_from_targets: '(' import_from_as_names SQUAREBRACKET_START ',' SQUAREBRACKET_END . ')'

    ')'  shift, and go to state 1216


state 1211

  373 args: ',' '.' '(' starred_expression '|' '(' assigment_expression '|' expression '!' ':' EQUAL ')' '!' . EQUAL ')' '+' SQUAREBRACKET_START

    EQUAL  shift, and go to state 1217


state 1212

  160 key_value_pattern: '(' literal_expr '|' attr ')' ':' pattern .

    $default  reduce using rule 160 (key_value_pattern)


state 1213

  118 literal_expr: signed_number '!' '(' '+' '|' '-' . ')'

    ')'  shift, and go to state 1218


state 1214

  176 func_type_comment: NEWLINE TYPE_COMMENT '&' '(' . NEWLINE INDENT ')'

    NEWLINE  shift, and go to state 1219


state 1215

  175 function_def_raw: ASYNC DEF NAME '(' SQUAREBRACKET_START params SQUAREBRACKET_END ')' SQUAREBRACKET_START '-' '>' expression SQUAREBRACKET_END ':' SQUAREBRACKET_START func_type_comment SQUAREBRACKET_END block .

    $default  reduce using rule 175 (function_def_raw)


state 1216

   59 import_from_targets: '(' import_from_as_names SQUAREBRACKET_START ',' SQUAREBRACKET_END ')' .

    $default  reduce using rule 59 (import_from_targets)


state 1217

  373 args: ',' '.' '(' starred_expression '|' '(' assigment_expression '|' expression '!' ':' EQUAL ')' '!' EQUAL . ')' '+' SQUAREBRACKET_START

    ')'  shift, and go to state 1220


state 1218

  118 literal_expr: signed_number '!' '(' '+' '|' '-' ')' .

    $default  reduce using rule 118 (literal_expr)


state 1219

  176 func_type_comment: NEWLINE TYPE_COMMENT '&' '(' NEWLINE . INDENT ')'

    INDENT  shift, and go to state 1221


state 1220

  373 args: ',' '.' '(' starred_expression '|' '(' assigment_expression '|' expression '!' ':' EQUAL ')' '!' EQUAL ')' . '+' SQUAREBRACKET_START

    '+'  shift, and go to state 1222


state 1221

  176 func_type_comment: NEWLINE TYPE_COMMENT '&' '(' NEWLINE INDENT . ')'

    ')'  shift, and go to state 1223


state 1222

  373 args: ',' '.' '(' starred_expression '|' '(' assigment_expression '|' expression '!' ':' EQUAL ')' '!' EQUAL ')' '+' . SQUAREBRACKET_START

    SQUAREBRACKET_START  shift, and go to state 1224


state 1223

  176 func_type_comment: NEWLINE TYPE_COMMENT '&' '(' NEWLINE INDENT ')' .

    $default  reduce using rule 176 (func_type_comment)


state 1224

  373 args: ',' '.' '(' starred_expression '|' '(' assigment_expression '|' expression '!' ':' EQUAL ')' '!' EQUAL ')' '+' SQUAREBRACKET_START .

    $default  reduce using rule 373 (args)
